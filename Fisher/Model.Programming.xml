<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Model.Programming</name>
    </assembly>
    <members>
        <member name="T:IPro.Model.Client.Chart.IBarSeries">
            <summary>
            Represent series of bars
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.ISeries`1">
            <summary>
            Represents data series
            </summary>
            <typeparam name="T">Type of series</typeparam>
        </member>
        <member name="P:IPro.Model.Programming.ISeries`1.Item(System.Int32)">
             <summary>
             Gets or sets value at specified index
             </summary>
             <param name="index">Series index</param>
             <returns>Value if exists, default{T} otherwise</returns>
             <example>
             Get custom Bar series, Pivot, last close price
             <code>
             private ISeries&lt;Bar&gt; _barSeries;
             private int _lastIndex = -1;
             private Pivot _pivot;
            
             protected override void Init()
             {
                _barSeries = GetCustomSeries(Instrument.Id, Timeframe);
                _pivot = GetIndicator&lt;Pivot&gt;(this.Instrument.Id, Timeframe);
             }
             protected override void NewQuote()
             {
                if (_lastIndex >= _barSeries.Range.To - 1) return;
                _lastIndex = _barSeries.Range.To - 1;
                var closePrice = _barSeries[_lastIndex].Close;
             }
             </code>
             </example>
        </member>
        <member name="P:IPro.Model.Programming.ISeries`1.Range">
             <summary>
             Available data range
             </summary>
             <returns>Range index</returns>
             <example>
             Get custom Bar series, Pivot, last close price
             <code>
             private ISeries&lt;Bar&gt; _barSeries;
             private int _lastIndex = -1;
             private Pivot _pivot;
            
             protected override void Init()
             {
                _barSeries = GetCustomSeries(Instrument.Id, Timeframe);
                _pivot = GetIndicator&lt;Pivot&gt;(this.Instrument.Id, Timeframe);
             }
             protected override void NewQuote()
             {
                if (_lastIndex >= _barSeries.Range.To - 1) return;
                _lastIndex = _barSeries.Range.To - 1;
                var closePrice = _barSeries[_lastIndex].Close;
             }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Client.Chart.IBarSeries.PrepareRange(IPro.Model.Client.MarketData.IndexRange)">
            <summary>
            Load or calculate data range for following access
            </summary>
            <param name="range">Data range to prepare</param>
        </member>
        <member name="M:IPro.Model.Client.Chart.IBarSeries.DateTimeToIndex(System.DateTime)">
            <summary>
            Converts date to corresponding index
            </summary>
        </member>
        <member name="M:IPro.Model.Client.Chart.IBarSeries.IndexToDateTime(System.Int32)">
            <summary>
            Converts index to corresponding date
            </summary>
        </member>
        <member name="M:IPro.Model.Client.Chart.IBarSeries.AttachChart(System.Guid)">
            <summary>
            Subscribes chart to series' domain events notification
            </summary>
        </member>
        <member name="M:IPro.Model.Client.Chart.IBarSeries.DetachChart(System.Guid)">
            <summary>
            Unsubscribes chart from series' domain events notification
            </summary>
        </member>
        <member name="M:IPro.Model.Client.Chart.IBarSeries.ExportRange(IPro.Model.Client.MarketData.IndexRange)">
            <summary>
            Exports specified values renge
            </summary>
        </member>
        <member name="P:IPro.Model.Client.Chart.IBarSeries.InstrumentId">
            <summary>
            Instrument Id
            </summary>
        </member>
        <member name="P:IPro.Model.Client.Chart.IBarSeries.Period">
            <summary>
            Period
            </summary>
        </member>
        <member name="P:IPro.Model.Client.Chart.IBarSeries.PriceType">
            <summary>
            Price type for bars
            </summary>
        </member>
        <member name="P:IPro.Model.Client.Chart.IBarSeries.PriceScale">
            <summary>
            Price precission
            </summary>
        </member>
        <member name="P:IPro.Model.Client.Chart.IBarSeries.MaxRange">
            <summary>
            Maximum range in which bars can be loaded
            </summary>
        </member>
        <member name="E:IPro.Model.Client.Chart.IBarSeries.BarsChanged">
            <summary>
            Event fired when bar series is updated
            </summary>
        </member>
        <member name="E:IPro.Model.Client.Chart.IBarSeries.BarsPreparing">
            <summary>
            Event fired when bar series preparation is requested
            </summary>
        </member>
        <member name="M:IPro.Model.Client.Chart.IChartTool.ReportChanged">
            <summary>
            This method reports that one ore more chart tool properties are changed
            So all dependant classes could update thair state 
            </summary>
        </member>
        <member name="P:IPro.Model.Client.Chart.IChartTool.InstrumentPositioning">
            <summary>
            Define members to set the positioning instruments of technical analysis on the chart
            </summary>
        </member>
        <member name="T:IPro.Model.Client.Chart.IInstrumentPositioning">
            <summary>
            Define members to set the positioning instruments of technical analysis on the chart
            </summary>
        </member>
        <member name="M:IPro.Model.Client.Chart.IInstrumentPositioning.CalculateOffsets(System.Windows.Rect,System.Windows.Point,IPro.Model.Client.Chart.AnglePositioning)">
            <summary>
            Calculates the offset points of the tool relative to the specified AnglePositioning value and stores it in OffsetPoints list
            </summary>
            <param name="bounds">Bounds in relation to which will be calculated offset points of the tool</param>
            <param name="point">Points of technical analysis tool</param>
            <param name="anglePositioning">Anglepositioning applied to the tool</param>
        </member>
        <member name="P:IPro.Model.Client.Chart.IInstrumentPositioning.Positioning">
            <summary>   
            Determine which positioning will be applied to the instrument
            </summary>
        </member>
        <member name="P:IPro.Model.Client.Chart.IInstrumentPositioning.AnglePositioning">
            <summary>
            Defines an angle with respect to which positioning is applied to the tool
            </summary>
        </member>
        <member name="P:IPro.Model.Client.Chart.IInstrumentPositioning.XOffset">
            <summary>
            Specify additional shift to each point by X axis
            </summary>
        </member>
        <member name="P:IPro.Model.Client.Chart.IInstrumentPositioning.YOffset">
            <summary>
            Specify additional shift to each point by Y axis
            </summary>
        </member>
        <member name="P:IPro.Model.Client.Chart.IInstrumentPositioning.OffsetPoints">
            <summary>
            Contain points where each point stores offset relative AnglePositioning value 
            </summary>
        </member>
        <member name="T:IPro.Model.Marshallable">
            <exclude />
        </member>
        <member name="M:IPro.Model.Marshallable.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:IPro.Model.Marshallable.OnDispose">
            <summary>
            Release managed resources here
            </summary>
        </member>
        <member name="M:IPro.Model.Client.Chart.BarSeriesCrossDomain.PrepareRange(IPro.Model.Client.MarketData.IndexRange)">
            <summary>
            <see cref="T:IPro.Model.Client.Chart.IBarSeries"/>
            </summary>
        </member>
        <member name="M:IPro.Model.Client.Chart.BarSeriesCrossDomain.ExportRange(IPro.Model.Client.MarketData.IndexRange)">
            <summary>
            <see cref="T:IPro.Model.Client.Chart.IBarSeries"/>
            </summary>
        </member>
        <member name="M:IPro.Model.Client.Chart.BarSeriesCrossDomain.DateTimeToIndex(System.DateTime)">
            <summary>
            <see cref="T:IPro.Model.Client.Chart.IBarSeries"/>
            </summary>
        </member>
        <member name="M:IPro.Model.Client.Chart.BarSeriesCrossDomain.IndexToDateTime(System.Int32)">
            <summary>
            <see cref="T:IPro.Model.Client.Chart.IBarSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Client.Chart.BarSeriesCrossDomain.Item(System.Int32)">
            <summary>
            <see cref="T:IPro.Model.Client.Chart.IBarSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Client.Chart.BarSeriesCrossDomain.InstrumentId">
            <summary>
            <see cref="T:IPro.Model.Client.Chart.IBarSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Client.Chart.BarSeriesCrossDomain.Period">
            <summary>
            <see cref="T:IPro.Model.Client.Chart.IBarSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Client.Chart.BarSeriesCrossDomain.PriceScale">
            <summary>
            <see cref="T:IPro.Model.Client.Chart.IBarSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Client.Chart.BarSeriesCrossDomain.MaxRange">
            <summary>
            <see cref="T:IPro.Model.Client.Chart.IBarSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Client.Chart.BarSeriesCrossDomain.Range">
            <summary>
            <see cref="T:IPro.Model.Client.Chart.IBarSeries"/>
            </summary>
        </member>
        <member name="E:IPro.Model.Client.Chart.BarSeriesCrossDomain.BarsChanged">
            <summary>
            <see cref="T:IPro.Model.Client.Chart.IBarSeries"/>
            </summary>
        </member>
        <member name="E:IPro.Model.Client.Chart.BarSeriesCrossDomain.BarsPreparing">
            <summary>
            <see cref="T:IPro.Model.Client.Chart.IBarSeries"/>
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.IIndicatorSeries">
             <summary>
             Represents indicator data series
             </summary>
             <example>
             Indicator with random values
             <code>
            using System;
            
            using IPro.Model.Programming;
            using IPro.Model.Programming.Indicators;
            
            namespace RandIndicat
            {
                [Indicator("Random indicator")]
                public class RndInd : Indicator
                {
                    [Series("My custom indicator series")]
                    public IIndicatorSeries IndSeries { get; set; }
            	
                    protected override void Calculate(int index)
                    {
                        var rand = new Random();
                        IndSeries[index] = Instrument.Ask+rand.NextDouble()*Instrument.Point*5;
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.IIndicatorSeries.Clear">
            <summary>
            Method to remove data from indicator series
            </summary>
            <exclude />
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IIndicatorSeries.Properties">
            <summary>
            Represents properties of indicator series
            </summary>
            <exclude />
        </member>
        <member name="E:IPro.Model.Programming.Indicators.IIndicatorSeries.Changed">
            <summary>
            Event to handle indicator series changed
            </summary>
            <exclude />
        </member>
        <member name="T:IPro.Model.MarshallableEntity">
            <exclude />
        </member>
        <member name="T:IPro.Model.Client.DataAccess.IStateful`1">
            <exclude />
        </member>
        <member name="T:IPro.Model.Client.MarketData.DataSeries`1">
            <summary>
            <see cref="T:IPro.Model.Programming.ISeries`1"/>
            </summary>
        </member>
        <member name="M:IPro.Model.Client.MarketData.DataSeries`1.Clear">
            <summary>
            <see cref="T:IPro.Model.Programming.ISeries`1"/>
            </summary>
        </member>
        <member name="M:IPro.Model.Client.MarketData.DataSeries`1.ExportRange(IPro.Model.Client.MarketData.IndexRange)">
            <summary>
            Used for marshalling purposes
            </summary>
        </member>
        <member name="M:IPro.Model.Client.MarketData.DataSeries`1.ImportRange(IPro.Model.Client.Chart.SeriesRange{`0})">
            <summary>
            Used for marshalling purposes
            </summary>
        </member>
        <member name="P:IPro.Model.Client.MarketData.DataSeries`1.Item(System.Int32)">
            <summary>
            <see cref="T:IPro.Model.Programming.ISeries`1"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Client.MarketData.DataSeries`1.Range">
            <summary>
            <see cref="T:IPro.Model.Programming.ISeries`1"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Client.MarketData.DataSeries`1.DefaultValue">
            <summary>
            Default value
            </summary>
        </member>
        <member name="T:IPro.Model.Client.MarketData.IndexRange">
            <summary>
            Index range
            </summary>
        </member>
        <member name="M:IPro.Model.Client.MarketData.IndexRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Index range
            </summary>
            <param name="from">From index</param>
            <param name="to">To index</param>
        </member>
        <member name="M:IPro.Model.Client.MarketData.IndexRange.IsIncludes(IPro.Model.Client.MarketData.IndexRange)">
            <summary>
            Indicates index range includes another <see cref="T:IPro.Model.Client.MarketData.IndexRange"/>
            </summary>
            <param name="other">Index range</param>
            <returns>True if includes</returns>
        </member>
        <member name="M:IPro.Model.Client.MarketData.IndexRange.IsIncludes(System.Int32)">
            <summary>
            Indicates index range includes index
            </summary>
            <param name="index">Index</param>
            <returns>True if includes</returns>
        </member>
        <member name="M:IPro.Model.Client.MarketData.IndexRange.Expand(IPro.Model.Client.MarketData.IndexRange)">
            <summary>
            Expands index range by another
            </summary>
            <param name="other">Another <see cref="T:IPro.Model.Client.MarketData.IndexRange"/></param>
            <returns>Expanded <see cref="T:IPro.Model.Client.MarketData.IndexRange"/></returns>
        </member>
        <member name="M:IPro.Model.Client.MarketData.IndexRange.ExpandBorders(System.Int32)">
            <summary>
            Expands index range borders
            </summary>
            <param name="size">Size of <see cref="T:IPro.Model.Client.MarketData.IndexRange"/></param>
            <returns>Expanded borders <see cref="T:IPro.Model.Client.MarketData.IndexRange"/></returns>
        </member>
        <member name="M:IPro.Model.Client.MarketData.IndexRange.Expand(System.Int32)">
            <summary>
            Expands index range borders
            </summary>
            <param name="index">Index</param>
            <returns>Expanded <see cref="T:IPro.Model.Client.MarketData.IndexRange"/></returns>
        </member>
        <member name="M:IPro.Model.Client.MarketData.IndexRange.Intersect(IPro.Model.Client.MarketData.IndexRange)">
            <summary>
            Intersect index range
            </summary>
            <param name="range">Index range</param>
            <returns>Intersected index range</returns>
        </member>
        <member name="M:IPro.Model.Client.MarketData.IndexRange.GetDistance(IPro.Model.Client.MarketData.IndexRange)">
            <summary>
            Gets the distance between <see cref="T:IPro.Model.Client.MarketData.IndexRange"/>
            </summary>
            <param name="range"><see cref="T:IPro.Model.Client.MarketData.IndexRange"/></param>
            <returns>Distance</returns>
        </member>
        <member name="M:IPro.Model.Client.MarketData.IndexRange.FromIndex(System.Int32)">
            <summary>
            Index range from index
            </summary>
            <param name="index">Index</param>
            <returns><see cref="T:IPro.Model.Client.MarketData.IndexRange"/> from index</returns>
        </member>
        <member name="M:IPro.Model.Client.MarketData.IndexRange.ToString">
            <summary>
            String value of index range
            </summary>
            <returns>
            Formated string
            </returns>
        </member>
        <member name="P:IPro.Model.Client.MarketData.IndexRange.From">
            <summary>
            From index
            </summary>
        </member>
        <member name="P:IPro.Model.Client.MarketData.IndexRange.To">
            <summary>
            To index
            </summary>
        </member>
        <member name="P:IPro.Model.Client.MarketData.IndexRange.IsEmpty">
            <summary>
            Indicates index range is empty
            </summary>
        </member>
        <member name="P:IPro.Model.Client.MarketData.IndexRange.Length">
            <summary>
            Length of insex range
            </summary>
        </member>
        <member name="P:IPro.Model.Client.MarketData.IndexRange.Empty">
            <summary>
            Empty <see cref="T:IPro.Model.Client.MarketData.IndexRange"/>
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.AdvisorOrderType">
            <summary>
            Represents types of orders to open position by trade strategy
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.AdvisorOrderType.None">
            <summary>
            Do nothing 
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.AdvisorOrderType.Buy">
            <summary>
            Open Buy position
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.AdvisorOrderType.Sell">
            <summary>
            Open Sell position
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.PivotBarPeriod">
            <summary>
            List of periods for <see cref="T:IPro.Model.Programming.Indicators.Standard.Pivot"/> indicator
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.PivotBarPeriod.MN1">
            <summary>
            1 month
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.PivotBarPeriod.W1">
            <summary>
            1 week
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.PivotBarPeriod.D1">
            <summary>
            1 day
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.ParametersGroup">
             <summary>
             Represents indicators and trade strateges group parameters
             </summary>
             <example>
             Usage of parameters group in a trade strategy
             <code>
            using IPro.Model.Programming;
            using IPro.Model.Programming.TradeSystems;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("ExampleTS")]
                [ParametersGroup(__ui_cGroupId1, NameOfOptionalParameter = "UseFirstMA", Order = -1)]
                [ParametersGroup(__ui_cGroupId2, NameOfOptionalParameter = "UseSecondMA", Order = 0)]
                [ParametersGroup(__ui_cGroup_Parameters1, "Indicator params:", ParentId = __ui_cGroupId1)]
                [ParametersGroup(__ui_cGroup_Parameters2, "Indicator params:", ParentId = __ui_cGroupId2)]
                public class ExampleTradeStr : TradeSystem
                {
                    [Parameter("Use Moving Average 1", DefaultValue = true, GroupId = __ui_cGroupId1)]
                    public bool UseFirstMA { get; set; }
                    [Parameter("Period", DefaultValue = 10, MinValue = 1, GroupId = __ui_cGroup_Parameters1)]
                    public int PeriodMA1 { get; set; }
                    [Parameter("Shift", DefaultValue = 0, MinValue = -1000, MaxValue = 1000, GroupId = __ui_cGroup_Parameters1)]
                    public int ShiftMA1 { get; set; }
            
                    [Parameter("Use Moving Average 2", DefaultValue = true, GroupId = __ui_cGroupId2)]
                    public bool UseSecondMA { get; set; }
                    [Parameter("Period", DefaultValue = 20, MinValue = 1, GroupId = __ui_cGroup_Parameters2)]
                    public int PeriodMA2 { get; set; }
                    [Parameter("Shift", DefaultValue = 0, MinValue = -1000, MaxValue = 1000, GroupId = __ui_cGroup_Parameters2)]
                    public int ShiftMA2 { get; set; }
            
                    private const string __ui_cGroupId1 = "g1";
                    private const string __ui_cGroupId2 = "g2";
                    private const string __ui_cGroup_Parameters1 = "g-indicator-params-1";
                    private const string __ui_cGroup_Parameters2 = "g-indicator-params-2";
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.ParametersGroup.#ctor">
            <summary>
            Default parameters group
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.ParametersGroup.#ctor(System.String,System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Custom parameters group
            </summary>        
            <param name="id">Parameters id</param>
            <param name="parentId">Parameters parent id</param>
            <param name="title">Title of parameter</param>
            <param name="order">Parameter order number</param>
            <param name="nameOfOptionalParameter">Optional parameter name</param>
            <param name="atLeastOneOptionalParameterIsChecked">if true - at least on of parameters group must be checked (using together with NameOfOptionalParameter)</param>
        </member>
        <member name="M:IPro.Model.Programming.ParametersGroup.SetState(IPro.Model.Client.DataAccess.ParametersGroupState)">
            <summary>
            Sets parameter state
            </summary> 
            <param name="state">Parameters group state</param>
        </member>
        <member name="M:IPro.Model.Programming.ParametersGroup.GetState">
            <summary>
            Gets parameter state
            </summary>
            <returns>State of parameters group</returns>
        </member>
        <member name="P:IPro.Model.Programming.ParametersGroup.Id">
            <summary>
            Parameter Id
            </summary> 
        </member>
        <member name="P:IPro.Model.Programming.ParametersGroup.ParentId">
            <summary>
            Parameter parent Id
            </summary> 
        </member>
        <member name="P:IPro.Model.Programming.ParametersGroup.Title">
            <summary>
            Parameter title
            </summary> 
        </member>
        <member name="P:IPro.Model.Programming.ParametersGroup.Order">
            <summary>
            Parameter order number
            </summary> 
        </member>
        <member name="P:IPro.Model.Programming.ParametersGroup.NameOfOptionalParameter">
            <summary>
            Name of optional parameter
            </summary> 
        </member>
        <member name="P:IPro.Model.Programming.ParametersGroup.AtLeastOneIsChecked">
            <summary>
            Specify if at least one of parameters group must be checked (only if NameOfOptionalParameter specified too)
            </summary> 
        </member>
        <member name="T:IPro.Model.Programming.ParametersGroupAttribute">
             <summary>
             Represents indicators and trade strateges group parameters attributes
             </summary>
             <example>
             Usage of parameters groups and attributes in a trade strategy
             <code>
            using IPro.Model.Programming;
            using IPro.Model.Programming.TradeSystems;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("ExampleTS")]
                [ParametersGroup(__ui_cGroupId1, NameOfOptionalParameter = "UseFirstMA", Order = -1)]
                [ParametersGroup(__ui_cGroupId2, NameOfOptionalParameter = "UseSecondMA", Order = 0)]
                [ParametersGroup(__ui_cGroup_Parameters1, "Indicator params:", ParentId = __ui_cGroupId1)]
                [ParametersGroup(__ui_cGroup_Parameters2, "Indicator params:", ParentId = __ui_cGroupId2)]
                public class ExampleTradeStr : TradeSystem
                {
                    [Parameter("Use Moving Average 1", DefaultValue = true, GroupId = __ui_cGroupId1)]
                    public bool UseFirstMA { get; set; }
                    [Parameter("Period", DefaultValue = 10, MinValue = 1, GroupId = __ui_cGroup_Parameters1)]
                    public int PeriodMA1 { get; set; }
                    [Parameter("Shift", DefaultValue = 0, MinValue = -1000, MaxValue = 1000, GroupId = __ui_cGroup_Parameters1)]
                    public int ShiftMA1 { get; set; }
            
                    [Parameter("Use Moving Average 2", DefaultValue = true, GroupId = __ui_cGroupId2)]
                    public bool UseSecondMA { get; set; }
                    [Parameter("Period", DefaultValue = 20, MinValue = 1, GroupId = __ui_cGroup_Parameters2)]
                    public int PeriodMA2 { get; set; }
                    [Parameter("Shift", DefaultValue = 0, MinValue = -1000, MaxValue = 1000, GroupId = __ui_cGroup_Parameters2)]
                    public int ShiftMA2 { get; set; }
            
                    private const string __ui_cGroupId1 = "g1";
                    private const string __ui_cGroupId2 = "g2";
                    private const string __ui_cGroup_Parameters1 = "g-indicator-params-1";
                    private const string __ui_cGroup_Parameters2 = "g-indicator-params-2";
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.ParametersGroupAttribute.#ctor(System.String)">
            <summary>
            Parameters group attribute
            </summary>
            <param name="groupId">Id of a parameter group</param>
        </member>
        <member name="M:IPro.Model.Programming.ParametersGroupAttribute.#ctor(System.String,System.String)">
            <summary>
            Parameters group attribute
            </summary>
            <param name="groupId">Id of a parameter group</param>
            <param name="title">Title of a parameter group</param>
        </member>
        <member name="M:IPro.Model.Programming.ParametersGroupAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Parameters group attribute
            </summary>
            <param name="groupId">Id of a parameter group</param>
            <param name="title">Title of a parameter group</param>
            <param name="parentId">Parent id of a parameter group</param>
        </member>
        <member name="M:IPro.Model.Programming.ParametersGroupAttribute.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Parameters group attribute
            </summary>
            <param name="groupId">Id of a parameter group</param>
            <param name="title">Title of a parameter group</param>
            <param name="parentId">Parent id of a parameter group</param>
            <param name="nameOfOptionalParameter">Name of optional parameter in a parameter group</param>
            <param name="atLeastOneOptionalParameterIsChecked">if true - at least on of parameters group must be checked (using together with NameOfOptionalParameter)</param>
        </member>
        <member name="P:IPro.Model.Programming.ParametersGroupAttribute.GroupId">
            <summary>
            Parameter Id
            </summary> 
        </member>
        <member name="P:IPro.Model.Programming.ParametersGroupAttribute.Title">
            <summary>
            Parameter title
            </summary> 
        </member>
        <member name="P:IPro.Model.Programming.ParametersGroupAttribute.ParentId">
            <summary>
            Parameter parent Id
            </summary> 
        </member>
        <member name="P:IPro.Model.Programming.ParametersGroupAttribute.NameOfOptionalParameter">
            <summary>
            Name of optional parameter
            </summary> 
        </member>
        <member name="P:IPro.Model.Programming.ParametersGroupAttribute.AtLeastOneIsChecked">
            <summary>
            Specify if at least one of parameters group must be checked (only if NameOfOptionalParameter specified too)
            </summary> 
        </member>
        <member name="P:IPro.Model.Programming.ParametersGroupAttribute.Order">
             <summary>
            Parameter order number
             </summary> 
        </member>
        <member name="T:IPro.Model.Programming.Indicators.PivotType">
            <summary>
            Represents available types of <see cref="F:IPro.Model.Programming.Indicators.PivotType.Pivot"/> indicator
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.PivotType.Pivot">
            <summary>
            Pivot indicator
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.PivotType.WoodiePivotPoint">
            <summary>
            Indicator Woodie Pivot Point 
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.PivotType.Camarilla">
            <summary>
            Camarilla Pivot indicator
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.PivotType.Fibonacci">
            <summary>
            Fibonacci Pivot indicator 
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.PivotType.TomDemark">
            <summary>
            Tom Demark Pivot indicator 
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.Pivot">
             <summary>
             Pivot indicator
             </summary>
             <example>
             Usage of Pivot indicator in a trade strategy
             <code>
            using System;
            using IPro.Model.Programming;
            using IPro.Model.Programming.Indicators;
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            using IPro.Model.Client.MarketData;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("PivotExampleTS")]
                public class PivotExampleTS : TradeSystem
                {
                    private Pivot _pivot;
                    private ISeries&lt;Bar&gt; _barSeries;
                    private int _lastIndex = -1;
            
                    [Parameter("Pivot_period", DefaultValue = 1440, MinValue = 1)]
                    public PivotBarPeriod PivotPeriod;
            
                    protected override void Init()
                    {
                        _pivot = GetIndicator&lt;Pivot&gt;(this.Instrument.Id, Timeframe);
                        _barSeries = GetCustomSeries(this.Instrument.Id, Timeframe);
                    }
            
                    protected override void NewQuote()
                    {
                        if (_lastIndex >= _barSeries.Range.To - 1) return;
                        _lastIndex = _barSeries.Range.To - 1;
                        var index = _lastIndex;
            
                        var pivotPointLevel = _pivot.PivotSeries[index];
                        var pivotPointS1Level = _pivot.S1[index];
                        var pivotPointR2Level = _pivot.R2[index];
                        var pivotPointR1Level = _pivot.R1[index];
                        var pivotPointS2Level = _pivot.S2[index];
            
                        Print("Pivot points: {0}, {1}, {2}, {3}, {4}", pivotPointLevel, pivotPointS1Level, pivotPointR2Level, pivotPointR1Level, pivotPointS2Level);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Indicator">
             <summary>
             Base class for all indicators
             </summary>
             <example>
             Create custom indicator and get its name, period, and previous data dependensy
             <code>
            using System;
            using IPro.Model.Programming;
            using IPro.Model.Programming.Indicators;
            
            namespace ExampleIndicator
            {
                [Indicator("Example Indicator")]
                public class TestIndicat : Indicator
                {
                    [Series("SeriesInd")]
                    public IIndicatorSeries IndSeries { get; set; }
                    [Parameter("Period",  DefaultValue = 18, MinValue = 1)]
                    public int Period { get; set; }
            
                    protected override void Init()
                    {
                        IndSeries.Properties.Color=Color.Red;
                        Print("Indicator name: {0}, period: {1}, is depended on previus data: {2}",Title,TotalPeriod,DependsOnPreviousData);
                    }
            			
                    protected override int TotalPeriod
                    {
                        get { return Period; }
                    }
            
                    protected override void Calculate(int index)
                    {
                        Random rand = new Random();
                        IndSeries[index] = Instrument.Ask+rand.NextDouble()*Instrument.Point*5;
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="T:IPro.Model.Programming.ProgramBase">
            <summary>
            Base class for all programs
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.ProgramBase.Init">
             <summary>
             Initiation function
             </summary>
             <example>
             Geting initial timeframe
             <code>
            private Period _period;
            protected override void Init()
            {
                _period = Timeframe;
                Print("TS started in {0} timeframe", _period);
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.ProgramBase.Deinit">
             <summary>
             Deinit function
             </summary>
             <example>
             Sends to log, before closing, profit for all closed positions, opened by strategy 
             <code>
            protected override void Deinit()
            {
                var closedPos = Trade.GetClosedPositions(null, true);
                decimal profit = 0;
                foreach (var cpos in closedPos) profit = profit + cpos.Profit;
                Print("Profit = {0}", profit);
            }  
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.ProgramBase.ErrorOccurred(System.Exception)">
             <summary>
             Called when unhandled error is occurred
             </summary>
             <param name="ex">Exception that occurs during execution</param>
             <example>
             Sends an error to log
             <code>
            protected override void ErrorOccurred(Exception ex)
            {
                Print("Unhandled error occurred. Message: {0}", ex.Message);
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.ProgramBase.GetPrice(IPro.Model.Client.MarketData.Bar,IPro.Model.Programming.Indicators.PriceMode)">
             <summary>
             Get price of bar
             </summary>
             <param name="bar">Bar to get price</param>
             <param name="appliedPrice">Price mode to get</param>
             <returns>Bar price according to the price mode</returns>
             <example>
             Geting price information for the last bar
             <code>
            var closePrice = GetPrice(Bars[Bars.Range.To - 1], PriceMode.Close);
            var openPrice = GetPrice(Bars[Bars.Range.To - 1], PriceMode.Open);
            var medianPrice = GetPrice(Bars[Bars.Range.To - 1], PriceMode.Median);
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.ProgramBase.GetCustomSeries(System.Guid,IPro.Model.Client.MarketData.Period)">
             <summary>
             Creates bar series for specified instrument and timeframe
             </summary>
             <param name="instrumentId">Guid of the instrument</param>
             <param name="period">Timeframe to get series</param>
             <returns>Bar series for custom instrument and timeframe</returns>
             <example>
             Get custom Bar series and last bar close price
             <code>
             private ISeries&lt;Bar&gt; _barSeries;
             private int _lastIndex = -1;
            
             protected override void Init()
             {
                _barSeries = GetCustomSeries(Instrument.Id, Timeframe);
             }
             protected override void NewQuote()
             {
                if (_lastIndex >= _barSeries.Range.To - 1) return;
                _lastIndex = _barSeries.Range.To - 1;
                var closePrice = _barSeries[_lastIndex].Close;
             }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.ProgramBase.GetIndicator``1(System.Guid,IPro.Model.Client.MarketData.Period,System.Object[])">
             <summary>
             Creates custom indicator
             </summary>
             <typeparam name="TIndicator">Indicator</typeparam>
             <param name="instrumentId">Guid of the instrument</param>
             <param name="period">Timeframe to get indicator</param>
             <param name="values">List of parameters</param>
             <returns>Custom indicator with specified parameters</returns>
             <example>
             Creates Moving Average indicator for M1 timeframe
             <code>
            private Period _period = new Period(PeriodType.Minute, 1);
            private MovingAverage _ma;
            private int _maPeriod = 10;
            private int _maShift = 0;
            private MaMethods _maMethod;
            private PriceMode _priceMode = PriceMode.Low;
            
            protected override void Init()
            {
                _ma = GetIndicator&lt;MovingAverage&gt;(Instrument.Id, _period, _maPeriod, _maShift, _maMethod, _priceMode);
            }  
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.ProgramBase.Print(System.String,System.Object[])">
            <summary>
            Prints message to log window
            </summary>
            <param name="s">Text</param>
            <param name="parameters">List of parameters</param>
            <example>
            Sends "Hello, world!" to the log window
            <code>
            var str1="Hello";
            var str2="world";
            Print("{0}, {1}!",str1,str2);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.ProgramBase.TimeToIndex(System.DateTime,IPro.Model.Client.MarketData.Period)">
             <summary>
             Converts time to index 
             </summary>
             <param name="time">Time in DateTime format</param>
             <param name="period">Period</param>
             <returns>Index from the time</returns>
             <example>
             Geting Bar index from its time
             <code>
            private ISeries&lt;Bar&gt; _barSeries;
            protected override void Init()
            {
                _barSeries = GetCustomSeries(this.Instrument.Id, Timeframe);
            }
            protected override void NewBar()
            {
                var indexFromTime = TimeToIndex(_barSeries[_barSeries.Range.To - 1].Time, Timeframe);
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.ProgramBase.IndexToTime(System.Int32,IPro.Model.Client.MarketData.Period)">
             <summary>
             Converts index to time for specified period
             </summary>
             <param name="index">Index</param>
             <param name="period">Period</param>
             <returns>Time from index in DateTime format</returns>
             <example>
             Geting time from index
             <code>
            private ISeries&lt;Bar&gt; _barSeries;
            protected override void Init()
            {
                _barSeries = GetCustomSeries(this.Instrument.Id, Timeframe);
            }
            protected override void NewBar()
            {
                var timeFromIndex = IndexToTime(_barSeries.Range.To - 1, Timeframe);
            
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.ProgramBase.TransformRange(IPro.Model.Client.MarketData.IndexRange,IPro.Model.Client.MarketData.Period,IPro.Model.Client.MarketData.Period)">
            <summary>
            Converts range between timeframes
            </summary>
            <param name="range">Index range</param>
            <param name="period">Period</param>
            <param name="targetPeriod">Target period</param>
            <returns>Cnoverted index range</returns>
            <example>
            Transform index range from M5 timeframe to M1 timeframe
            <code>
            var periodM1 = new Period(PeriodType.Minute, 1);
            var periodM5 = new Period(PeriodType.Minute, 5);
            var rng = TransformRange(new IndexRange(fromIndex, toIndex), periodM5, periodM1);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.ProgramBase.TransformIndex(System.Int32,IPro.Model.Client.MarketData.Period,IPro.Model.Client.MarketData.Period)">
            <summary>
            Converts index between timeframes
            </summary>
            <param name="index">Index</param>
            <param name="period">Period</param>
            <param name="targetPeriod">Target period</param>
            <returns>Index converted to new period</returns>
            <example>
            Transform index from M1 to M5 timeframe
            <code>
            var periodM1 = new Period(PeriodType.Minute, 1);
            var periodM5 = new Period(PeriodType.Minute, 5);
            var newIndex = TransformIndex(oldIndex, periodM1, periodM5);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.ProgramBase.OnDispose">
            <summary>
            Release managed resources
            </summary>
            <exclude />
        </member>
        <member name="P:IPro.Model.Programming.ProgramBase.Properties">
            <exclude />
        </member>
        <member name="P:IPro.Model.Programming.ProgramBase.ParametersGroups">
            <exclude />
        </member>
        <member name="P:IPro.Model.Programming.ProgramBase.Timeframe">
             <summary>
             Main instrument's timeframe
             </summary>
             <returns>Current instrument timeframe</returns>
             <example>
             Geting inital timeframe
             <code>
            private Period _period;
            protected override void Init()
            {
                _period = Timeframe;
                Print("TS started in {0} timeframe", _period);
            }
             </code>
             </example>
        </member>
        <member name="P:IPro.Model.Programming.ProgramBase.Instrument">
             <summary>
             Main instruemnt
             </summary>
             <returns>Current instrument</returns>
             <example>
             Geting instrument name
             <code>
            protected override void NewBar()
            {
                Print("Current instrumet is {0}", Instrument.Name);
            }
             </code>
             </example>
        </member>
        <member name="P:IPro.Model.Programming.ProgramBase.Bars">
             <summary>
             Main bar series
             </summary>
             <returns>Bar series</returns>
             <example>
             Geting last bar close price
             <code>
            var closePrice=Bars[Bars.Range.To-1].Close;
             </code>
             </example>
        </member>
        <member name="P:IPro.Model.Programming.ProgramBase.Account">
            <summary>
            Account information
            </summary>
            <returns>Current trade account information</returns>
            <example>
            Geting minimal lot size for this trade account
            <code>
            var minLot=Account.MinLot;
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.ProgramBase.Instruments">
            <summary>
            Available instruments
            </summary>
            <returns>Collection of avaible instruments</returns>
            <example>
            Getting all available instruments for this account
            <code>
            protected override void Init()
            {
            	var allInstr=Instruments;
            	Print("Avaible instruments are:");
            	foreach (var ins in allInstr) Print(ins.Name);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.ProgramBase.Tools">
            <summary>
            Chart tools
            </summary>
            <returns>Grafic tools for the chart</returns> 
            <example>
            Puts a vertical line to the chart on the last bar
            <code>
            var vline = Tools.Create&lt;VerticalLine&gt;();
            vline.Color=Color.Red;
            vline.Time=Bars[Bars.Range.To-1].Time;
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.ProgramBase.Series">
            <summary>
            Series functions
            </summary>
            <returns>Methods to be performed on data series</returns> 
            <example>
            Gets bar index with the higest close price for the latest 5 bars. Main series are used as the source
            <code>
            var highestIndex = Series.Highest(Bars.Range.To, 5, PriceMode.Close);
            var highestPrice = Bars[highestIndex].Close;
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.ProgramBase.Time">
            <summary>
            Client time
            </summary>
            <returns>Current client time</returns> 
            <example>
            Geting local time
            <code>
            Print("Local time: {0}", Time);
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.ProgramBase.ServerTime">
            <summary>
            Server time
            </summary>
            <returns>Current server time</returns> 
            <example>
            Geting server time
            <code>
            Print("Server time: {0}", ServerTime);
            </code>
            </example>
        </member>
        <member name="E:IPro.Model.Programming.ProgramBase.Changed">
            <exclude />
        </member>
        <member name="E:IPro.Model.Programming.ProgramBase.SecurityExceptionOccured">
            <exclude />
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Indicator.Calculate(System.Int32,System.Int32)">
            <summary>
            Calculate function
            </summary>
            <param name="fromIndex">Index to calculate from</param>
            <param name="toIndex">Index to calculate to</param>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Indicator.Calculate(System.Int32)">
            <summary>
            Calculate function
            </summary>
            <param name="index">Index to calculate from</param>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Indicator.ValueOrDefault(System.Double,System.Double)">
            <summary>
            Gets value or default
            </summary>
            <param name="val">Value</param>
            <param name="defaultVal">Default value</param>
            <returns>Value or default value if value is not set</returns>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Indicator.CreateSeries``1">
            <summary>
            Creates data series
            </summary>
            <typeparam name="T">Type of series</typeparam>
            <returns>Data series for indicator</returns>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Indicator.ClearAtIndex(System.Int32)">
            <summary>
            Clears values at specified index of all available series
            </summary>
            <param name="index">Index to clear at</param>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Indicator.Init(IPro.Model.Programming.Indicators.IndicatorInfo,IPro.Model.Client.Chart.IBarSeries,IPro.Model.Programming.Chart.ITools,IPro.Model.Client.Development.ProgramManagement.IProgramDataProvider,IPro.Model.Client.Development.Indicators.IIndicatorsManager,IPro.Model.Client.Chart.IChart)">
            <exclude />
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Indicator.Clear">
            <exclude />
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Indicator.Recalculate(IPro.Model.Client.MarketData.IndexRange)">
            <exclude />
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Indicator.PrepareForAccess(IPro.Model.Client.MarketData.IndexRange)">
            <summary>
            Flush calculated data from cur app domain to main app domain for 
            rendering. Only for custom indicators
            </summary>
            <exclude />
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Indicator.AddLevel(IPro.Model.Programming.Indicators.IndicatorLevel)">
            <exclude />
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Indicator.RemoveLevel(IPro.Model.Programming.Indicators.IndicatorLevel)">
            <exclude />
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Indicator.OnDispose">
            <summary>
            Release managed resources
            </summary>
            <exclude />
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Indicator.IPro#Model#Client#DataAccess#IStateful{IPro#Model#Client#DataAccess#IndicatorState}#SetState(IPro.Model.Client.DataAccess.IndicatorState)">
            <exclude />
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Indicator.IPro#Model#Client#DataAccess#IStateful{IPro#Model#Client#DataAccess#IndicatorState}#GetState">
            <exclude />
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Indicator.Info">
            <exclude />
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Indicator.VisibleSeries">
            <exclude />
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Indicator.Levels">
            <exclude />
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Indicator.SectionId">
            <exclude />
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Indicator.DisplayedPeriod">
            <exclude />
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Indicator.IsInitialized">
            <exclude />
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Indicator.Title">
            <summary>
            Indicator displayed name
            </summary>
            <returns>Name of the indicator</returns>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Indicator.TotalPeriod">
            <summary>
            Period for calculation
            </summary>
            <returns>Indicator period for calculation</returns>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Indicator.BarsCountToLoad">
            <exclude />
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Indicator.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="E:IPro.Model.Programming.Indicators.Indicator.StyleChanged">
            <exclude />
        </member>
        <member name="F:IPro.Model.Programming.Indicators.Standard.Pivot.Range">
            <summary>
            Pivot indicator range
            </summary>
            <returns>
            Bar range for Pivot indicator
            </returns>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.Standard.Pivot.PivotType">
            <summary>
            Pivot type
            </summary>
            <returns>
            Type of a pivot indicator
            </returns>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.Standard.Pivot.R4">
            <summary>
            Pivot resistance series R4
            </summary>
            <returns>
            Resistance data series R4 for Pivot indicator
            </returns>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.Standard.Pivot.R3">
            <summary>
            Pivot  upper resistance series
            </summary>
            <returns>
            Resistance upper data series for Pivot indicator
            </returns>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.Standard.Pivot.R2">
            <summary>
            Pivot  middle resistance series
            </summary>
            <returns>
            Resistance middle data series for Pivot indicator
            </returns>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.Standard.Pivot.R1">
            <summary>
            Pivot  lower resistance series
            </summary>
            <returns>
            Resistance lower data series for Pivot indicator
            </returns>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.Standard.Pivot.PivotSeries">
            <summary>
            Pivot indicator data series
            </summary>
            <returns>
            Data series for Pivot indicator
            </returns>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.Standard.Pivot.S1">
            <summary>
            Pivot upper support series
            </summary>
            <returns>
            Upper support data series for Pivot indicator
            </returns>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.Standard.Pivot.S2">
            <summary>
            Pivot middle support series
            </summary>
            <returns>
            Middle support data series for Pivot indicator
            </returns>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.Standard.Pivot.S3">
            <summary>
            Pivot lower support series
            </summary>        
            <returns>
            Lower support data series for Pivot indicator
            </returns>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.Standard.Pivot.S4">
            <summary>
            Pivot support series S4
            </summary>
            <returns>
            Support data series S4 for Pivot indicator
            </returns>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.Pivot.Calculate(System.Int32,System.Int32)">
            <summary>
            Pivot calculate method
            </summary>
            <param name="fromIndex">Index to calculate from</param>
            <param name="toIndex">Index to calculate to</param>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.Pivot.Calculate(System.Int32)">
            <summary>
            Pivot calculate method
            </summary>
            <param name="index">Index to calculate</param>
        </member>
        <member name="T:IPro.Model.Client.Development.Threading.IActionPool">
            <summary>
            Plans action
            </summary>
        </member>
        <member name="M:IPro.Model.Client.Development.Threading.IActionPool.Queue(System.Action)">
            <summary>
            Queues action if pool allows it
            </summary>
            <param name="action">Action to execute</param>
        </member>
        <member name="T:IPro.Model.Programming.ExecutionMode">
            <summary>
            Specifies execution environment, real or tester
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.ExecutionMode.Real">
            <summary>
            Real time execution mode
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.ExecutionMode.Tester">
            <summary>
            Testing execution mode
            </summary>
        </member>
        <member name="T:IPro.Model.Client.MarketData.Period">
            <summary>
            Bar period 
            </summary>
        </member>
        <member name="F:IPro.Model.Client.MarketData.Period.M1">
            <summary>
            M1 period
            </summary>
        </member>
        <member name="F:IPro.Model.Client.MarketData.Period.H1">
            <summary>
            H1 period
            </summary>
        </member>
        <member name="F:IPro.Model.Client.MarketData.Period.BaseTime">
            <summary>
            Start time offset 
            </summary>
        </member>
        <member name="M:IPro.Model.Client.MarketData.Period.NextTime(System.DateTime)">
            <summary>
            Adds period to date
            </summary>
            <param name="date">Date to add</param>
            <returns>Next time value</returns>
        </member>
        <member name="M:IPro.Model.Client.MarketData.Period.PreviousTime(System.DateTime)">
            <summary>
            Substracts period from date
            </summary> 
            <param name="date">Date from</param>
            <returns>Previous time value</returns>
        </member>
        <member name="M:IPro.Model.Client.MarketData.Period.BarTime(System.DateTime)">
            <summary>
            Returns start bar time for the specified time
            </summary>
            <param name="from">Time from</param>
            <returns>Time of the bar started</returns>
        </member>
        <member name="M:IPro.Model.Client.MarketData.Period.ToMinutes">
            <summary>
            Get total minutes
            </summary>
            <returns>Total minutes as integer value</returns>
        </member>
        <member name="M:IPro.Model.Client.MarketData.Period.Equals(IPro.Model.Client.MarketData.Period)">
            <summary>
            Compares period
            </summary>
            <param name="other">Period to compare</param>
            <returns>True if period is equal</returns>
        </member>
        <member name="M:IPro.Model.Client.MarketData.Period.Equals(System.Object)">
            <summary>
            Compares period
            </summary>
            <param name="other">Period to compare</param>
            <returns>True if period is equal</returns>
        </member>
        <member name="M:IPro.Model.Client.MarketData.Period.GetHashCode">
            <summary>
            Hash code for period
            </summary>
            <returns>Periods hash code</returns>
        </member>
        <member name="M:IPro.Model.Client.MarketData.Period.TryParse(System.String,IPro.Model.Client.MarketData.Period@)">
            <summary>
            Tries to parse period
            </summary>
            <param name="str">String to parse</param>
            <param name="period">Parsed <see cref="T:IPro.Model.Client.MarketData.Period"/></param>
            <returns>True if string can be parsed</returns>
        </member>
        <member name="M:IPro.Model.Client.MarketData.Period.Parse(System.String)">
            <summary>
            Parses string to <see cref="T:IPro.Model.Client.MarketData.Period"/>
            </summary>
            <param name="str">String to parse</param>
            <returns>Parsed <see cref="T:IPro.Model.Client.MarketData.Period"/></returns>
        </member>
        <member name="M:IPro.Model.Client.MarketData.Period.ToString">
            <summary>
            Gets the string value of period
            </summary>
            <returns>Formated string</returns>
        </member>
        <member name="M:IPro.Model.Client.MarketData.Period.GetCountInRange(System.DateTime,System.DateTime)">
            <summary>
            Gets count in range
            </summary>
            <param name="from">Date from</param>
            <param name="to">Date to</param>
            <returns>Count in a range</returns>
        </member>
        <member name="M:IPro.Model.Client.MarketData.Period.GetBaseTypes">
            <summary>
            Gets base types of periods
            </summary>
            <returns>Array of base <see cref="T:IPro.Model.Client.MarketData.PeriodType"/></returns>
        </member>
        <member name="P:IPro.Model.Client.MarketData.Period.Type">
            <summary>
            Time unit for period
            </summary>
        </member>
        <member name="P:IPro.Model.Client.MarketData.Period.Count">
            <summary>
            Time unit count in the period
            </summary>
        </member>
        <member name="F:IPro.Model.Client.MarketData.PeriodType.Minute">
            <summary>
            Minute period
            </summary>
        </member>
        <member name="F:IPro.Model.Client.MarketData.PeriodType.Hour">
            <summary>
            Hour period
            </summary>
        </member>
        <member name="F:IPro.Model.Client.MarketData.PeriodType.Day">
            <summary>
            Day period
            </summary>
        </member>
        <member name="F:IPro.Model.Client.MarketData.PeriodType.Week">
            <summary>
            Week period
            </summary>
        </member>
        <member name="F:IPro.Model.Client.MarketData.PeriodType.Month">
            <summary>
            Month period
            </summary>
        </member>
        <member name="T:IPro.Model.MarshallableAggregateRoot">
            <exclude />
        </member>
        <member name="P:IPro.Model.MarshallableAggregateRoot.DomainEvents">
            <summary>
            Domain event manager for current model
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Chart.TextStyle">
            <summary>
            Represents the style of text in a chart
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.TextStyle.None">
            <summary>
            None text style
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.TextStyle.Bold">
            <summary>
            Bold text style
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.TextStyle.Italic">
            <summary>
            Italic text style
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.TextStyle.BoldItalic">
            <summary>
            Bold and italic text style
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.TradeSystems.ITrade">
            <summary>
            Trade provider interface for script
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.OpenPendingPosition(System.Guid,IPro.Model.Trade.ExecutionRule,System.Decimal,System.Double,System.Int32,IPro.Model.Programming.TradeSystems.Stops,System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            Sends pending order to the server for new position opening
            </summary>
            <param name="instrumentId">Instrument ID</param>
            <param name="type">Order type and direction</param>
            <param name="lots">Lots</param>
            <param name="price">Desired execution price</param>
            <param name="deviation">Possible execution deviation</param>
            <param name="expiresAt">Order expiration date</param>
            <param name="comment">Order comment</param>
            <param name="magicNumber">Number to identify position among others</param>
            <param name="stops">Stop loss, Take profit</param>
            <returns>Read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
            <example>
            Open pending position BuyLimit, lot size 0.01
            <code>
            Trade.OpenPendingPosition(Instrument.Id, ExecutionRule.BuyLimit, 0.01, Instrument.Ask-0.02, 0, null, null, "Pending order with lot=0.01", null);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.OpenPendingPosition(System.Guid,IPro.Model.Trade.ExecutionRule,System.Double,System.Double,System.Int32,IPro.Model.Programming.TradeSystems.Stops,System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32})">
            <summary>
            Sends pending order to the server for new position opening
            </summary>
            <param name="instrumentId">Instrument ID</param>
            <param name="type">Order type and direction</param>
            <param name="lots">Lots</param>
            <param name="price">Desired execution price</param>
            <param name="deviation">Possible execution deviation</param>
            <param name="expiresAt">Order expiration date</param>
            <param name="comment">Order comment</param>
            <param name="magicNumber">Number to identify position among others</param>
            <param name="stops">Stop loss, Take profit</param>
            <returns>Read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
            <example>
            Open pending position SellLimit, lot size 0.01
            <code>
            Trade.OpenPendingPosition(Instrument.Id, ExecutionRule.SellLimit, 0.01, Instrument.Ask+0.02, 0, null, null, "Pending order with lot=0.01", null);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.BuyLimit(System.Guid,System.Decimal,System.Double,IPro.Model.Programming.TradeSystems.Stops)">
            <summary>
            Sends pending order to the server for new BuyLimit position opening
            </summary>
            <param name="instrumentId">Instrument ID</param>
            <param name="lots">Lots</param>
            <param name="price">Desired execution price</param>
            <param name="stops">Stop loss, Take profit</param>
            <returns>Read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
            <example>
            Open pending position BuyLimit, lot size 0.01
            <code>
            Trade.BuyLimit(Instrument.Id, 0.01, Instrument.Ask-0.02);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.BuyLimit(System.Guid,System.Double,System.Double,IPro.Model.Programming.TradeSystems.Stops)">
            <summary>
            Sends pending order to the server for new BuyLimit position opening
            </summary>
            <param name="instrumentId">Instrument ID</param>
            <param name="lots">Lots</param>
            <param name="price">Desired execution price</param>
            <param name="stops">Stop loss, Take profit</param>
            <returns>Read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
            <example>
            Open pending position BuyLimit, lot size 0.01
            <code>
            Trade.BuyLimit(Instrument.Id, 0.01, Instrument.Ask-0.02);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.SellLimit(System.Guid,System.Decimal,System.Double,IPro.Model.Programming.TradeSystems.Stops)">
            <summary>
            Sends pending order to the server for new SellLimit position opening
            </summary>
            <param name="instrumentId">Instrument ID</param>
            <param name="lots">Lots</param>
            <param name="price">Desired execution price</param>
            <param name="stops">Stop loss, Take profit</param>
            <returns>Read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
            <example>
            Open pending position SellLimit, lot size 0.01
            <code>
            Trade.SellLimit(Instrument.Id, 0.01, Instrument.Ask+0.02);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.SellLimit(System.Guid,System.Double,System.Double,IPro.Model.Programming.TradeSystems.Stops)">
            <summary>
            Sends pending order to the server for new SellLimit position opening
            </summary>
            <param name="instrumentId">Instrument ID</param>
            <param name="lots">Lots</param>
            <param name="price">Desired execution price</param>
            <param name="stops">Stop loss, Take profit</param>
            <returns>Read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
            <example>
            Open pending position SellLimit, lot size 0.01
            <code>
            Trade.SellLimit(Instrument.Id, 0.01, Instrument.Ask+0.02);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.BuyStop(System.Guid,System.Decimal,System.Double,IPro.Model.Programming.TradeSystems.Stops)">
            <summary>
            Sends pending order to the server for new BuyStop position opening
            </summary>
            <param name="instrumentId">Instrument ID</param>
            <param name="lots">Lots</param>
            <param name="price">Desired execution price</param>
            <param name="stops">Stop loss, Take profit</param>
            <returns>Read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
            <example>
            Open pending position BuyStop, lot size 0.01
            <code>
            Trade.BuyStop(Instrument.Id, 0.01, Instrument.Ask+0.02);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.BuyStop(System.Guid,System.Double,System.Double,IPro.Model.Programming.TradeSystems.Stops)">
            <summary>
            Sends pending order to the server for new BuyStop position opening
            </summary>
            <param name="instrumentId">Instrument ID</param>
            <param name="lots">Lots</param>
            <param name="price">Desired execution price</param>
            <param name="stops">Stop loss, Take profit</param>
            <returns>Read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
            <example>
            Open pending position BuyStop, lot size 0.01
            <code>
            Trade.BuyStop(Instrument.Id, 0.01, Instrument.Ask+0.02);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.SellStop(System.Guid,System.Decimal,System.Double,IPro.Model.Programming.TradeSystems.Stops)">
            <summary>
            Sends pending order to the server for new SellStop position opening
            </summary>
            <param name="instrumentId">Instrument ID</param>
            <param name="lots">Lots</param>
            <param name="price">Desired execution price</param>
            <param name="stops">Stop loss, Take profit</param>
            <returns>Read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
            <example>
            Open pending position SellStop, lot size 0.01
            <code>
            Trade.SellStop(Instrument.Id, 0.01, Instrument.Ask-0.02);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.SellStop(System.Guid,System.Double,System.Double,IPro.Model.Programming.TradeSystems.Stops)">
            <summary>
            Sends pending order to the server for new SellStop position opening
            </summary>
            <param name="instrumentId">Instrument ID</param>
            <param name="lots">Lots</param>
            <param name="price">Desired execution price</param>
            <param name="stops">Stop loss, Take profit</param>
            <returns>Read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
            <example>
            Open pending position SellStop, lot size 0.01
            <code>
            Trade.SellStop(Instrument.Id, 0.01, Instrument.Ask-0.02);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.OpenMarketPosition(System.Guid,IPro.Model.Trade.ExecutionRule,System.Decimal,System.Double,System.Int32,IPro.Model.Programming.TradeSystems.Stops,System.String,System.Nullable{System.Int32})">
            <summary>
            Sends market order to the server for new position opening
            </summary>
            <param name="instrumentId">Instrument ID</param>
            <param name="type">Order type and direction</param>
            <param name="lots">Lots</param>
            <param name="price">Desired execution price</param>
            <param name="deviation">Possible execution deviation</param>
            <param name="stops">Stop loss, Take profit</param>
            <param name="comment">Order comment</param>
            <param name="magicNumber">Number to identify position among others</param>
            <returns>Read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
            <example>
            Open market position Buy with stoploss, takeprofit, lot size 0.1
            <code>
            var sl = Instrument.Ask - Instrument.Point * 50;
            var tp = Instrument.Ask + Instrument.Point * 40;
            Trade.OpenMarketPosition(Instrument.Id, ExecutionRule.Buy, 0.1M, Math.Round(Instrument.Ask, Instrument.PriceScale), -1, Stops.InPrice(Math.Round(sl, Instrument.PriceScale), Math.Round(tp, Instrument.PriceScale)));
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.OpenMarketPosition(System.Guid,IPro.Model.Trade.ExecutionRule,System.Double,System.Double,System.Int32,IPro.Model.Programming.TradeSystems.Stops,System.String,System.Nullable{System.Int32})">
            <summary>
            Sends market order to the server for new position opening
            </summary>
            <param name="instrumentId">Instrument ID</param>
            <param name="type">Order type and direction</param>
            <param name="lots">Lots</param>
            <param name="price">Desired execution price</param>
            <param name="deviation">Possible execution deviation</param>
            <param name="stops">Stop loss, Take profit</param>
            <param name="comment">Order comment</param>
            <param name="magicNumber">Number to identify position among others</param>
            <returns>Read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
            <example>
            Open market position Buy with stoploss, takeprofit, lot size 0.1
            <code>
            var sl = Instrument.Ask - Instrument.Point * 50;
            var tp = Instrument.Ask + Instrument.Point * 40;
            Trade.OpenMarketPosition(Instrument.Id, ExecutionRule.Buy, 0.1M, Math.Round(Instrument.Ask, Instrument.PriceScale), -1, Stops.InPrice(Math.Round(sl, Instrument.PriceScale), Math.Round(tp, Instrument.PriceScale)));
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.Buy(System.Guid,System.Decimal,IPro.Model.Programming.TradeSystems.Stops)">
            <summary>
            Sends market order to the server for new Buy position opening
            </summary>
            <param name="instrumentId">Instrument ID</param>
            <param name="lots">Lots</param>
            <param name="stops">Stop loss, Take profit</param>
            <returns>Read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
            <example>        
            Open market position Buy, lot size 0.2
            <code>
            var resault=Trade.Buy(Instrument.Id, 0.2);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.Buy(System.Guid,System.Double,IPro.Model.Programming.TradeSystems.Stops)">
            <summary>
            Sends market order to the server for new Buy position opening
            </summary>
            <param name="instrumentId">Instrument ID</param>
            <param name="lots">Lots</param>
            <param name="stops">Stop loss, Take profit</param>
            <returns>Read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
            <example>        
            Open market position Buy, lot size 0.2
            <code>
            var resault=Trade.Buy(Instrument.Id, 0.2);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.Sell(System.Guid,System.Decimal,IPro.Model.Programming.TradeSystems.Stops)">
            <summary>
            Sends market order to the server for new Sell position opening
            </summary>
            <param name="instrumentId">Instrument ID</param>
            <param name="lots">Lots</param>
            <param name="stops">Stop loss, Take profit</param>
            <returns>Read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
            <example>        
            Open market position Buy, lot size 0.2
            <code>
            var resault=Trade.Sell(Instrument.Id, 0.2);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.Sell(System.Guid,System.Double,IPro.Model.Programming.TradeSystems.Stops)">
            <summary>
            Sends market order to the server for new Sell position opening
            </summary>
            <param name="instrumentId">Instrument ID</param>
            <param name="lots">Lots</param>
            <param name="stops">Stop loss, Take profit</param>
            <returns>Read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
            <example>        
            Open market position Buy, lot size 0.2
            <code>
            var resault=Trade.Sell(Instrument.Id, 0.2);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.UpdatePendingPosition(System.Guid,System.Decimal,System.Double,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.Double},System.Nullable{System.Double},System.String)">
             <summary>
             Updates pending position
             </summary>
             <param name="positionId">Position ID</param>
             <param name="lots">Lots amount to close</param>
             <param name="price">Opening price</param>
             <param name="deviation">Possible execution deviation</param>
             <param name="expiresAt">ExpirationDate</param>
             <param name="stopLoss">New stoploss level</param>
             <param name="takeProfit">New takeprofit level</param>
             <param name="comment">Comment</param>
             <returns>Read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
             <example>        
             Open at first bar SellLimit position with lot 0.01, then modify it to lot 0.05
             <code>
            private bool firstBar = true;
            private Guid posGuid;
            
            protected override void NewBar()
            {
                if (firstBar)
                {
                    var result = Trade.OpenPendingPosition(Instrument.Id, ExecutionRule.SellLimit, 0.01, Instrument.Ask + 0.02, 0, null, null, "Pending order with lot=0.01", null);
                    if (result.IsSuccessful) posGuid = result.Position.Id;
                    firstBar = false;
                }
                else
                {
                    var res = Trade.UpdatePendingPosition(posGuid, 0.05, Instrument.Ask + 0.02, 0, null, null, null, "Changed lot to 0.05");
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.UpdatePendingPosition(System.Guid,System.Double,System.Double,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.Double},System.Nullable{System.Double},System.String)">
             <summary>
             Updates pending position
             </summary>
             <param name="positionId">Position ID</param>
             <param name="lots">Lots amount to close</param>
             <param name="price">Opening price</param>
             <param name="deviation">Possible execution deviation</param>
             <param name="expiresAt">ExpirationDate</param>
             <param name="stopLoss">New stoploss level</param>
             <param name="takeProfit">New takeprofit level</param>
             <param name="comment">Comment</param>
             <returns>Read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
             <example>        
             Open at first bar SellLimit position with lot 0.01, then modify it to lot 0.05
             <code>
            private bool firstBar = true;
            private Guid posGuid;
            
            protected override void NewBar()
            {
                if (firstBar)
                {
                    var result = Trade.OpenPendingPosition(Instrument.Id, ExecutionRule.SellLimit, 0.01, Instrument.Ask + 0.02, 0, null, null, "Pending order with lot=0.01", null);
                    if (result.IsSuccessful) posGuid = result.Position.Id;
                    firstBar = false;
                }
                else
                {
                    var res = Trade.UpdatePendingPosition(posGuid, 0.05, Instrument.Ask + 0.02, 0, null, null, null, "Changed lot to 0.05");
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.UpdatePendingPosition(System.Guid,System.Decimal,System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
             <summary>
             Updates pending position
             </summary>
             <param name="positionId">Position ID</param>
             <param name="lots">Lots amount to close</param>
             <param name="price">Opening price</param>
             <param name="stopLoss">New stoploss level</param>
             <param name="takeProfit">New takeprofit level</param>
             <returns>Read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
             <example>        
             Open at first bar SellLimit position with lot 0.01, then modify it to lot 0.05
             <code>
            private bool firstBar = true;
            private Guid posGuid;
            
            protected override void NewBar()
            {
                if (firstBar)
                {
                    var result = Trade.OpenPendingPosition(Instrument.Id, ExecutionRule.SellLimit, 0.01, Instrument.Ask + 0.02, 0, null, null, "Pending order with lot=0.01", null);
                    if (result.IsSuccessful) posGuid = result.Position.Id;
                    firstBar = false;
                }
                else
                {
                    var res = Trade.UpdatePendingPosition(posGuid, 0.05, Instrument.Ask + 0.02, null, null);
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.UpdatePendingPosition(System.Guid,System.Double,System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
             <summary>
             Updates pending position
             </summary>
             <param name="positionId">Position ID</param>
             <param name="lots">Lots amount to close</param>
             <param name="price">Opening price</param>
             <param name="stopLoss">New stoploss level</param>
             <param name="takeProfit">New takeprofit level</param>
             <returns>Read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
             <example>        
             Open at first bar SellLimit position with lot 0.01, then modify it to lot 0.05
             <code>
            private bool firstBar = true;
            private Guid posGuid;
            
            protected override void NewBar()
            {
                if (firstBar)
                {
                    var result = Trade.OpenPendingPosition(Instrument.Id, ExecutionRule.SellLimit, 0.01, Instrument.Ask + 0.02, 0, null, null, "Pending order with lot=0.01", null);
                    if (result.IsSuccessful) posGuid = result.Position.Id;
                    firstBar = false;
                }
                else
                {
                    var res = Trade.UpdatePendingPosition(posGuid, 0.05, Instrument.Ask + 0.02, null, null);
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.UpdateMarketPosition(System.Guid,System.Nullable{System.Double},System.Nullable{System.Double},System.String)">
             <summary>
             Updates position stoploss and takeprofit levels
             </summary>
             <param name="positionId">Position ID</param>
             <param name="comment">Operation comment</param>
             <param name="stopLoss">New stoploss level</param>
             <param name="takeProfit">New takeprofit level</param>
             <returns>Read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
             <example>        
             Open at first bar Buy position, then add stoploss and takeprofit
             <code>
            private bool firstBar = true;
            private Guid posGuid;
            
            protected override void NewBar()
            {
                if (firstBar)
                {
                    var result = Trade.Buy(Instrument.Id, 0.1);
                    if (result.IsSuccessful) posGuid = result.Position.Id;
                    firstBar = false;
                }
                else
                {
                    var tp = Instrument.Ask + Instrument.Point * 40;
                    var sl = Instrument.Ask - Instrument.Point * 50;
                    var res = Trade.UpdateMarketPosition(posGuid, sl, tp, "Added stoploss and takeprofit");
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.CloseMarketPosition(System.Guid,System.Decimal,System.Double,System.Int32,System.String)">
             <summary>
             Closes active position
             </summary>
             <param name="positionId">Position ID</param>
             <param name="lots">Lots amount to close</param>
             <param name="price">Closing price</param>
             <param name="deviation">Possible execution deviation</param>
             <param name="comment">Operation comment</param>
             <returns>Read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
             <example>        
             Open at first bar Buy position, then close it
             <code>
            private bool firstBar = true;
            private Guid posGuid;
            
            protected override void NewBar()
            {
                if (firstBar)
                {
                    var result = Trade.Buy(Instrument.Id, 0.1);
                    if (result.IsSuccessful) posGuid = result.Position.Id;
                    firstBar = false;
                }
                else
                {
                    if (posGuid==Guid.Empty) return;
                    var res = Trade.CloseMarketPosition(posGuid, 0.1, Instrument.Ask, -1, "One bar lifetime position");
                    if (res.IsSuccessful) posGuid = Guid.Empty;
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.CloseMarketPosition(System.Guid,System.Double,System.Double,System.Int32,System.String)">
             <summary>
             Closes active position
             </summary>
             <param name="positionId">Position ID</param>
             <param name="lots">Lots amount to close</param>
             <param name="price">Closing price</param>
             <param name="deviation">Possible execution deviation</param>
             <param name="comment">Operation comment</param>
             <returns>Read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
             <example>        
             Open at first bar Buy position, then close it
             <code>
            private bool firstBar = true;
            private Guid posGuid;
            
            protected override void NewBar()
            {
                if (firstBar)
                {
                    var result = Trade.Buy(Instrument.Id, 0.1);
                    if (result.IsSuccessful) posGuid = result.Position.Id;
                    firstBar = false;
                }
                else
                {
                    if (posGuid==Guid.Empty) return;
                    var res = Trade.CloseMarketPosition(posGuid, 0.1, Instrument.Ask, -1, "One bar lifetime position");
                    if (res.IsSuccessful) posGuid = Guid.Empty;
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.CloseMarketPosition(System.Guid)">
             <summary>
             Closes active position
             </summary>
             <param name="positionId">Position ID</param>
             <returns>Read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
             <example>        
             Open at first bar Buy position, then close it
             <code>
            private bool firstBar = true;
            private Guid posGuid;
            
            protected override void NewBar()
            {
                if (firstBar)
                {
                    var result = Trade.Buy(Instrument.Id, 0.1);
                    if (result.IsSuccessful) posGuid = result.Position.Id;
                    firstBar = false;
                }
                else
                {
                    if (posGuid==Guid.Empty) return;
                    var res = Trade.CloseMarketPosition(posGuid);
                    if (res.IsSuccessful) posGuid = Guid.Empty;
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.CancelPendingPosition(System.Guid)">
             <summary>
             Cancels pending position
             </summary>
             <param name="positionId">Position ID</param>
             <returns>Read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
             <exception cref="T:System.InvalidOperationException">Occurs when trying to close already closed position</exception>
             <example>        
             Open at first bar SellLimit position, then cancel it
             <code>
            private bool firstBar = true;
            private Guid posGuid;
            
            protected override void NewBar()
            {
                if (firstBar)
                {
                    var result = Trade.OpenPendingPosition(Instrument.Id, ExecutionRule.SellLimit, 0.01, Instrument.Ask + 0.02, 0, null, null, "Pending order with lot=0.01", null);
                    if (result.IsSuccessful) posGuid = result.Position.Id;
                    firstBar = false;
                }
                else
                {
                    if (posGuid==Guid.Empty) return;
                    var res = Trade.CancelPendingPosition(posGuid);
                    if (res.IsSuccessful) posGuid = Guid.Empty;  
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.GetPosition(System.Guid)">
             <summary>
             Returns position by its ID
             </summary>
             <param name="positionId">Position ID</param>
             <returns>Read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
             <example>        
             Get position according to ID
             <code>
            private Guid posGuid;
            
            protected override void NewBar()
            {
                var result = Trade.Buy(Instrument.Id, 0.1);
                if (result.IsSuccessful) posGuid = result.Position.Id;
            
                var pos = Trade.GetPosition(posGuid);
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.GetActivePositions(System.Nullable{System.Int32},System.Boolean)">
             <summary>
             Returns all active positions
             </summary>
             <param name="magicNumber">Number to identify position among others</param>
             <param name="isOpenedByMe">Get positions opened by TS</param>
             <returns>Array of read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
             <example>        
             Returns all active positions and active positions opened by the trade strategy
             <code>
            protected override void NewBar()
            {
                var posActiveAll = Trade.GetActivePositions();
                var posActiveMine = Trade.GetActivePositions(null, true);
            
                Print("Active positions: {0}, opened by this stratgey: {1}", posActiveAll.Length, posActiveMine.Length);
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.GetClosedPositions(System.DateTime,System.DateTime,System.Nullable{System.Int32})">
             <summary>
             Returns closed positions for the range specified 
             </summary>
             <param name="from">Range start date</param>
             <param name="to">Range end date</param>
             <param name="magicNumber">Number to identify position among others</param>
             <returns>Array of read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
             <example>        
             Returns all closed for last week
             <code>
            protected override void NewBar()
            {
                var fromDate=ServerTime.AddDays(-7);
                var toDate=ServerTime;
                var posForLastWeek = Trade.GetClosedPositions(fromDate,toDate); 
            
                Print("There are {0} closed positions from: {1}, to: {2}", posForLastWeek.Length,fromDate,toDate);
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.ITrade.GetClosedPositions(System.Nullable{System.Int32},System.Boolean)">
             <summary>
             Returns all closed positions
             </summary>
             <param name="magicNumber">Number to identify position among others</param>
             <param name="isOpenedByMe">Get positions opened by TS</param>
             <returns>Array of read-only interface <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/> with position information</returns>
             <example>        
             Returns all closed positions and closed positions opened by the trade strategy
             <code>
            protected override void NewBar()
            {
                var posClosedAll = Trade.GetActivePositions();
                var posClosedMine = Trade.GetActivePositions(null, true);
            
                Print("Closed positions: {0}, opened by this stratgey: {1}", posClosedAll.Length, posClosedMine.Length);
            }
             </code>
             </example>
        </member>
        <member name="E:IPro.Model.Client.Development.ProgramManagement.Trade.ITradeProvider.PositionChanged">
            <summary>
            <see cref="T:IPro.Model.Programming.TradeSystems.ITrade"/>
            </summary>
        </member>
        <member name="T:IPro.Model.Client.Development.Threading.SingleActionPool">
            <summary>
            Represents a pool that executes only one action at time. Other actions are ignored
            </summary>
        </member>
        <member name="M:IPro.Model.Client.Development.Threading.SingleActionPool.Queue(System.Action)">
            <summary>
            Executes action if pool is free
            </summary>
            <param name="action">Action to execute</param>
            <returns>true if the pool is not busy and can execute, false otherwise</returns>
        </member>
        <member name="T:IPro.Model.Client.MarketData.CreatorBar.BuildingBar">
            <summary>
            Currently building bar
            </summary>
        </member>
        <member name="T:IPro.Model.Client.MarketData.Bar">
            <summary>
            Bar
            </summary>
        </member>
        <member name="M:IPro.Model.Client.MarketData.Bar.#ctor(System.DateTime,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            .ctor
            </summary>
        </member>
        <member name="M:IPro.Model.Client.MarketData.Bar.CompareTo(IPro.Model.Client.MarketData.Bar)">
            <summary>
            Compare bars by date
            </summary>
            <param name="other">Bar to compare</param>
            <returns>
            Returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified
            </returns>
        </member>
        <member name="M:IPro.Model.Client.MarketData.Bar.IsEqualsData(IPro.Model.Client.MarketData.Bar)">
            <summary>
            Compare bars by data
            </summary>
            <param name="other">Bar to compare</param>
            <returns>Is data equals</returns>
        </member>
        <member name="M:IPro.Model.Client.MarketData.Bar.GetEmptyBar">
            <summary>
            Get empty bar
            </summary>
            <returns>Empty bar</returns>
        </member>
        <member name="M:IPro.Model.Client.MarketData.Bar.ToString">
            <summary>
            Get the string value of bar
            </summary>
            <returns>Formated string</returns>
        </member>
        <member name="P:IPro.Model.Client.MarketData.Bar.Time">
            <summary>
            Start time
            </summary>
        </member>
        <member name="P:IPro.Model.Client.MarketData.Bar.Open">
            <summary>
            Open bar price
            </summary>
        </member>
        <member name="P:IPro.Model.Client.MarketData.Bar.Low">
            <summary>
            Minimum bar price
            </summary>
        </member>
        <member name="P:IPro.Model.Client.MarketData.Bar.High">
            <summary>
            Maximum bar price
            </summary>
        </member>
        <member name="P:IPro.Model.Client.MarketData.Bar.Close">
            <summary>
            Close bar price
            </summary>
        </member>
        <member name="P:IPro.Model.Client.MarketData.Bar.TickCount">
            <summary>
            Ticks occured in the bar
            </summary>
        </member>
        <member name="P:IPro.Model.Client.MarketData.Bar.IsEmpty">
            <summary>
            Check if bar is empty
            </summary>
        </member>
        <member name="M:IPro.Model.Client.MarketData.CreatorBar.BuildingBar.UpdateFrom(IPro.Model.MarketData.Quote)">
            <summary>
            Update bar state from incoming quote
            </summary>
            <param name="quote">New quote</param>
            <returns>Is updated</returns>
        </member>
        <member name="M:IPro.Model.Client.MarketData.CreatorBar.BuildingBar.UpdateFrom(IPro.Model.Client.MarketData.Bar)">
            <summary>
            Update bar state from other bar
            </summary>
            <param name="bar">New bar</param>
            <returns>Is updated</returns>
        </member>
        <member name="T:IPro.Model.Programming.Chart.AndrewsPitchfork">
             <summary>
             Represets Andrews Pitchfork tool
             </summary>
             <example>        
             Creates Andrews Pitchfork tool
             <code>
            private int countBar=0;
            
            protected override void NewBar()
            {
                countBar++;
                if (countBar==5)
                {
                var toolAndPitchfork = Tools.Create&lt;AndrewsPitchfork&gt;();
                toolAndPitchfork.Color=Color.Red;
            		
                    var trendMin=Bars[Bars.Range.To-1].Low;
                    var trendMax=Bars[Bars.Range.To-1].High;
                    var trendBase=Bars[Bars.Range.To-1].Close;
                    var timeStart=Bars[Bars.Range.To-1].Time;
            			
                    toolAndPitchfork.Point1=new ChartPoint(timeStart.AddMinutes(-1), trendMin);
                    toolAndPitchfork.Point2=new ChartPoint(timeStart.AddMinutes(-2), trendMax);
                    toolAndPitchfork.Point3=new ChartPoint(timeStart.AddMinutes(-3), trendBase);
                }
            }	
             </code>
             </example>
        </member>
        <member name="T:IPro.Model.Programming.Chart.Tool">
             <summary>
             Represets base chart tool class
             </summary>
             <example>        
             Creates vertical line tool on the chart, on first bar
             <code>
            private bool firstBar=true;
            
            protected override void NewBar()
            {
                if (firstBar)
                   {
                var vline = Tools.Create&lt;VerticalLine&gt;();
                vline.Color=Color.Red;
                vline.Time=Bars[Bars.Range.To-1].Time;
                firstBar=false;
                }
            }	
             
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Chart.Tool.#ctor(IPro.Model.Client.Chart.IChartTool)">
            <summary>
            Chart tool
            </summary>
            <param name="chartTool">Chart tool<see cref="T:IPro.Model.Client.Chart.IChartTool"/></param>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Tool.Id">
            <summary>
            Tool Id 
            </summary>
            <returns>
            Tool Id
            </returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Tool.Order">
            <summary>
            Object order
            </summary>
            <returns>
            Object order on chart
            </returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Tool.Type">
            <summary>
            Type of object
            </summary>
            <returns>Type of a tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Tool.SectionId">
            <summary>
            Section ID
            </summary>
            <returns>
            ID of the chart section
            </returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Tool.Label">
            <summary>
            Object label
            </summary>
            <returns>Label of the tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Tool.IsLocked">
            <summary>
            Lock state
            </summary>
            <returns>Lock state of the tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Tool.Model">
            <summary>
            Underlying tool
            </summary>
            <returns>Chart tool<see cref="T:IPro.Model.Client.Chart.IChartTool"/></returns>
            <exclude/>
        </member>
        <member name="M:IPro.Model.Programming.Chart.AndrewsPitchfork.#ctor(IPro.Model.Client.Chart.IChartTool)">
            <summary>
            Andrews Pitchfork tool
            </summary>
            <param name="chartTool">Chart tool</param>
        </member>
        <member name="P:IPro.Model.Programming.Chart.AndrewsPitchfork.Point1">
            <summary>
            Andrews Pitchfork tool point 1
            </summary>
            <returns>Chart point 1 for Andrews Pitchfork tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.AndrewsPitchfork.Point2">
            <summary>
            Andrews Pitchfork tool point 2
            </summary>
            <returns>Chart point 2 for Andrews Pitchfork tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.AndrewsPitchfork.Point3">
            <summary>
            Andrews Pitchfork tool point 3
            </summary>
            <returns>Chart point 3 for Andrews Pitchfork tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.AndrewsPitchfork.Color">
            <summary>
            Andrews Pitchfork color
            </summary>
            <returns>Color for Andrews Pitchfork tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.AndrewsPitchfork.Style">
            <summary>
            Andrews Pitchfork style
            </summary>
            <returns>Style for Andrews Pitchfork tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.AndrewsPitchfork.Width">
            <summary>
            Andrews Pitchfork width
            </summary>
            <returns>Width for Andrews Pitchfork tool</returns>
        </member>
        <member name="T:IPro.Model.Programming.Chart.ArrowDown">
             <summary>
             Represets Arrow Down tool
             </summary>
             <example>        
             Creates Arrow Down tool
             <code>
            private int countBar=0;
            
            protected override void NewBar()
            {
                countBar++;
                if (countBar==1)
                {
                var toolArrowDown = Tools.Create&lt;ArrowDown&gt;();
                toolArrowDown.Point=new ChartPoint(Bars[Bars.Range.To-1].Time, Bars[Bars.Range.To-1].Low);
                }
            }	
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Chart.ArrowDown.#ctor(IPro.Model.Client.Chart.IChartTool)">
            <summary>
            Represets Arrow Down
            </summary>
            <param name="chartTool">Chart tool</param>
        </member>
        <member name="P:IPro.Model.Programming.Chart.ArrowDown.Color">
             <summary>
            Arrow Down color
             </summary>
             <returns>Color for Arrow Down tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.ArrowDown.Width">
             <summary>
            Arrow Down Width
             </summary>
             <returns>Width for Arrow Down tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.ArrowDown.Point">
             <summary>
            Arrow Down point
             </summary>
             <returns>Chart point for Arrow Down tool</returns>
        </member>
        <member name="T:IPro.Model.Programming.Chart.ArrowUp">
             <summary>
             Represets Arrow Up tool
             </summary>
             <example>        
             Creates Arrow Up tool
             <code>
            private int countBar=0;
            
            protected override void NewBar()
            {
                countBar++;
                if (countBar==1)
                {
                var toolArrowUp = Tools.Create&lt;ArrowUp&gt;();
                toolArrowUp.Point=new ChartPoint(Bars[Bars.Range.To-1].Time, Bars[Bars.Range.To-1].High);
                }
            }	
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Chart.ArrowUp.#ctor(IPro.Model.Client.Chart.IChartTool)">
            <summary>
            Represets Arrow Up
            </summary>
            <param name="chartTool">Chart tool</param>
        </member>
        <member name="P:IPro.Model.Programming.Chart.ArrowUp.Color">
             <summary>
            Arrow Up color
             </summary>
             <returns>Color for Arrow up tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.ArrowUp.Width">
             <summary>
            Arrow Up Width
             </summary>
             <returns>Width for Arrow Up tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.ArrowUp.Point">
             <summary>
            Arrow Up point
             </summary>
             <returns>Chart point for Arrow Up tool</returns>
        </member>
        <member name="T:IPro.Model.Programming.Chart.Bear">
             <summary>
             Represets Bear tool
             </summary>
             <example>        
             Creates Bear tool
             <code>
            private int countBar=0;
            
            protected override void NewBar()
            {
                countBar++;
                if (countBar==1)
                {
                var toolBear = Tools.Create&lt;Bear&gt;();
                toolBear.Point=new ChartPoint(Bars[Bars.Range.To-1].Time, Bars[Bars.Range.To-1].Low);
                }
            }	
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Chart.Bear.#ctor(IPro.Model.Client.Chart.IChartTool)">
            <summary>
            Represets Bear
            </summary>
            <param name="chartTool">Chart tool</param>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Bear.Color">
            <summary>
            Bear color
            </summary>
            <returns>Color for Bear tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Bear.Width">
             <summary>
            Bear Width
             </summary>
             <returns>Width for Bear tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Bear.Point">
             <summary>
            Bear chart point
             </summary>
             <returns>Chart point for Bear tool</returns>
        </member>
        <member name="T:IPro.Model.Programming.Chart.Bull">
             <summary>
             Represets Bull tool
             </summary>
             <example>        
             Creates Bull tool
             <code>
            private int countBar=0;
            
            protected override void NewBar()
            {
                countBar++;
                if (countBar==1)
                {
                var toolBull = Tools.Create&lt;Bull&gt;();
                toolBull.Point=new ChartPoint(Bars[Bars.Range.To-1].Time, Bars[Bars.Range.To-1].High);
                }
            }	
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Chart.Bull.#ctor(IPro.Model.Client.Chart.IChartTool)">
            <summary>
            Represets Bull
            </summary>
            <param name="chartTool">Chart tool</param>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Bull.Color">
            <summary>
            Bull color
            </summary>
            <returns>Color for Bull tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Bull.Width">
             <summary>
            Bull Width
             </summary>
             <returns>Width for Bull tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Bull.Point">
             <summary>
            Bull chart point
             </summary>
             <returns>Chart point for Bull tool</returns>
        </member>
        <member name="T:IPro.Model.Programming.Chart.ChartPoint">
            <summary>
            Represets Chart point
            </summary>
            <example>        
            Creates new chart point at last bar low price
            <code>
            var chPoint=new ChartPoint(Bars[Bars.Range.To-1].Time, Bars[Bars.Range.To-1].Low);
            </code>
            </example>
        </member>
        <member name="F:IPro.Model.Programming.Chart.ChartPoint.Empty">
            <summary>
            Empty chart point
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Chart.ChartPoint.#ctor(System.DateTime,System.Double)">
            <summary>
            Chart point
            </summary>
            <param name="time">Time in DateTime format on the chart</param>
            <param name="price">Price on the chart in </param>
        </member>
        <member name="P:IPro.Model.Programming.Chart.ChartPoint.Time">
            <summary>
            Time
            </summary>
            <returns>Time in DateTime format</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.ChartPoint.Price">
            <summary>
            Price
            </summary>
            <returns>Double value of price</returns>
        </member>
        <member name="T:IPro.Model.Programming.Chart.Check">
             <summary>
             Represets Check tool
             </summary>
             <example>        
             Creates Check tool
             <code>
            private int countBar=0;
            
            protected override void NewBar()
            {
                countBar++;
                if (countBar==1)
                {
                var toolCheck = Tools.Create&lt;Check&gt;();
                toolCheck.Point=new ChartPoint(Bars[Bars.Range.To-1].Time, Bars[Bars.Range.To-1].Open);
                }
            }	
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Chart.Check.#ctor(IPro.Model.Client.Chart.IChartTool)">
            <summary>
            Represets Check tool
            </summary>
            <param name="chartTool">Chart tool</param>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Check.Color">
            <summary>
            Check color
            </summary>
            <returns>Color for Check tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Check.Width">
             <summary>
            Check Width
             </summary>
             <returns>Width for Check tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Check.Point">
             <summary>
            Check chart point
             </summary>
             <returns>Chart point for Check tool</returns>
        </member>
        <member name="T:IPro.Model.Programming.Chart.Ellipse">
             <summary>
             Represets Ellipse tool
             </summary>
             <example>        
             Creates Ellipse tool
             <code>
            private int countBar=0;
            
            protected override void NewBar()
            {
                countBar++;
                if (countBar==1)
                {
                var toolEllipse = Tools.Create&lt;Ellipse&gt;();
                toolEllipse.Point1=new ChartPoint(Bars[Bars.Range.To-1].Time, Bars[Bars.Range.To-1].Low);
                toolEllipse.Point2=new ChartPoint(Bars[Bars.Range.To-1].Time.AddMinutes(1), Bars[Bars.Range.To-1].High); 
                }
            }	
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Chart.Ellipse.#ctor(IPro.Model.Client.Chart.IChartTool)">
            <summary>
            Represets Ellipse tool
            </summary>
            <param name="chartTool">Chart tool</param>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Ellipse.Point1">
             <summary>
            Ellipse chart point 1
             </summary>
             <returns>Chart point 1 for Ellipse tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Ellipse.Point2">
             <summary>
            Ellipse chart point 2
             </summary>
             <returns>Chart point 2 for Ellipse tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Ellipse.Color">
            <summary>
            Ellipse color
            </summary>
            <returns>Ellipse color for Ellipse tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Ellipse.BorderColor">
            <summary>
            Ellipse border color
            </summary>
            <returns>Ellipse border color for Ellipse tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Ellipse.BorderStyle">
            <summary>
            Ellipse border style
            </summary>
            <returns>Ellipse border style for Ellipse tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Ellipse.BorderWidth">
            <summary>
            Ellipse border width
            </summary>
            <returns>Ellipse border width for Ellipse tool</returns>
        </member>
        <member name="T:IPro.Model.Programming.Chart.Fibo">
             <summary>
             Represets Fibonacci tool
             </summary>
             <example>        
             Creates Fibonacci tool
             <code>
            private int countBar=0;
            
            protected override void NewBar()
            {
                countBar++;
                if (countBar==1)
                {
                var toolFibonacci = Tools.Create&lt;Fibo&gt;();
                toolFibonacci.Point1= new ChartPoint(Bars[Bars.Range.To-1].Time, Bars[Bars.Range.To-1].Low);
                toolFibonacci.Point2= new ChartPoint(Bars[Bars.Range.To-1].Time.AddMinutes(1), Bars[Bars.Range.To-1].High);
                }
            }	
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Chart.Fibo.#ctor(IPro.Model.Client.Chart.IChartTool)">
            <summary>
            Represets Fibonacci tool
            </summary>
            <param name="chartTool">Chart tool</param>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Fibo.Point1">
             <summary>
            Fibonacci chart point 1
             </summary>
             <returns>Chart point 1 for Fibonacci tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Fibo.Point2">
             <summary>
            Fibonacci chart point 2
             </summary>
             <returns>Chart point 2 for Fibonacci tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Fibo.FiboColor">
            <summary>
            Fibonacci color
            </summary>
            <returns>Color for Fibonacci tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Fibo.FiboStyle">
            <summary>
            Fibonacci style
            </summary>
            <returns>Style for Fibonacci tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Fibo.FiboWidth">
            <summary>
            Fibonacci width
            </summary>
            <returns>Width for Fibonacci tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Fibo.LineColor">
            <summary>
            Fibonacci line color
            </summary>
            <returns>Line color for Fibonacci tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Fibo.LineStyle">
            <summary>
            Fibonacci line style
            </summary>
            <returns>Line style for Fibonacci tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Fibo.LineWidth">
            <summary>
            Fibonacci line width
            </summary>
            <returns>Line width for Fibonacci tool</returns>
        </member>
        <member name="T:IPro.Model.Programming.Chart.FiboExtension">
             <summary>
             Represets Fibonacci extension tool
             </summary>
             <example>        
             Creates Fibonacci extension tool
             <code>
            private int countBar=0;
            
            protected override void NewBar()
            {
                countBar++;
                if (countBar==1)
                {
                var toolFiboEx = Tools.Create&lt;FiboExtension&gt;();
                toolFiboExt.Point1= new ChartPoint(Bars[Bars.Range.To-1].Time, Bars[Bars.Range.To-1].Low);
                toolFiboExt.Point2= new ChartPoint(Bars[Bars.Range.To-1].Time.AddMinutes(1), Bars[Bars.Range.To-1].High);
                toolFiboExt.Point3= new ChartPoint(Bars[Bars.Range.To-1].Time.AddMinutes(1), Bars[Bars.Range.To-1].High-Instrument.Point); 
                }
            }	
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Chart.FiboExtension.#ctor(IPro.Model.Client.Chart.IChartTool)">
            <summary>
            Represets Fibonacci extension tool
            </summary>
            <param name="chartTool">Chart tool</param>
        </member>
        <member name="P:IPro.Model.Programming.Chart.FiboExtension.Point1">
             <summary>
            Fibonacci extension chart point 1
             </summary>
             <returns>Chart point 1 for Fibonacci extension tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.FiboExtension.Point2">
             <summary>
            Fibonacci extension chart point 2
             </summary>
             <returns>Chart point 2 for Fibonacci extension tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.FiboExtension.Point3">
             <summary>
            Fibonacci extension chart point 3
             </summary>
             <returns>Chart point 3 for Fibonacci extension tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.FiboExtension.FiboColor">
            <summary>
            Fibonacci extension color
            </summary>
            <returns>Color for Fibonacci extension tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.FiboExtension.FiboStyle">
            <summary>
            Fibonacci extension style
            </summary>
            <returns>Style for Fibonacci extension tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.FiboExtension.FiboWidth">
            <summary>
            Fibonacci extension width
            </summary>
            <returns>Width for Fibonacci extension tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.FiboExtension.LineColor">
            <summary>
            Fibonacci extension line color
            </summary>
            <returns>Line color for Fibonacci extension tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.FiboExtension.LineStyle">
            <summary>
            Fibonacci extension line style
            </summary>
            <returns>Line style for Fibonacci extension tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.FiboExtension.LineWidth">
            <summary>
            Fibonacci extension line width
            </summary>
            <returns>Line width for Fibonacci extension tool</returns>
        </member>
        <member name="T:IPro.Model.Programming.Chart.FiboFan">
             <summary>
             Represets Fibonacci fan tool
             </summary>
             <example>        
             Creates Fibonacci fan tool
             <code>
            private int countBar=0;
            
            protected override void NewBar()
            {
                countBar++;
                if (countBar==1)
                {
                var toolFiboFan = Tools.Create&lt;FiboFan&gt;();
                toolFiboFan.Point1= new ChartPoint(Bars[Bars.Range.To-1].Time, Bars[Bars.Range.To-1].Low);
                toolFiboFan.Point2= new ChartPoint(Bars[Bars.Range.To-1].Time.AddMinutes(1), Bars[Bars.Range.To-1].High);
                }
            }	
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Chart.FiboFan.#ctor(IPro.Model.Client.Chart.IChartTool)">
            <summary>
            Represets Fibonacci fan tool
            </summary>
            <param name="chartTool">Chart tool</param>
        </member>
        <member name="P:IPro.Model.Programming.Chart.FiboFan.Point1">
             <summary>
            Fibonacci fan chart point 1
             </summary>
             <returns>Chart point 1 for Fibonacci fan tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.FiboFan.Point2">
             <summary>
            Fibonacci fan chart point 2
             </summary>
             <returns>Chart point 2 for Fibonacci fan tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.FiboFan.FiboColor">
            <summary>
            Fibonacci fan color
            </summary>
            <returns>Color for Fibonacci fan tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.FiboFan.FiboStyle">
            <summary>
            Fibonacci fan style
            </summary>
            <returns>Style for Fibonacci fan tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.FiboFan.FiboWidth">
            <summary>
            Fibonacci fan width
            </summary>
            <returns>Width for Fibonacci fan tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.FiboFan.LineColor">
            <summary>
            Fibonacci fan line color
            </summary>
            <returns>Line color for Fibonacci fan tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.FiboFan.LineStyle">
            <summary>
            Fibonacci fan line style
            </summary>
            <returns>Line style for Fibonacci fan tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.FiboFan.LineWidth">
            <summary>
            Fibonacci fan line width
            </summary>
            <returns>Line width for Fibonacci fan tool</returns>
        </member>
        <member name="T:IPro.Model.Programming.Chart.FiboTimezone">
             <summary>
             Represets Fibonacci time zones tool
             </summary>
             <example>        
             Creates Fibonacci time zones tool
             <code>
            private int countBar=0;
            
            protected override void NewBar()
            {
                countBar++;
                if (countBar==1)
                {
                var toolFiboTimezone = Tools.Create&lt;FiboTimezone&gt;();
                toolFiboTimezone.Point1= new ChartPoint(Bars[Bars.Range.To-1].Time, Bars[Bars.Range.To-1].Low);
                toolFiboTimezone.Point2= new ChartPoint(Bars[Bars.Range.To-1].Time.AddMinutes(1), Bars[Bars.Range.To-1].High);
                }
            }	
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Chart.FiboTimezone.#ctor(IPro.Model.Client.Chart.IChartTool)">
            <summary>
            Represets Fibonacci time zones tool
            </summary>
            <param name="chartTool">Chart tool</param>
        </member>
        <member name="P:IPro.Model.Programming.Chart.FiboTimezone.Point1">
             <summary>
            Fibonacci time zones chart point 1
             </summary>
             <returns>Chart point 1 for Fibonacci time zones tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.FiboTimezone.Point2">
             <summary>
            Fibonacci time zones chart point 2
             </summary>
             <returns>Chart point 2 for Fibonacci time zones tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.FiboTimezone.FiboColor">
            <summary>
            Fibonacci time zones color
            </summary>
            <returns>Color for Fibonacci time zones tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.FiboTimezone.FiboStyle">
            <summary>
            Fibonacci time zones style
            </summary>
            <returns>Style for Fibonacci time zones tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.FiboTimezone.FiboWidth">
            <summary>
            Fibonacci time zones width
            </summary>
            <returns>Width for Fibonacci time zones tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.FiboTimezone.LineColor">
            <summary>
            Fibonacci time zones line color
            </summary>
            <returns>Line color for Fibonacci time zones tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.FiboTimezone.LineStyle">
            <summary>
            Fibonacci time zones line style
            </summary>
            <returns>Line style for Fibonacci time zones tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.FiboTimezone.LineWidth">
            <summary>
            Fibonacci time zones line width
            </summary>
            <returns>Line width for Fibonacci time zones tool</returns>
        </member>
        <member name="T:IPro.Model.Programming.Chart.HandDown">
             <summary>
             Represets Hand Down tool
             </summary>
             <example>        
             Creates Hand Down tool
             <code>
            private int countBar=0;
            
            protected override void NewBar()
            {
                countBar++;
                if (countBar==1)
                {
                var toolHandDown = Tools.Create&lt;HandDown&gt;();
                toolHandDown.Point=new ChartPoint(Bars[Bars.Range.To-1].Time, Bars[Bars.Range.To-1].Low);
                }
            }	
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Chart.HandDown.#ctor(IPro.Model.Client.Chart.IChartTool)">
            <summary>
            Represets Hand Down
            </summary>
            <param name="chartTool">Chart tool</param>
        </member>
        <member name="P:IPro.Model.Programming.Chart.HandDown.Color">
             <summary>
            Hand Down color
             </summary>
             <returns>Color for Hand Down tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.HandDown.Width">
             <summary>
            Hand Down Width
             </summary>
             <returns>Width for Hand Down tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.HandDown.Point">
             <summary>
            Hand Down point
             </summary>
             <returns>Chart point for Hand Down tool</returns>
        </member>
        <member name="T:IPro.Model.Programming.Chart.HandUp">
             <summary>
             Represets Hand Up tool
             </summary>
             <example>        
             Creates Hand Up tool
             <code>
            private int countBar=0;
            
            protected override void NewBar()
            {
                countBar++;
                if (countBar==1)
                {
                var toolHandUp = Tools.Create&lt;HandUp&gt;();
                toolHandUp.Point=new ChartPoint(Bars[Bars.Range.To-1].Time, Bars[Bars.Range.To-1].High);
                }
            }	
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Chart.HandUp.#ctor(IPro.Model.Client.Chart.IChartTool)">
            <summary>
            Represets Hand Up
            </summary>
            <param name="chartTool">Chart tool</param>
        </member>
        <member name="P:IPro.Model.Programming.Chart.HandUp.Color">
             <summary>
            Hand Up color
             </summary>
             <returns>Color for Hand up tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.HandUp.Width">
             <summary>
            Hand Up Width
             </summary>
             <returns>Width for Hand Up tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.HandUp.Point">
             <summary>
            Hand Up point
             </summary>
             <returns>Chart point for Hand Up tool</returns>
        </member>
        <member name="T:IPro.Model.Programming.Chart.HorizontalLine">
             <summary>
             Represets Horizontal line tool
             </summary>
             <example>        
             Creates Horizontal line tool
             <code>
            protected override void NewBar()
            {
                var toolHorizLine = Tools.Create&lt;HorizontalLine&gt;();
                toolHorizLine.Price = Bars[Bars.Range.To-1].Low;
                toolHorizLine.Text="Last bar Low price = "+Bars[Bars.Range.To-1].Low;
                }
            }	
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Chart.HorizontalLine.#ctor(IPro.Model.Client.Chart.IChartTool)">
            <summary>
            Represets Horizontal line
            </summary>
            <param name="chartTool">Chart tool</param>
        </member>
        <member name="P:IPro.Model.Programming.Chart.HorizontalLine.Price">
            <summary>
            Price on a chart
            </summary>
            <returns>Price for the Horizontal line tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.HorizontalLine.Text">
            <summary>
            Text on a chart
            </summary>
            <returns>Text for the Horizontal line tool</returns>
        </member>
        <member name="T:IPro.Model.Programming.Chart.IToolDescription">
            <summary>
            Interface for tools description
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Chart.IToolDescription.TypeName">
            <summary>
            Model type name
            </summary>
            <returns>Name of the tool type</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.IToolDescription.Points">
            <summary>
            Points count for initialization
            </summary>
            <returns>Number of points for initialization</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.IToolDescription.ModelType">
            <summary>
            Corresponding api type
            </summary>
            <returns>Type of a tool model</returns>
        </member>
        <member name="T:IPro.Model.Programming.Chart.ITools">
            <summary>
            Interface for tool functions
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Chart.ITools.Create``1">
            <summary>
            Create tool in chart area
            </summary>
            <typeparam name="T">Tool</typeparam>
            <returns>Chart tool</returns>
        </member>
        <member name="M:IPro.Model.Programming.Chart.ITools.Create``1(System.Guid)">
            <summary>
            Create tool in specific section
            </summary>
            <typeparam name="T">Tool</typeparam>
            <param name="sectionId">Chart section Id</param>
            <returns>Chart tool</returns>
        </member>
        <member name="M:IPro.Model.Programming.Chart.ITools.Remove(IPro.Model.Programming.Chart.Tool)">
            <summary>
            Create tool in specific section
            </summary>
            <param name="tool">Chart tool</param>
        </member>
        <member name="M:IPro.Model.Programming.Chart.ITools.GetOfType``1">
            <summary>
            Get tools of specific type
            </summary>
            <typeparam name="T">Tool</typeparam>
            <returns>List of tools</returns>
        </member>
        <member name="M:IPro.Model.Programming.Chart.ITools.GetOfType(IPro.Model.Programming.Chart.ToolType)">
            <summary>
            Get tools of specific type
            </summary>
            <param name="type">Type of a tool</param>
            <returns>List of tools</returns>
        </member>
        <member name="M:IPro.Model.Programming.Chart.ITools.GetAll">
            <summary>
            Get all tools
            </summary>
            <returns>List of tools</returns>
        </member>
        <member name="M:IPro.Model.Programming.Chart.ITools.GetByLabel(System.String)">
            <summary>
            Searches instruments by a provided labal pattern
            </summary>
            <param name="regex">Pattern name</param>
            <returns>List of tools</returns>
        </member>
        <member name="M:IPro.Model.Programming.Chart.ITools.GetById(System.Guid)">
            <summary>
            Get tool by id
            </summary>
            <param name="id">Id</param>
            <returns>Chart tool</returns>
        </member>
        <member name="T:IPro.Model.Programming.Chart.LabelLeft">
             <summary>
             Represets Label left tool
             </summary>
             <example>        
             Creates Label left tool
             <code>
            protected override void NewBar()
            {
                var toolLabelLeft = Tools.Create&lt;LabelLeft&gt;();
                toolLabelLeft.Point = new ChartPoint(Bars[Bars.Range.To-1].Time, Bars[Bars.Range.To-1].High);
                toolLabelLeft.Label=Bars[Bars.Range.To-1].Low.ToString();
                toolLabelLeft.Color=Color.Aqua;	
                }
            }	
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Chart.LabelLeft.#ctor(IPro.Model.Client.Chart.IChartTool)">
            <summary>
            Represets Label left
            </summary>
            <param name="chartTool">Chart tool</param>
        </member>
        <member name="P:IPro.Model.Programming.Chart.LabelLeft.Color">
             <summary>
            Label left color
             </summary>
             <returns>Color for Label left tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.LabelLeft.Width">
             <summary>
            Label left Width
             </summary>
             <returns>Width for Label left tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.LabelLeft.Point">
             <summary>
            Label left point
             </summary>
             <returns>Chart point for Label left tool</returns>
        </member>
        <member name="T:IPro.Model.Programming.Chart.LabelRight">
             <summary>
             Represets Label right tool
             </summary>
             <example>        
             Creates Label right tool
             <code>
            protected override void NewBar()
            {
                var toolLabelRight = Tools.Create&lt;LabelRight&gt;();
                toolLabelRight.Point = new ChartPoint(Bars[Bars.Range.To-1].Time, Bars[Bars.Range.To-1].High);
                toolLabelRight.Label=Bars[Bars.Range.To-1].Low.ToString();
                toolLabelRight.Color=Color.Aqua;	
                }
            }	
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Chart.LabelRight.#ctor(IPro.Model.Client.Chart.IChartTool)">
            <summary>
            Represets Label right
            </summary>
            <param name="chartTool">Chart tool</param>
        </member>
        <member name="P:IPro.Model.Programming.Chart.LabelRight.Color">
             <summary>
            Label right color
             </summary>
             <returns>Color for Label right tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.LabelRight.Width">
             <summary>
            Label right Width
             </summary>
             <returns>Width for Label right tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.LabelRight.Point">
             <summary>
            Label right point
             </summary>
             <returns>Chart point for Label right tool</returns>
        </member>
        <member name="T:IPro.Model.Programming.Chart.PolyLine">
            <summary>
            Represets Polyline tool
            </summary>
            <example>        
            Creates Polyline tool
            <code>
            private bool firstBar=true;
            
            protected override void NewBar()
            {
                if (firstBar)
                {
                    var toolPolyLine = Tools.Create&lt;PolyLine&gt;();
                    toolPolyLine.AddPoint(new ChartPoint(Bars[Bars.Range.To-1].Time, Bars[Bars.Range.To-1].High));
                    toolPolyLine.AddPoint(new ChartPoint(Bars[Bars.Range.To-1].Time.AddMinutes(1), Bars[Bars.Range.To-1].High));
                    toolPolyLine.AddPoint(new ChartPoint(Bars[Bars.Range.To-1].Time.AddMinutes(1), Bars[Bars.Range.To-1].High+Instrument.Point*30));	
                    firstBar=false;
                 }		
            }	
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.Chart.PolyLine.#ctor(IPro.Model.Client.Chart.IChartTool)">
            <summary>
            Represets Polyline
            </summary>
            <param name="chartTool">Chart tool</param>
        </member>
        <member name="M:IPro.Model.Programming.Chart.PolyLine.AddPoint(IPro.Model.Programming.Chart.ChartPoint)">
            <summary>
            Method to add chart point to Polyline tool
            </summary>
            <param name="point">Chart point</param>
        </member>
        <member name="P:IPro.Model.Programming.Chart.PolyLine.Points">
             <summary>
            Read only list of chart points
             </summary>
             <returns>Chart points list for Polyline tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.PolyLine.Color">
             <summary>
            Polyline color
             </summary>
             <returns>Color for Polyline tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.PolyLine.Style">
            <summary>
            Polyline style
            </summary>
            <returns>Style for Polyline tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.PolyLine.Width">
             <summary>
            Polyline Width
             </summary>
             <returns>Width for Polyline tool</returns>
        </member>
        <member name="T:IPro.Model.Programming.Chart.Rectangle">
            <summary>
            Represets Rectangle tool
            </summary>
            <example>        
            Creates Rectangle tool
            <code>
            private bool firstBar=true;
            
            protected override void NewBar()
            {
                if (firstBar)
                {
                    var toolRectangle = Tools.Create&lt;Rectangle&gt;();
                    toolRectangle.Point1=new ChartPoint(Bars[Bars.Range.To-1].Time, Bars[Bars.Range.To-1].High);
                    toolRectangle.Point2=new ChartPoint(Bars[Bars.Range.To-1].Time.AddMinutes(5), Bars[Bars.Range.To-1].High+Instrument.Point*30);
                    firstBar=false;
                 }		
            }	
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.Chart.Rectangle.#ctor(IPro.Model.Client.Chart.IChartTool)">
            <summary>
            Represets Rectangle tool
            </summary>
            <param name="chartTool">Chart tool</param>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Rectangle.Point1">
             <summary>
            Rectangle chart point 1
             </summary>
             <returns>Chart point 1 for Rectangle tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Rectangle.Point2">
             <summary>
            Rectangle chart point 2
             </summary>
             <returns>Chart point 2 for Rectangle tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Rectangle.Color">
            <summary>
            Rectangle color
            </summary>
            <returns>Rectangle color for Ellipse tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Rectangle.BorderColor">
            <summary>
            Rectangle border color
            </summary>
            <returns>Rectangle border color for Rectangle tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Rectangle.BorderStyle">
            <summary>
            Rectangle border style
            </summary>
            <returns>Rectangle border style for Rectangle tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Rectangle.BorderWidth">
            <summary>
            Rectangle border width
            </summary>
            <returns>Rectangle border width for Rectangle tool</returns>
        </member>
        <member name="T:IPro.Model.Programming.Chart.Text">
            <summary>
            Represets Text tool
            </summary>
            <example>        
            Creates Text tool
            <code>
            private bool firstBar=true;
            
            protected override void NewBar()
            {
                if (firstBar)
                {
                    var toolText = Tools.Create&lt;Text&gt;();
                    toolText.Point=new ChartPoint(Bars[Bars.Range.To-1].Time, Bars[Bars.Range.To-1].High);
                    toolText.Caption=string.Format("Last bar close price = {0}",Bars[Bars.Range.To-1].Close);
                    firstBar=false;
                 }		
            }	
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.Chart.Text.#ctor(IPro.Model.Client.Chart.IChartTool)">
            <summary>
            Represets Text tool
            </summary>
            <param name="chartTool">Chart tool</param>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Text.Point">
             <summary>
            Text point
             </summary>
             <returns>Chart point for Text tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Text.Color">
            <summary>
            Text color
            </summary>
            <returns>Text color for Text tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Text.FontFamily">
            <summary>
            Text font family
            </summary>
            <returns>Text font family for Text tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Text.FontSize">
            <summary>
            Text font size
            </summary>
            <returns>Text font size for Text tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Text.Style">
            <summary>
            Text style
            </summary>
            <returns>Text style for Text tool <seealso cref="T:IPro.Model.Programming.Chart.TextStyle"/> </returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Text.Caption">
            <summary>
            Text caption
            </summary>
            <returns>Text caption for Text tool <seealso cref="T:IPro.Model.Programming.Chart.TextStyle"/> </returns>
        </member>
        <member name="M:IPro.Model.Programming.Chart.ToolDescriptionAttribute.#ctor">
            <summary>
            Represets tool descriptionA attribute
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Chart.ToolDescriptionAttribute.#ctor(System.Type,System.String,System.Int32)">
            <summary>
            Represets tool descriptionA attribute
            </summary>
            <param name="modelType">Type</param>
            <param name="typeName">Name of the type</param>
            <param name="points">Number of points</param>
        </member>
        <member name="P:IPro.Model.Programming.Chart.ToolDescriptionAttribute.TypeName">
            <summary>
            Tool descriptionA attribute type name
            </summary>
            <returns>Name of the type</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.ToolDescriptionAttribute.Points">
            <summary>
            Tool descriptionA attribute points number
            </summary>
            <returns>Number of points</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.ToolDescriptionAttribute.ModelType">
            <summary>
            Tool descriptionA attribute type
            </summary>
            <returns>Type fo the model</returns>
        </member>
        <member name="T:IPro.Model.Programming.Chart.ToolType">
            <summary>
            List of tool types
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.ToolType.AndrewsPitchfork">
            <summary>
            Andrews pitchfork tool type, 6 chart points
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.ToolType.ArrowDown">
            <summary>
            Arrow down tool type, 1 chart point
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.ToolType.ArrowUp">
            <summary>
            Arrow up tool type, 1 chart point
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.ToolType.Bear">
            <summary>
            Bear tool type, 1 chart point
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.ToolType.Bull">
            <summary>
            Bull tool type, 1 chart point
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.ToolType.Check">
            <summary>
            Check tool type, 1 chart point
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.ToolType.Ellipse">
            <summary>
            Ellipse tool type, 4 chart points
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.ToolType.Fibo">
            <summary>
            Fibo tool type, 2 chart points
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.ToolType.FiboExtension">
            <summary>
            Fibo extension tool type, 3 chart points
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.ToolType.FiboFan">
            <summary>
            Fibo fan tool type, 2 chart points
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.ToolType.FiboTimezone">
            <summary>
            Fibo timezone tool type, 2 chart points
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.ToolType.HandDown">
            <summary>
            Hand down tool type, 1 chart point
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.ToolType.HandUp">
            <summary>
            Hand up tool type, 1 chart point
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.ToolType.HorizontalLine">
            <summary>
            Horizontal line tool type, 1 chart point
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.ToolType.LabelLeft">
            <summary>
            Label left tool type, 1 chart point
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.ToolType.LabelRight">
            <summary>
            Label right tool type, 1 chart point
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.ToolType.PolyLine">
            <summary>
            PolyLine tool type, 0 chart points
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.ToolType.Rectangle">
            <summary>
            Rectangle tool type, 4 chart points
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.ToolType.Text">
            <summary>
            Text tool type, 1 chart point
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.ToolType.TrendLine">
            <summary>
            Trendline tool type, 2 chart points
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.ToolType.TrendLineRay">
            <summary>
            Trendline ray tool type, 2 chart points
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.ToolType.Triangle">
            <summary>
            Trendline tool type, 3 chart points
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Chart.ToolType.VerticalLine">
            <summary>
            Vertical line tool type, 1 chart point
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Chart.TrendLine">
             <summary>
             Represets Trend line tool
             </summary>
             <example>        
             Creates Trend line tool
             <code>
            private int countBar=0;
            
            protected override void NewBar()
            {
                countBar++;
                if (countBar==1)
                {
                var toolTrendLine = Tools.Create&lt;TrendLine&gt;();
                toolTrendLine.Point1= new ChartPoint(Bars[Bars.Range.To-1].Time, Bars[Bars.Range.To-1].Low);
                toolTrendLine.Point2= new ChartPoint(Bars[Bars.Range.To-1].Time.AddMinutes(1), Bars[Bars.Range.To-1].High);
                }
            }	
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Chart.TrendLine.#ctor(IPro.Model.Client.Chart.IChartTool)">
            <summary>
            Represets Trend line tool
            </summary>
            <param name="chartTool">Chart tool</param>
        </member>
        <member name="P:IPro.Model.Programming.Chart.TrendLine.Point1">
             <summary>
            Trend line chart point 1
             </summary>
             <returns>Chart point 1 for Trend line tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.TrendLine.Point2">
             <summary>
            Trend line chart point 2
             </summary>
             <returns>Chart point 2 for Trend line tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.TrendLine.Color">
            <summary>
            Trend line color
            </summary>
            <returns>Color for Trend line tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.TrendLine.Style">
            <summary>
            Trend line style
            </summary>
            <returns>Style for Trend line tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.TrendLine.Width">
            <summary>
            Trend line width
            </summary>
            <returns>Width for Trend line tool</returns>
        </member>
        <member name="T:IPro.Model.Programming.Chart.TrendLineRay">
             <summary>
             Represets Trend line ray tool
             </summary>
             <example>        
             Creates Trend line ray tool
             <code>
            private int countBar=0;
            
            protected override void NewBar()
            {
                countBar++;
                if (countBar==1)
                {
                var toolTrendLineRay = Tools.Create&lt;TrendLineRay&gt;();
                toolTrendLineRay.Point1= new ChartPoint(Bars[Bars.Range.To-1].Time, Bars[Bars.Range.To-1].Low);
                toolTrendLineRay.Point2= new ChartPoint(Bars[Bars.Range.To-1].Time.AddMinutes(1), Bars[Bars.Range.To-1].High);
                }
            }	
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Chart.TrendLineRay.#ctor(IPro.Model.Client.Chart.IChartTool)">
            <summary>
            Represets Trend line ray tool
            </summary>
            <param name="chartTool">Chart tool</param>
        </member>
        <member name="P:IPro.Model.Programming.Chart.TrendLineRay.Point1">
             <summary>
            Trend line ray chart point 1
             </summary>
             <returns>Chart point 1 for Trend line ray tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.TrendLineRay.Point2">
             <summary>
            Trend line ray chart point 2
             </summary>
             <returns>Chart point 2 for Trend line ray tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.TrendLineRay.Color">
            <summary>
            Trend line ray color
            </summary>
            <returns>Color for Trend line ray tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.TrendLineRay.Style">
            <summary>
            Trend line ray style
            </summary>
            <returns>Style for Trend line ray tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.TrendLineRay.Width">
            <summary>
            Trend line ray width
            </summary>
            <returns>Width for Trend line ray tool</returns>
        </member>
        <member name="T:IPro.Model.Programming.Chart.Triangle">
            <summary>
            Represets Triangle tool
            </summary>
            <example>        
            Creates Triangle tool
            <code>
            private bool firstBar=true;
            
            protected override void NewBar()
            {
                if (firstBar)
                {
                    var toolTriangle = Tools.Create&lt;Triangle&gt;();
                    toolTriangle.Point1=new ChartPoint(Bars[Bars.Range.To-1].Time.AddMinutes(-1), Bars[Bars.Range.To-1].High);
                    toolTriangle.Point2=new ChartPoint(Bars[Bars.Range.To-1].Time, Bars[Bars.Range.To-1].High+Instrument.Point*30);
                    toolTriangle.Point3=new ChartPoint(Bars[Bars.Range.To-1].Time.AddMinutes(1), Bars[Bars.Range.To-1].Low-Instrument.Point*30);
                    firstBar=false;
                 }		
            }	
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.Chart.Triangle.#ctor(IPro.Model.Client.Chart.IChartTool)">
            <summary>
            Represets Triangle tool
            </summary>
            <param name="chartTool">Chart tool</param>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Triangle.Point1">
             <summary>
            Triangle chart point 1
             </summary>
             <returns>Chart point 1 for Triangle tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Triangle.Point2">
             <summary>
            Triangle chart point 2
             </summary>
             <returns>Chart point 2 for Triangle tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Triangle.Point3">
             <summary>
            Triangle chart point 3
             </summary>
             <returns>Chart point 3 for Triangle tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Triangle.Color">
            <summary>
            Triangle color
            </summary>
            <returns>Triangle color for Triangle tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Triangle.BorderColor">
            <summary>
            Triangle border color
            </summary>
            <returns>Triangle border color for Triangle tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Triangle.BorderStyle">
            <summary>
            Triangle border style
            </summary>
            <returns>Triangle border style for Triangle tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.Triangle.BorderWidth">
            <summary>
            Triangle border width
            </summary>
            <returns>Triangle border width for Triangle tool</returns>
        </member>
        <member name="T:IPro.Model.Programming.Chart.VerticalLine">
             <summary>
             Represets Vertical line tool
             </summary>
             <example>        
             Creates Vertical line tool
             <code>
            protected override void NewBar()
            {
                var toolVerticalLine = Tools.Create&lt;VerticalLine&gt;();
                toolVerticalLine.Time=Bars[Bars.Range.To-1].Time.AddMinutes(-1);
                }
            }	
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Chart.VerticalLine.#ctor(IPro.Model.Client.Chart.IChartTool)">
            <summary>
            Represets VerticalLine line
            </summary>
            <param name="chartTool">Chart tool</param>
        </member>
        <member name="P:IPro.Model.Programming.Chart.VerticalLine.Time">
            <summary>
            Time on a chart
            </summary>
            <returns>Time for the Vertical line tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.VerticalLine.Color">
            <summary>
            Vertical line color
            </summary>
            <returns>Vertical line color for Vertical line tool</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.VerticalLine.Style">
            <summary>
            Vertical line style
            </summary>
            <returns>Vertical line style for Vertical line</returns>
        </member>
        <member name="P:IPro.Model.Programming.Chart.VerticalLine.Width">
            <summary>
            Vertical line width
            </summary>
            <returns>Vertical line width for Vertical line</returns>
        </member>
        <member name="T:IPro.Model.Programming.Color">
            <summary>
            Predefined colors
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.Unknown">
            <summary>
            Unknown color
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.Red">
            <summary>
            Red color 100% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.Yellow">
            <summary>
            Yellow color 100% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.Lime">
            <summary>
            Lime color 100% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.Aqua">
            <summary>
            Aqua color 100% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.Blue">
            <summary>
            Blue color 100% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.Magenta">
            <summary>
            Magenta color 100% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.BlueViolet">
            <summary>
            Blue violet color 90% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.White">
            <summary>
            White color 100% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.Maroon">
            <summary>
            Maroon color 99% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.DarkCyan">
            <summary>
            Dark cyan color 89% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.DeepPink">
            <summary>
            Deep pink color 94% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.DarkSlateBlue">
            <summary>
            Dark slate blue color 93% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.DarkOrange">
            <summary>
            Dark orange color 98% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.ForestGreen">
            <summary>
            Forest green color 94% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.DeepSkyBlue">
            <summary>
            Deep sky blue color 98% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.DarkKhaki">
            <summary>
            Dark khaki color 94% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.LightSalmon">
            <summary>
            Light salmon color 98% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.SkyBlue">
            <summary>
            Sky blue color 94% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.Olive">
            <summary>
            Olive color 99% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.DarkSeaGreen">
            <summary>
            Dark sea green color 93% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.Khaki">
            <summary>
            Khaki color 95% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.Violet">
            <summary>
            Violet color 93% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.DarkSalmon">
            <summary>
            Dark salmon color 94% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.IndianRed">
            <summary>
            Indian red color 93% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.Crimson">
            <summary>
            Crimson color 87% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.Gold">
            <summary>
            Gold color 94% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.SpringGreen">
            <summary>
            Spring green color 95% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.DarkTurquoise">
            <summary>
            Dark turquoise color 91% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.MediumBlue">
            <summary>
            Medium blue color 98% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.HotPink">
            <summary>
            Hot pink color 87% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.MediumOrchid">
            <summary>
            Medium orchid color 90% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.Silver">
            <summary>
            Silver color 97% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.Firebrick">
            <summary>
            Firebrick color 90% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.Goldenrod">
            <summary>
            Goldenrod color 89% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.LimeGreen">
            <summary>
            Lime green color 88% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.LightSeaGreen">
            <summary>
            Light sea green color 89% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.DarkBlue">
            <summary>
            Dark blue color 97% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.MediumVioletRed">
            <summary>
            Medium violet red color 96% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.DarkOrchid">
            <summary>
            Dark orchid color 97% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.DarkGray">
            <summary>
            Dark gray color 97% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.DarkRed">
            <summary>
            Dark red color 100% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.DarkGoldenrod">
            <summary>
            Dark goldenrod color 93% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.SeaGreen">
            <summary>
            Sea green color 89% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.Teal">
            <summary>
            Teal color 92% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.Navy">
            <summary>
            Navy color 94% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.Purple">
            <summary>
            Purple color 94% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.Indigo">
            <summary>
            Indigo color 89% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.Gray">
            <summary>
            Gray color 99% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.SaddleBrown">
            <summary>
            Saddle brown color 83% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.OliveDrab">
            <summary>
            Olive drab color 90% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.DarkGreen">
            <summary>
            Dark green color 92% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.MidnightBlue">
            <summary>
            Midnight blue color 91% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.Black">
            <summary>
            Black color 90% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.DarkMagenta">
            <summary>
            Dark magenta color 84% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.DarkSlateGray">
            <summary>
            Dark slate gray color 89% opacity
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Color.DimGray">
            <summary>
            Dim gray color 97% opacity
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.IAccount">
            <summary>
            Read only interface representing trade account in the system
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.IAccount.MaxIPAStoploss(System.Guid)">
            <summary>
            Maximum instrument Stop loss for IPA accounts
            </summary>
            <returns>
            Maximum instrument Stop loss in pips if current account is IPA, 
            or NULL if no restriction or other type of account
            </returns>
            <example>
            Getting maximum stop loss for current instrument
            <code>
            protected override void Init()
            {
                int? instrumentMaxStoploss=Account.MaxIPAStoploss(Instrument.Id);
                if (instrumentMaxStoploss != null)
                    {
                        Print("Maximum Stop loss value for current instrument is {0} pips", instrumentMaxStoploss);
                    }
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IAccount.Number">
            <summary>
            Account number
            </summary>
            <returns>Number of the trade account as a string value</returns>
            <example>
            Getting trade account number
            <code>
            protected override void Init()
            {
                Print("Current trade account number is {0}", Account.Number);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IAccount.Type">
            <summary>
            Account type
            </summary>
            <returns>Current account category type <seealso cref="T:IPro.Model.Trade.AccountCategory"/></returns>
            <example>
            Getting trade account type
            <code>
            protected override void Init()
            {
                Print("Current trade account type is {0}", Account.Type);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IAccount.Leverage">
            <summary>
            Account leverage
            </summary>
            <returns>Current account leverage as a long value</returns>
            <example>
            Getting trade account leverage
            <code>
            protected override void Init()
            {
                Print("Current trade account leverage is {0}", Account.Leverage);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IAccount.Currency">
            <summary>
            Account currency
            </summary>
            <returns>Current account currency as a string value</returns>
            <example>
            Getting trade account currency
            <code>
            protected override void Init()
            {
                Print("Current trade account currency is {0}", Account.Currency);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IAccount.Balance">
            <summary>
            Account balance
            </summary>
            <returns>Current account balance as a decimal value</returns>
            <example>
            Getting trade account balance
            <code>
            protected override void Init()
            {
                Print("Current trade account balance is {0}", Account.Balance);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IAccount.Equity">
            <summary>
            Account equity
            </summary>
            <returns>Current account equity as a decimal value</returns>
            <example>
            Getting trade account equity
            <code>
            protected override void Init()
            {
                Print("Current trade account equity is {0}", Account.Equity);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IAccount.Margin">
            <summary>
            Account margin
            </summary>
            <returns>Current account margin as a decimal value</returns>
            <example>
            Getting trade account margin
            <code>
            protected override void Init()
            {
                Print("Current trade account margin is {0}", Account.Margin);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IAccount.FreeMargin">
            <summary>
            Money available for trade
            </summary>
            <returns>Current account free margin as a decimal value</returns>
            <example>
            Getting trade account free margin
            <code>
            protected override void Init()
            {
                Print("Current trade account free margin is {0}", Account.FreeMargin);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IAccount.MarginLevel">
            <summary>
            Margin level
            </summary>
            <returns>Current account margin level as a decimal value</returns>
            <example>
            Getting trade account margin level
            <code>
            protected override void Init()
            {
                Print("Current trade account margin level is {0}", Account.MarginLevel);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IAccount.MarginCallLevel">
            <summary>
            Margin call level. If the margin level is below this value then account can't open positions
            </summary>
            <returns>Current account margin call level as a int value</returns>
            <example>
            Getting trade account margin call level
            <code>
            protected override void Init()
            {
                Print("Current trade account margin call level is {0}", Account.MarginCallLevel);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IAccount.StopoutLevel">
            <summary>
            Stopout level. If the margin level is below this value then the most lossy position is closed
            </summary>
            <returns>Current account stopout level as a int value</returns>
            <example>
            Getting trade account stopout level
            <code>
            protected override void Init()
            {
                Print("Current trade account stopout level is {0}", Account.StopoutLevel);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IAccount.MaxPositions">
            <summary>
            Maximum active positions for account
            </summary>
            <returns>Current account maximum of active positions as a int value</returns>
            <example>
            Getting trade account maximum of active positions 
            <code>
            protected override void Init()
            {
                Print("Current trade account maximum of active positions is {0}", Account.MaxPositions);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IAccount.MaxPendingPositions">
            <summary>
            Maximum pending positions for account
            </summary>
            <returns>Current account maximum of pending positions as a int value</returns>
            <example>
            Getting trade account maximum of pending positions 
            <code>
            protected override void Init()
            {
                Print("Current trade account maximum of pending positions is {0}", Account.MaxPendingPositions);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IAccount.MinLot">
            <summary>
            Minimum lot size for current account
            </summary>
            <returns>Current account minimum lot size as a decimal value</returns>
            <example>
            Getting trade account minimum lot size
            <code>
            protected override void Init()
            {
                Print("Current trade account minimum lot size is {0}", Account.MinLot);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IAccount.MaxLot">
            <summary>
            Maximum lot size for current account
            </summary>
            <returns>Current account maximum lot size as a decimal value</returns>
            <example>
            Getting trade account maximum lot size
            <code>
            protected override void Init()
            {
                Print("Current trade account maximum lot size is {0}", Account.MaxLot);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IAccount.LotStep">
            <summary>
            Minimum lot step for current account
            </summary>
            <returns>Current account minimum lot step as a decimal value</returns>
            <example>
            Getting trade account minimum lot step
            <code>
            protected override void Init()
            {
                Print("Current trade account minimum lot step is {0}", Account.LotStep);
            }
            </code>
            </example>
        </member>
        <member name="T:IPro.Model.Programming.IInstrument">
            <summary>
            Read only interface representing instrument
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.IInstrument.Id">
            <summary>
            Unique id of instrument
            </summary>
            <returns>Unique id of current instrument as a Guid value</returns>
            <example>
            Getting unique id of current instrument
            <code>
            protected override void Init()
            {
                Print("Current instrument Id is {0}", Instrument.Id);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IInstrument.Name">
            <summary>
            Instrument name
            </summary>
            <returns>Name of current instrument as a string value</returns>
            <example>
            Getting name of current instrument
            <code>
            protected override void Init()
            {
                Print("Current instrument name is {0}", Instrument.Name);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IInstrument.Bid">
            <summary>
            Instrument Bid price
            </summary>
            <returns>Bid price of current instrument as a double value</returns>
            <example>
            Getting Bid price for current instrument
            <code>
            protected override void Init()
            {
                Print("Current instrument Bid price is {0}", Instrument.Bid);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IInstrument.Ask">
            <summary>
            Instrument Ask price
            </summary>
            <returns>Ask price of current instrument as a double value</returns>
            <example>
            Getting Ask price for current instrument
            <code>
            protected override void Init()
            {
                Print("Current instrument Ask price is {0}", Instrument.Ask);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IInstrument.Spread">
            <summary>
            Instrument spread
            </summary>
            <returns>Spread for current instrument as a double value</returns>
            <example>
            Getting spread for current instrument
            <code>
            protected override void Init()
            {
                Print("Current instrument spread is {0}", Instrument.Spread);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IInstrument.PriceScale">
            <summary>
            Number of digits
            </summary>
            <returns>Price scale for current instrument as a int value</returns>
            <example>
            Getting price scale for current instrument
            <code>
            protected override void Init()
            {
                Print("Current instrument price scale is {0}", Instrument.PriceScale);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IInstrument.Point">
            <summary>
            Instrument point
            </summary>
            <returns>Point for current instrument as a double value</returns>
            <example>
            Getting point for current instrument
            <code>
            protected override void Init()
            {
                Print("Current instrument point is {0}", Instrument.Point);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IInstrument.LotSize">
            <summary>
            Lot size in base currency
            </summary>
            <returns>Lot size for current instrument as a int value</returns>
            <example>
            Getting lot size for current instrument
            <code>
            protected override void Init()
            {
                Print("Current instrument lot size is {0}", Instrument.LotSize);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IInstrument.LongPositionSwap">
            <summary>
            Swap for long positions
            </summary>
            <returns>Long position swap for current instrument as a decimal value</returns>
            <example>
            Getting long position swap for current instrument
            <code>
            protected override void Init()
            {
                Print("Current instrument long position swap is {0}", Instrument.LongPositionSwap);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IInstrument.ShortPositionSwap">
            <summary>
            Swap for short positions
            </summary>
            <returns>Short position swap for current instrument as a decimal value</returns>
            <example>
            Getting short position swap for current instrument
            <code>
            protected override void Init()
            {
                Print("Current instrument short position swap is {0}", Instrument.ShortPositionSwap);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IInstrument.Comission">
            <summary>
            Comission taken for position closing
            </summary>
            <returns>Comission for current instrument as a decimal value</returns>
            <example>
            Getting comission for current instrument
            <code>
            protected override void Init()
            {
                Print("Current instrument comission is {0}", Instrument.Comission);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IInstrument.Prices">
            <summary>
            Instrument prices
            </summary>
            <returns>Instrument prices for current instrument corresponding to ask or bid</returns>
            <example>
            Getting instrument prices for current instrument
            <code>
            protected override void Init()
            {
               var insPrices=Instrument.Prices;
               Print("Instrument prices: Ask={0}, Bid={1}", insPrices.Ask, insPrices.Bid);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IInstrument.PointValues">
            <summary>
            Point values
            </summary>
            <returns>Point values for current instrument (pip cost per lot) </returns>
            <example>
            Getting point values for current instrument
            <code>
            protected override void Init()
            {
               var insPointValues=Instrument.PointValues;
               Print("Instrument point values: Ask={0}, Bid={1}", insPointValues.Ask, insPointValues.Bid);
            }
            </code>
            </example>
        </member>
        <member name="T:IPro.Model.Programming.IInstrumentCollection">
            <summary>
            Interface repesents instrument collection
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.IInstrumentCollection.Item(System.String)">
            <summary>
            Get instrument by Name
            </summary>
            <param name="name">Instrument name</param>
            <returns>Instrument by its name</returns>
            <example>
            Getting instrument by its name
            <code>
            protected override void Init()
            {
               var instr=Instruments["EURUSD"];
               Print("Instrument Id is {0}", instr.Id);
            }
            </code>
            </example>
        </member>
        <member name="P:IPro.Model.Programming.IInstrumentCollection.Item(System.Guid)">
            <summary>
            Get instrument by id
            </summary>
            <param name="id">Instrument id</param>
            <returns>Instrument by its id</returns>
            <example>
            Getting instrument by its id
            <code>
            protected override void Init()
            {
               var instr=Instruments[Guid.Parse("75a40641-944a-4a69-b160-ef84650b3ef5")];
               Print("Instrument name is {0}", instr.Name);
            }
            </code>
            </example>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.CharCode">
            <summary>
            Char codes
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.CharCode.No">
            <summary>
            None char code
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.CharCode.Lozenge">
            <summary>
            Lozenge char code
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.CharCode.Circle">
            <summary>
            Circle char code
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.CharCode.ArrowUp">
            <summary>
            ArrowUp char code
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.CharCode.ArrowDown">
            <summary>
            ArrowDown char code
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.IndicatorAttribute">
             <summary>
             Declares some of default indicator properties
             </summary>
             <example>
             
             <code>
            using System;
            using IPro.Model.Programming;
            using IPro.Model.Programming.Indicators;
            
            namespace ExampleIndicator
            {
                [Indicator("Example Indicator")]
                public class TestIndicat : Indicator
                {
                    protected override void Init()
                    {
                        Print("Indicator name: {0}", Title);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.IndicatorAttribute.#ctor">
            <summary>
            Rrepesents default indicator attributes
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.IndicatorAttribute.#ctor(System.String)">
            <summary>
            Rrepesents indicator name
            </summary>
            <param name="name">Name of the indicator</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorAttribute.Name">
            <summary>
            Visible name
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorAttribute.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorAttribute.LevelsAllowed">
            <summary>
            Indicates if user is allowed to add levels
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorAttribute.Location">
            <summary>
            Sets supported locations for indicator
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorAttribute.MinValue">
            <summary>
            Min visible value. Adaptive if not set
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorAttribute.MaxValue">
            <summary>
            Max visible value. Adaptive if not set
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorAttribute.Precision">
            <summary>
            Scale precision
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorAttribute.HistoryDepth">
            <summary>
            Loadable amount of historical data
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.IndicatorInfo">
            <summary>
            Indicator extracted information
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.IndicatorInfo.AddLevel(IPro.Model.Programming.Indicators.IndicatorLevel)">
            <summary>
            Add indicator level method
            </summary>
            <param name="level">Indicator level</param>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.IndicatorInfo.RemoveLevel(IPro.Model.Programming.Indicators.IndicatorLevel)">
            <summary>
            Remove indicator level method
            </summary>
            <param name="level">Indicator level</param>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.IndicatorInfo.AddParameterSet(IPro.Model.Client.Development.ProgramManagement.ParameterSet)">
            <summary>
            Add set of parameters to indicator
            </summary>
            <param name="set">Set of parameter <see cref="T:IPro.Model.Client.Development.ProgramManagement.ParameterSet"/></param>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.IndicatorInfo.RemoveParameterSet(IPro.Model.Client.Development.ProgramManagement.ParameterSet)">
            <summary>
            Remove set of parameters from indicator
            </summary>
            <param name="set">Set of parameter <see cref="T:IPro.Model.Client.Development.ProgramManagement.ParameterSet"/></param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorInfo.TypeAssemblyName">
            <summary>
            Inner indicator's assembly name
            </summary>
            <returns>Indicator inner assembly name</returns>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorInfo.TypeName">
            <summary>
            Inner indicator's type name
            </summary>
            <returns>Name of indicator type</returns>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorInfo.Id">
            <summary>
            Indicator Id
            </summary>
            <returns>Guid of indicator</returns>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorInfo.IsStandard">
            <summary>
            Is standard
            </summary>
            <returns>True if indicator is standart</returns>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorInfo.Name">
            <summary>
            Indicator name
            </summary>
            <returns>Name of indicator</returns>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorInfo.Description">
            <summary>
            Indicator description
            </summary>
            <returns>Description of indicator</returns>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorInfo.Version">
            <summary>
            Indicator version
            </summary>
            <returns>Version of indicator</returns>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorInfo.Properties">
            <summary>
            Indicator properties
            </summary>
            <returns>Collection of parameter <see cref="T:IPro.Model.Programming.ParameterCollection"/></returns>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorInfo.ParametersGroups">
            <summary>
            Indicator parameters groups
            </summary>
            <returns>Groups of indicator parameters <see cref="P:IPro.Model.Programming.Indicators.IndicatorInfo.ParametersGroups"/>&gt;</returns>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorInfo.SeriesProperties">
            <summary>
            IndicatorSeries properties
            </summary>
            <returns>Array of series properties <see cref="P:IPro.Model.Programming.Indicators.IndicatorInfo.SeriesProperties"/></returns>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorInfo.Levels">
            <summary>
            Indicator Levels
            </summary>
            <returns>Read-only collection of indicators levels <see cref="T:IPro.Model.Programming.Indicators.IndicatorLevel"/></returns>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorInfo.Icon">
            <summary>
            Icon
            </summary>
            <returns>Indicator icon</returns>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorInfo.Location">
            <summary>
            Location
            </summary>
            <returns>Location of the indicator on the chart</returns>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorInfo.LevelsAllowed">
            <summary>
            Indicates whether levels are supported
            </summary>
            <returns>True if level are allowed for this indicator</returns>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorInfo.MinValue">
            <summary>
            Y scale minimal value
            </summary>
            <returns>Minimal value for chart Y scale</returns>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorInfo.MaxValue">
            <summary>
            Y scale maximal value
            </summary>
            <returns>Maximal value for chart Y scale</returns>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorInfo.Precision">
            <summary>
            Indicator values precision
            </summary>
            <returns>Precision for indicator calculation</returns>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorInfo.IsBuiltIn">
            <summary>
            Indicates if indicator is built in
            </summary>
            <returns>True if indicator is buit in</returns>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorInfo.ParameterSets">
            <summary>
            Available sets
            </summary>
            <returns>Readonly list of available parameter sets <see cref="T:IPro.Model.Client.Development.ProgramManagement.ParameterSet"/></returns>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.IndicatorLevel">
            <summary>
            Represents indicator level
            </summary>
            <exclude />
        </member>
        <member name="M:IPro.Model.Programming.Indicators.IndicatorLevel.#ctor(System.String,System.Double)">
            <summary>
            Indicator level 
            </summary>
            <param name="name">Indicator level name</param>
            <param name="value">Indicator level value</param>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.IndicatorLevel.#ctor">
            <summary>
            Indicator level 
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorLevel.Name">
            <summary>
            Name of indicator level
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorLevel.Value">
            <summary>
            Value of indicator level
            </summary>
        </member>
        <member name="E:IPro.Model.Programming.Indicators.IndicatorLevel.Changed">
            <summary>
            Level change event
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.IndicatorLevelAttribute">
            <summary>
            Atributes for indicator level
            </summary>
            <example>
            Indicator levels example. In this example two default levels are set: -0.5 and 0.5.
            <code>
            namespace ExampleIndicator
            {
                [Indicator("Example Indicator", Location = IndicatorLocation.SeparateWindow, LevelsAllowed = true)]
                [IndicatorLevel(Name = "Default Minimum", Value = -0.5)]
                [IndicatorLevel(Name = "Default Maximum", Value = 0.5)]
                public class TestIndicat : Indicator
                {
                }
            }
            </code>
            </example>	
        </member>
        <member name="M:IPro.Model.Programming.Indicators.IndicatorLevelAttribute.#ctor(System.Double)">
            <summary>
            Level value
            </summary>
            <param name="value">Indicator level value</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorLevelAttribute.Name">
            <summary>
            Name of indicator level
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.IndicatorLevelAttribute.Value">
            <summary>
            Value of indicator level
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.IndicatorLocation">
            <summary>
            Specifies locations indicator supports
            </summary>
            <example>
            Indicator location example
            <code>
            namespace ExampleIndicator
            {
                [Indicator("Example Indicator", Location = IndicatorLocation.Chart)]
                public class TestIndicat : Indicator
                {
                }
            }
            </code>
            </example>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.IndicatorLocation.Chart">
            <summary>
            Indicator can be added to a chart
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.IndicatorLocation.SeparateWindow">
            <summary>
            Indicator can be added to a indicator window
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.LineDashStyle">
            <summary>
            Line dash style
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.LineDashStyle.Solid">
            <summary>
            Solid style 
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.LineDashStyle.Dash">
            <summary>
            Dash style 
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.LineDashStyle.Dot">
            <summary>
            Dot style 
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.LineDashStyle.DashDot">
            <summary>
            Dash dot style 
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.LineDashStyle.DashDotDot">
            <summary>
            Dash dot dot style 
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.LineDashStyle.SuperDashDotDot">
            <summary>
            Super dash dot dot style 
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.LineDashStyle.LongDash">
            <summary>
            Long dash style 
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.LineDashStyle.LongDashDotDot">
            <summary>
            Long dash dot dot style 
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.LineThicknessStyle">
            <summary>
            Style for line thickness
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.LineThicknessStyle.Thickness1">
            <summary>
            Thickness 1
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.LineThicknessStyle.Thickness2">
            <summary>
            Thickness 2
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.LineThicknessStyle.Thickness3">
            <summary>
            Thickness 3
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.LineThicknessStyle.Thickness4">
            <summary>
            Thickness 4
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.LineThicknessStyle.Thickness5">
            <summary>
            Thickness 5
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.LineThicknessStyle.Thickness6">
            <summary>
            Thickness 6
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.LocalizableIndicatorAttribute">
            <summary>
            Localizable version of <see cref="T:IPro.Model.Programming.Indicators.IndicatorAttribute"/>
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.LocalizableIndicatorAttribute.#ctor(System.String,System.String,System.Type)">
            <summary>
            Localizable indicator attribute
            </summary>
            <param name="nameProperty">Property name</param>
            <param name="descriptionProperty">Property description</param>
            <param name="resourcesType">Type of resources</param>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.LocalizableIndicatorLevelAttribute">
            <summary>
            Localizable version of <see cref="T:IPro.Model.Programming.Indicators.IndicatorLevelAttribute"/>
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.LocalizableIndicatorLevelAttribute.#ctor(System.Double,System.String,System.Type)">
            <summary>
            Localizable indicator level attribute
            </summary>
            <param name="nameProperty">Property name</param>
            <param name="value">Level value</param>
            <param name="resourcesType">Type of resources</param>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.LocalizableSeriesAttribute">
            <summary>
            Localizable version of <see cref="T:IPro.Model.Programming.Indicators.SeriesAttribute"/>
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.SeriesAttribute">
            <summary>
            Marks as output series
            </summary>
            <example>
            Usage of series attribute
            <code>
            [Series("IndSeries", Width=5, Style=SeriesStyle.Dots)]
            public IIndicatorSeries indSeries { get; set; }
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.SeriesAttribute.#ctor">
            <summary>
            Series attribute
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.SeriesAttribute.#ctor(System.String)">
            <summary>
            Series attribute
            </summary>
            <param name="name">Friendly name for the parameter</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.SeriesAttribute.Name">
            <summary>
            Visible name
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.SeriesAttribute.Width">
            <summary>
            Line width
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.SeriesAttribute.Color">
            <summary>
            <see cref="P:IPro.Model.Programming.Indicators.SeriesAttribute.Color"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.SeriesAttribute.Style">
            <summary>
            Style
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.SeriesAttribute.DashStyle">
            <summary>
            Line style
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.SeriesAttribute.CharCode">
            <summary>
            Char code. Applicable for <see cref="F:IPro.Model.Programming.Indicators.SeriesStyle.Chars"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.SeriesAttribute.PixelShift">
            <summary>
            Absolute char shif in pixels. Applicable for <see cref="F:IPro.Model.Programming.Indicators.SeriesStyle.Chars"/>
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.LocalizableSeriesAttribute.#ctor(System.String,System.Type)">
            <summary>
            Localizable series attribute
            </summary>
            <param name="nameProperty">Property name</param>
            <param name="resourcesType">Type of resources</param>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.MaMethods">
            <summary>
            Moving avarage methods
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.MaMethods.Sma">
            <summary>
            Simple method
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.MaMethods.Ema">
            <summary>
            Exponential method
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.MaMethods.Smma">
            <summary>
            Smoothed method
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.MaMethods.Lwma">
            <summary>
            Linear Weighted method
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.PriceMode">
            <summary>
            Price mode
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.PriceMode.Close">
            <summary>
            Close price mode
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.PriceMode.Open">
            <summary>
            Open price mode
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.PriceMode.High">
            <summary>
            High price mode
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.PriceMode.Low">
            <summary>
            Low price mode
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.PriceMode.Median">
            <summary>
            Median price (HL/2) mode
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.PriceMode.Typical">
            <summary>
            ypical price (HLC/3) mode
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.PriceMode.Weighted">
            <summary>
            Weighted price (HLCC/4) price mode
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.PricePair">
            <summary>
            Price pair
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.PricePair.LowHigh">
            <summary>
            Low/High price pair
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.PricePair.CloseClose">
            <summary>
            Close/Close price pair
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.SeriesProperties">
            <summary>
            Indicator series properties
            </summary>
            <exclude />
        </member>
        <member name="M:IPro.Model.Programming.Indicators.SeriesProperties.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Series properties 
            </summary>
            <param name="propertyFieldInfo">Field info property</param>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.SeriesProperties.#ctor(IPro.Model.Programming.Indicators.SeriesProperties)">
            <summary>
            Series properties
            </summary>
            <param name="other">Other series properties</param>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.SeriesProperties.Clone">
            <summary>
            Clones this series properties
            </summary>
            <returns>Dublicated series properties</returns>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.SeriesProperties.Name">
            <summary>
            User friendly name
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.SeriesProperties.Key">
            <summary>
            Series unique name
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.SeriesProperties.Color">
            <summary>
            Color
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.SeriesProperties.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.SeriesProperties.DashStyle">
            <summary>
            Line dash style
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.SeriesProperties.Style">
            <summary>
            Plot style
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.SeriesProperties.CharCode">
            <summary>
            Char code for <see cref="F:IPro.Model.Programming.Indicators.SeriesStyle.Chars"/> series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.SeriesProperties.PixelShift">
            <summary>
            Shift in pixels for <see cref="F:IPro.Model.Programming.Indicators.SeriesStyle.Chars"/> series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.SeriesProperties.Char">
            <summary>
            Target char of for <see cref="F:IPro.Model.Programming.Indicators.SeriesStyle.Chars"/> series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.SeriesProperties.IsLocked">
            <summary>
            Determine whether user can select and dragMove tool
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.SeriesProperties.DefaultSeriesProperties">
            <summary>
            Default series properties
            </summary>
        </member>
        <member name="E:IPro.Model.Programming.Indicators.SeriesProperties.Changed">
            <summary>
            Series properies are changed
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.SeriesStyle">
            <summary>
            Styles for series
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.SeriesStyle.Line">
            <summary>
            Line style
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.SeriesStyle.Histogram">
            <summary>
            Histogram style
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.SeriesStyle.Cloud">
            <summary>
            Cloud style
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.SeriesStyle.Chars">
            <summary>
            Chars style
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.SeriesStyle.ContinuousLine">
            <summary>
            Continuous line style
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.SeriesStyle.Dots">
            <summary>
            Dots style
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.SeriesStyle.BarOpen">
            <summary>
            Bar open style
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.SeriesStyle.BarClose">
            <summary>
            Bar close style
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.SeriesStyle.BarHigh">
            <summary>
            Bar high style
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.SeriesStyle.BarLow">
            <summary>
            Bar low style
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.AcceleratorOscillator">
             <summary>
             Standart indicator Accelerator oscillator
             </summary>
             <example>
             Create Accelerator oscillator indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private AcceleratorOscillator _aoInd;
            
                    protected override void Init()
                    {
                        _aoInd = GetIndicator&lt;AcceleratorOscillator&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                        Print("Accelerator oscillator up series value: {0}", _aoInd.SeriesUp[Bars.Range.To - 1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.AcceleratorOscillator.Init">
            <summary>
            Initiation
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.AcceleratorOscillator.Calculate(System.Int32,System.Int32)">
            <summary>
            Calculate and draw indicator values
            </summary>
            <param name="fromIndex">From index</param>
            <param name="toIndex">To index</param>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.AcceleratorOscillator.Calc(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.AcceleratorOscillator.Draw(System.Int32)">
            <summary>
            Draw indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.AcceleratorOscillator.SeriesUp">
            <summary>
            Indicators up series <see cref="T:IPro.Model.Programming.Indicators.IIndicatorSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.AcceleratorOscillator.SeriesDown">
            <summary>
            Indicators down series <see cref="T:IPro.Model.Programming.Indicators.IIndicatorSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.AcceleratorOscillator.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.AccumulationDistribution">
             <summary>
             Standart indicator Accumulation distribution
             </summary>
             <example>
             Create Accumulation distribution indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private AccumulationDistribution _adInd;
            
                    protected override void Init()
                    {
                        _adInd = GetIndicator&lt;AccumulationDistribution&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                        Print("Accumulation distribution value: {0}", _adInd.MainSeries[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.AccumulationDistribution.Calculate(System.Int32)">
            <summary>
            Calculate indicator value
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.AccumulationDistribution.MainSeries">
            <summary>
            Indicator main series <see cref="T:IPro.Model.Programming.Indicators.IIndicatorSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.AccumulationDistribution.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.Alligator">
             <summary>
             Standart indicator Alligator
             </summary>
             <example>
             Create Alligator indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private Alligator _allInd;
            
                    protected override void Init()
                    {
                        _allInd = GetIndicator&lt;Alligator&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Alligator jaws series value: {0}", _allInd.JawsSeries[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.Alligator.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Alligator.JawsPeriod">
            <summary>
            Alligator indicator jaws period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Alligator.JawsShift">
            <summary>
            Alligator indicator jaws shift
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Alligator.TeethPeriod">
            <summary>
            Alligator indicator teeth period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Alligator.TeethShift">
            <summary>
            Alligator indicator teeth shift
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Alligator.LipsPeriod">
            <summary>
            Alligator indicator lips period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Alligator.LipsShift">
            <summary>
            Alligator indicator lips shift
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Alligator.Method">
            <summary>
            Alligator indicator method <see cref="T:IPro.Model.Programming.Indicators.MaMethods"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Alligator.PriceMode">
            <summary>
            Alligator indicator price mode <see cref="P:IPro.Model.Programming.Indicators.Standard.Alligator.PriceMode"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Alligator.JawsSeries">
            <summary>
            Alligator indicator jaws series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Alligator.TeethSeries">
            <summary>
            Alligator indicator teeth series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Alligator.LipsSeries">
            <summary>
            Alligator indicator lips series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Alligator.TotalPeriod">
            <summary>
            Total period for Alligator indicator
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.Aroon">
             <summary>
             Standart indicator Aroon
             </summary>
             <example>
             Create Aroon indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private Aroon _aroonlInd;
            
                    protected override void Init()
                    {
                        _aroonlInd = GetIndicator&lt;Aroon&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Aroon up series value: {0}", _aroonlInd.UpSeries[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.Aroon.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Aroon.Period">
            <summary>
            Aroon indicator period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Aroon.UpSeries">
            <summary>
            Indicators up series <see cref="T:IPro.Model.Programming.Indicators.IIndicatorSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Aroon.DownSeries">
            <summary>
            Indicators down series <see cref="T:IPro.Model.Programming.Indicators.IIndicatorSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Aroon.TotalPeriod">
            <summary>
            Total period for Aroon indicator
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.AroonOscillator">
             <summary>
             Standart indicator Aroon oscillator
             </summary>
             <example>
             Create Aroon oscillator indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private AroonOscillator _aroonlInd;
            
                    protected override void Init()
                    {
                        _aroonlInd = GetIndicator&lt;AroonOscillator&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Aroon oscillator positive series value: {0}", _aroonlInd.PositiveSeries[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.AroonOscillator.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.AroonOscillator.Period">
            <summary>
            Aroon oscillator period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.AroonOscillator.PositiveSeries">
            <summary>
            Indicators positive series <see cref="T:IPro.Model.Programming.Indicators.IIndicatorSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.AroonOscillator.NegativeSeries">
            <summary>
            Indicators negative series <see cref="T:IPro.Model.Programming.Indicators.IIndicatorSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.AroonOscillator.TotalPeriod">
            <summary>
            Total period for Aroon oscillator indicator
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.AverageDirectionalMovement">
             <summary>
             Standart indicator Average directional movement
             </summary>
             <example>
             Create Average directional movement indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private AverageDirectionalMovement _admInd;
            
                    protected override void Init()
                    {
                        _admInd = GetIndicator&lt;AverageDirectionalMovement&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Average directional movement main series value: {0}", _admInd.SeriesMain[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.AverageDirectionalMovement.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.AverageDirectionalMovement.Period">
            <summary>
            Average directional movement period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.AverageDirectionalMovement.AppliedPrice">
            <summary>
            Average directional movement applied price
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.AverageDirectionalMovement.SeriesMain">
            <summary>
            Indicators main series <see cref="T:IPro.Model.Programming.Indicators.IIndicatorSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.AverageDirectionalMovement.SeriesDp">
            <summary>
            Indicators positive directional series <see cref="T:IPro.Model.Programming.Indicators.IIndicatorSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.AverageDirectionalMovement.SeriesDm">
            <summary>
            Indicators negative directional series <see cref="T:IPro.Model.Programming.Indicators.IIndicatorSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.AverageDirectionalMovement.TotalPeriod">
            <summary>
            Total period for Average directional movement
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.AverageDirectionalMovement.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.AverageTrueRange">
             <summary>
             Standart indicator Average true range
             </summary>
             <example>
             Create Average true range indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private AverageTrueRange _atrInd;
            
                    protected override void Init()
                    {
                        _atrInd = GetIndicator&lt;AverageTrueRange&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Average true range main series value: {0}", _atrInd.SeriesAtr[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.AverageTrueRange.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.AverageTrueRange.SeriesAtr">
            <summary>
            Indicators main series <see cref="T:IPro.Model.Programming.Indicators.IIndicatorSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.AverageTrueRange.Period">
            <summary>
            Average true range period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.AverageTrueRange.TotalPeriod">
            <summary>
            Total period for Average true range
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.AwesomeOscillator">
             <summary>
             Standart indicator Awesome oscillator
             </summary>
             <example>
             Create Awesome oscillator indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private AwesomeOscillator _awoInd;
            
                    protected override void Init()
                    {
                        _awoInd = GetIndicator&lt;AwesomeOscillator&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Awesome oscillator up series value: {0}", _awoInd.SeriesUp[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.AwesomeOscillator.Init">
            <summary>
            Initiation
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.AwesomeOscillator.Calculate(System.Int32,System.Int32)">
            <summary>
            Calculate and draw indicator values
            </summary>
            <param name="fromIndex">From index</param>
            <param name="toIndex">To index</param>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.AwesomeOscillator.Calc(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.AwesomeOscillator.Draw(System.Int32)">
            <summary>
            Draw indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.AwesomeOscillator.SeriesUp">
            <summary>
            Indicators up series <see cref="T:IPro.Model.Programming.Indicators.IIndicatorSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.AwesomeOscillator.SeriesDown">
            <summary>
            Indicators down series <see cref="T:IPro.Model.Programming.Indicators.IIndicatorSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.AwesomeOscillator.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.BearsPower">
             <summary>
             Standart indicator Bears power
             </summary>
             <example>
             Create Bears power indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private BearsPower _bpInd;
            
                    protected override void Init()
                    {
                        _bpInd = GetIndicator&lt;BearsPower&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Bears power main series value: {0}", _bpInd.SeriesMain[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.BearsPower.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.BearsPower.SeriesMain">
            <summary>
            Indicators main series <see cref="T:IPro.Model.Programming.Indicators.IIndicatorSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.BearsPower.Period">
            <summary>
            Bears power indicator period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.BearsPower.AppliedPrice">
            <summary>
            Bears power indicator applied price
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.BearsPower.TotalPeriod">
            <summary>
            Total period for Bears power indicator
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.BollingerBands">
             <summary>
             Standart indicator Bollinger bands
             </summary>
             <example>
             Create Bollinger bands indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private BollingerBands _bbInd;
            
                    protected override void Init()
                    {
                        _bbInd = GetIndicator&lt;BollingerBands&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Bollinger bands up series value: {0}", _bbInd.SeriesUp[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.BollingerBands.Calculate(System.Int32,System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="fromIndex">From index</param>
            <param name="toIndex">To index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.BollingerBands.Period">
            <summary>
            Bollinger bands indicator period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.BollingerBands.Deviation">
            <summary>
            Bollinger bands indicator deviation
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.BollingerBands.Shift">
            <summary>
            Bollinger bands indicator shift
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.BollingerBands.AppliedPrice">
            <summary>
            Bollinger bands indicator applied price
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.BollingerBands.SeriesUp">
            <summary>
            Bollinger bands indicator top series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.BollingerBands.SeriesDown">
            <summary>
            Bollinger bands indicator bottom series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.BollingerBands.SeriesCenter">
            <summary>
            Bollinger bands indicator middle series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.BollingerBands.TotalPeriod">
            <summary>
            Total period for Bollinger bands indicator
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.BullsPower">
             <summary>
             Standart indicator Bulls power
             </summary>
             <example>
             Create Bulls power indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private BullsPower _bpInd;
            
                    protected override void Init()
                    {
                        _bpInd = GetIndicator&lt;BullsPower&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Bulls power main series value: {0}", _bpInd.SeriesMain[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.BullsPower.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.BullsPower.SeriesMain">
            <summary>
            Indicators main series <see cref="T:IPro.Model.Programming.Indicators.IIndicatorSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.BullsPower.Period">
            <summary>
            Bulls power indicator period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.BullsPower.AppliedPrice">
            <summary>
            Bulls power indicator applied price
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.BullsPower.TotalPeriod">
            <summary>
            Total period for Bulls power indicator
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.ChaikinOscillator">
             <summary>
             Standart indicator Chaikin oscillator
             </summary>
             <example>
             Create Chaikin oscillator indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private ChaikinOscillator _coInd;
            
                    protected override void Init()
                    {
                        _coInd = GetIndicator&lt;ChaikinOscillator&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                        Print("Chaikin oscillator main series value: {0}", _coInd.MainSeries[Bars.Range.To - 1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.ChaikinOscillator.Init">
            <summary>
            Initiation
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.ChaikinOscillator.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.ChaikinOscillator.SlowEmaPeriod">
            <summary>
            Chaikin oscillator indicator slow ema period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.ChaikinOscillator.FastEmaPeriod">
            <summary>
            Chaikin oscillator indicator fast ema period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.ChaikinOscillator.MainSeries">
            <summary>
            Indicators main series <see cref="T:IPro.Model.Programming.Indicators.IIndicatorSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.ChaikinOscillator.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.ChaikinOscillator.TotalPeriod">
            <summary>
            Total period for Chaikin oscillator indicator
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.ChaikinVolatility">
             <summary>
             Standart indicator Chaikin volatility
             </summary>
             <example>
             Create Chaikin volatility indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private ChaikinVolatility _cvInd;
            
                    protected override void Init()
                    {
                        _cvInd = GetIndicator&lt;ChaikinVolatility&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                        Print("Chaikin volatility main series value: {0}", _cvInd.MainSeries[Bars.Range.To - 1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.ChaikinVolatility.Init">
            <summary>
            Initiation
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.ChaikinVolatility.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.ChaikinVolatility.Period">
            <summary>
            Chaikin volatility indicator period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.ChaikinVolatility.EmaPeriod">
            <summary>
            Chaikin volatility indicator ema period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.ChaikinVolatility.MainSeries">
            <summary>
            Indicators main series <see cref="T:IPro.Model.Programming.Indicators.IIndicatorSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.ChaikinVolatility.TotalPeriod">
            <summary>
            Total period for Chaikin volatility indicator
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.ChaikinVolatility.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.CommodityChannelIndex">
             <summary>
             Standart indicator Commodity channel index
             </summary>
             <example>
             Create Commodity channel index indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private CommodityChannelIndex _cciInd;
            
                    protected override void Init()
                    {
                        _cciInd = GetIndicator&lt;CommodityChannelIndex&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Commodity channel index main series value: {0}", _cciInd.MainSeries[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.CommodityChannelIndex.Init">
            <summary>
            Initiation
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.CommodityChannelIndex.Calculate(System.Int32,System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="fromIndex">From index</param>
            <param name="toIndex">To index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.CommodityChannelIndex.Period">
            <summary>
            Commodity channel index indicator period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.CommodityChannelIndex.PriceMode">
            <summary>
            Commodity channel index indicator applied price
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.CommodityChannelIndex.MainSeries">
            <summary>
            Indicators main series <see cref="T:IPro.Model.Programming.Indicators.IIndicatorSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.CommodityChannelIndex.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.CommodityChannelIndex.TotalPeriod">
            <summary>
            Total period for Commodity channel index indicator
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.DeMarker">
             <summary>
             Standart indicator DeMarker
             </summary>
             <example>
             Create DeMarker indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private DeMarker _dmInd;
            
                    protected override void Init()
                    {
                        _dmInd = GetIndicator&lt;DeMarker&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("DeMarker main series value: {0}", _dmInd.SeriesMain[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.DeMarker.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.DeMarker.Period">
            <summary>
            DeMarker indicator period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.DeMarker.SeriesMain">
            <summary>
            DeMarker indicator main series <see cref="T:IPro.Model.Programming.Indicators.IIndicatorSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.DeMarker.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.DeMarker.TotalPeriod">
            <summary>
            Total period for DeMarker indicator
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.DetrendedPriceOscillator">
             <summary>
             Standart indicator Detrended price oscillator
             </summary>
             <example>
             Create Detrended price oscillator indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private DetrendedPriceOscillator _dpoInd;
            
                    protected override void Init()
                    {
                        _dpoInd = GetIndicator&lt;DetrendedPriceOscillator&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Detrended price oscillator main series value: {0}", _dpoInd.MainSeries[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.DetrendedPriceOscillator.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.DetrendedPriceOscillator.Period">
            <summary>
            Detrended price oscillator indicator period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.DetrendedPriceOscillator.MainSeries">
            <summary>
            Detrended price oscillator main series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.DetrendedPriceOscillator.TotalPeriod">
            <summary>
            Total period for Detrended price oscillator
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.EaseOfMovement">
             <summary>
             Standart indicator Ease of movement
             </summary>
             <example>
             Create Ease of movement indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private EaseOfMovement _eomInd;
            
                    protected override void Init()
                    {
                        _eomInd = GetIndicator&lt;EaseOfMovement&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Ease of movement main series value: {0}", _eomInd.MainSeries[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.EaseOfMovement.Init">
            <summary>
            Initiation
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.EaseOfMovement.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.EaseOfMovement.Period">
            <summary>
            Ease of movement indicator period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.EaseOfMovement.Multiplier">
            <summary>
            Ease of movement indicator multiplier
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.EaseOfMovement.MainSeries">
            <summary>
            Ease of movement indicator main series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.EaseOfMovement.TotalPeriod">
            <summary>
            Total period for Ease of movement indicator
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.EaseOfMovement.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.Envelopes">
             <summary>
             Standart indicator Envelopes
             </summary>
             <example>
             Create Envelopes indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private Envelopes _envInd;
            
                    protected override void Init()
                    {
                        _envInd = GetIndicator&lt;Envelopes&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Envelopes up series value: {0}", _envInd.SeriesUp[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.Envelopes.Calculate(System.Int32,System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="fromIndex">From index</param>
            <param name="toIndex">To index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Envelopes.Period">
            <summary>
            Envelopes indicator period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Envelopes.Deviation">
            <summary>
            Envelopes indicator deviation
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Envelopes.Shift">
            <summary>
            Envelopes indicator shift
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Envelopes.Method">
            <summary>
            Envelopes indicator moving average method 
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Envelopes.AppliedPrice">
            <summary>
            Envelopes indicator applied price
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Envelopes.SeriesUp">
            <summary>
            Envelopes indicator top series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Envelopes.SeriesDown">
            <summary>
            Envelopes indicator bottom series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Envelopes.TotalPeriod">
            <summary>
            Total period for Envelopes indicator
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.FisherTransformOscillator">
             <summary>
             Standart indicator Fisher transform oscillator
             </summary>
             <example>
             Create Fisher transform oscillator indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private FisherTransformOscillator _ftoInd;
            
                    protected override void Init()
                    {
                        _ftoInd = GetIndicator&lt;FisherTransformOscillator&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Fisher transform oscillator up series value: {0}", _ftoInd.UpSeries[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.FisherTransformOscillator.Init">
            <summary>
            Initiation
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.FisherTransformOscillator.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.FisherTransformOscillator.Period">
            <summary>
            Fisher transform oscillator indicator period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.FisherTransformOscillator.Ma1Period">
            <summary>
            Fisher transform oscillator indicator moving average 1 period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.FisherTransformOscillator.Ma1Method">
            <summary>
            Fisher transform oscillator indicator moving average 1 method
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.FisherTransformOscillator.Ma2Period">
            <summary>
            Fisher transform oscillator indicator moving average 2 period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.FisherTransformOscillator.Ma2Method">
            <summary>
            Fisher transform oscillator indicator moving average 2 method
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.FisherTransformOscillator.UpSeries">
            <summary>
            Fisher transform oscillator indicator up series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.FisherTransformOscillator.DownSeries">
            <summary>
            Fisher transform oscillator indicator down series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.FisherTransformOscillator.FisherSeries">
            <summary>
            Fisher transform oscillator indicator Fisher series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.FisherTransformOscillator.Ma1Series">
            <summary>
            Fisher transform oscillator indicator moving average 1 series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.FisherTransformOscillator.Ma2Series">
            <summary>
            Fisher transform oscillator indicator moving average 2 series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.FisherTransformOscillator.TotalPeriod">
            <summary>
            Total period for Fisher transform oscillator indicator
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.FisherTransformOscillator.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.ForceIndex">
             <summary>
             Standart indicator Force index
             </summary>
             <example>
             Create Force index indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private ForceIndex _fiInd;
            
                    protected override void Init()
                    {
                        _fiInd = GetIndicator&lt;ForceIndex&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Force index main series value: {0}", _fiInd.MainSeries[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.ForceIndex.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.ForceIndex.Period">
            <summary>
            Force index indicator period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.ForceIndex.PriceMode">
            <summary>
            Force index indicator applied price
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.ForceIndex.Method">
            <summary>
            Force index indicator moving average method
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.ForceIndex.MainSeries">
            <summary>
            Indicators main series <see cref="T:IPro.Model.Programming.Indicators.IIndicatorSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.ForceIndex.TotalPeriod">
            <summary>
            Total period for Force index indicator
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.Fractals">
             <summary>
             Standart indicator Fractals
             </summary>
             <example>
             Create Fractals indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private Fractals _frInd;
            
                    protected override void Init()
                    {
                        _frInd = GetIndicator&lt;Fractals&gt;(Instrument.Id, Timeframe);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.Fractals.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Fractals.Range">
            <summary>
            Fractals indicator range
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Fractals.TopSeries">
            <summary>
            Fractals indicator top series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Fractals.BottomSeries">
            <summary>
            Fractals indicator bottom series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Fractals.TotalPeriod">
            <summary>
            Total period for Fractals indicator
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Fractals.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.GatorOscillator">
             <summary>
             Standart indicator Gator oscillator
             </summary>
             <example>
             Create Gator oscillator indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private GatorOscillator _goInd;
            
                    protected override void Init()
                    {
                        _goInd = GetIndicator&lt;GatorOscillator&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Gator oscillator positive up series value: {0}", _goInd.PositiveSeriesUp[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.GatorOscillator.Init">
            <summary>
            Initiation
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.GatorOscillator.Calculate(System.Int32,System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="fromIndex">From index</param>
            <param name="toIndex">To index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.GatorOscillator.JawsPeriod">
            <summary>
            Gator oscillator jaws period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.GatorOscillator.JawsShift">
            <summary>
            Gator oscillator jaws shift
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.GatorOscillator.TeethPeriod">
            <summary>
            Gator oscillator teeth period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.GatorOscillator.TeethShift">
            <summary>
            Gator oscillator teeth shift
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.GatorOscillator.LipsPeriod">
            <summary>
            Gator oscillator lips period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.GatorOscillator.LipsShift">
            <summary>
            Gator oscillator lips shift
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.GatorOscillator.Method">
            <summary>
            Gator oscillator moving avarage method
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.GatorOscillator.PriceMode">
            <summary>
            Gator oscillator applied price
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.GatorOscillator.PositiveSeriesUp">
            <summary>
            Gator oscillator positive up series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.GatorOscillator.PositiveSeriesDown">
            <summary>
            Gator oscillator positive down series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.GatorOscillator.NegativeSeriesUp">
            <summary>
            Gator oscillator negative up series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.GatorOscillator.NegativeSeriesDown">
            <summary>
            Gator oscillator negative down series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.GatorOscillator.TotalPeriod">
            <summary>
            Total period for Gator oscillator indicator
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.GatorOscillator.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.HeikenAshi">
             <summary>
             Standart indicator Heiken Ashi
             </summary>
             <example>
             Create Heiken Ashi indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private HeikenAshi _haInd;
            
                    protected override void Init()
                    {
                        _haInd = GetIndicator&lt;HeikenAshi&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Heiken Ashi open series value: {0}", _haInd.OpenSeries[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.Standard.HeikenAshi.HighSeries">
            <summary>
            Heiken Ashi high series
            </summary>
        </member>
        <member name="F:IPro.Model.Programming.Indicators.Standard.HeikenAshi.LowSeries">
            <summary>
            Heiken Ashi low series
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.HeikenAshi.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.HeikenAshi.OpenSeries">
            <summary>
            Heiken Ashi open series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.HeikenAshi.CloseSeries">
            <summary>
            Heiken Ashi close series
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.Ichimoku">
             <summary>
             Standart indicator Ichimoku
             </summary>
             <example>
             Create Ichimoku indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private Ichimoku _ichInd;
            
                    protected override void Init()
                    {
                        _ichInd = GetIndicator&lt;Ichimoku&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Ichimoku Tankan Sen series value: {0}", _ichInd.TankanSenSeries[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.Ichimoku.Calculate(System.Int32,System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="fromIndex">From index</param>
            <param name="toIndex">To index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Ichimoku.TankanSen">
            <summary>
            Ichimoku Tankan-sen period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Ichimoku.KijunSen">
            <summary>
            Ichimoku Kijun-sen period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Ichimoku.SenkouSpan">
            <summary>
            Ichimoku Senkou Span period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Ichimoku.TankanSenSeries">
            <summary>
            Ichimoku Tankan-sen series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Ichimoku.KijunSenSeries">
            <summary>
            Ichimoku Kijun-sen series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Ichimoku.ChinkouSpan">
            <summary>
            Ichimoku Chinkou Span series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Ichimoku.SenkouSpanASeries">
            <summary>
            Ichimoku Senkou Span A series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Ichimoku.SenkouSpanBSeries">
            <summary>
            Ichimoku Senkou Span B series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Ichimoku.TotalPeriod">
            <summary>
            Total period for Ichimoku indicator
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Ichimoku.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.KeltnerChannel">
             <summary>
             Standart indicator Keltner channel
             </summary>
             <example>
             Create Keltner channel indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private KeltnerChannel _kchInd;
            
                    protected override void Init()
                    {
                        _kchInd = GetIndicator&lt;KeltnerChannel&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Keltner channel middle series value: {0}", _kchInd.MiddleSeries[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.KeltnerChannel.Init">
            <summary>
            Initiation
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.KeltnerChannel.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.KeltnerChannel.Period">
            <summary>
            Keltner channel indicator period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.KeltnerChannel.Shift">
            <summary>
            Keltner channel indicator shift
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.KeltnerChannel.Deviation">
            <summary>
            Keltner channel indicator deviation
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.KeltnerChannel.AppliedPrice">
            <summary>
            Keltner channel indicator applied price
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.KeltnerChannel.UpperSeries">
            <summary>
            Keltner channel indicator upper series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.KeltnerChannel.LowerSeries">
            <summary>
            Keltner channel indicator lower series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.KeltnerChannel.MiddleSeries">
            <summary>
            Keltner channel indicator middle series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.KeltnerChannel.TotalPeriod">
            <summary>
            Total period for Keltner channel indicator
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.KeltnerChannel.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.MarketFacilitationIndex">
             <summary>
             Standart indicator Market facilitation index
             </summary>
             <example>
             Create Market facilitation index indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private MarketFacilitationIndex _mfiInd;
            
                    protected override void Init()
                    {
                        _mfiInd = GetIndicator&lt;MarketFacilitationIndex&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Market facilitation index up volume down series value: {0}", _mfiInd.MfiUpVolumeDownSeries[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.MarketFacilitationIndex.Init">
            <summary>
            Initiation
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.MarketFacilitationIndex.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MarketFacilitationIndex.MfiUpVolumeUpSeries">
            <summary>
            Market facilitation index indicator up volume up series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MarketFacilitationIndex.MfiDownVolumeDownSeries">
            <summary>
            Market facilitation index indicator down volume down series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MarketFacilitationIndex.MfiUpVolumeDownSeries">
            <summary>
            Market facilitation index indicator up volume down series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MarketFacilitationIndex.MfiDownVolumeUpSeries">
            <summary>
            Market facilitation index indicator down volume up series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MarketFacilitationIndex.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.MassIndex">
             <summary>
             Standart indicator Mass index
             </summary>
             <example>
             Create Mass index indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private MassIndex _miInd;
            
                    protected override void Init()
                    {
                        _miInd = GetIndicator&lt;MassIndex&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Mass index main series value: {0}", _miInd.MainSeries[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.MassIndex.Init">
            <summary>
            Initiation
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.MassIndex.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MassIndex.PeriodEma">
            <summary>
            Mass index indicator Ema period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MassIndex.PeriodEmaOfEma">
            <summary>
            Mass index indicator Ema of Ema period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MassIndex.PeriodSum">
            <summary>
            Mass index indicator Sum period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MassIndex.MainSeries">
            <summary>
            Mass index indicator main series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MassIndex.TotalPeriod">
            <summary>
            Total period for Mass index indicator
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MassIndex.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.Momentum">
             <summary>
             Standart indicator Momentum
             </summary>
             <example>
             Create Momentum indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private Momentum _momentInd;
            
                    protected override void Init()
                    {
                        _momentInd = GetIndicator&lt;Momentum&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Momentum series value: {0}", _momentInd.SeriesMomentum[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.Momentum.Calculate(System.Int32,System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="fromIndex">From index</param>
            <param name="toIndex">To index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Momentum.SeriesMomentum">
            <summary>
            Momentum indicator series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Momentum.Period">
            <summary>
            Momentum indicator period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Momentum.TotalPeriod">
            <summary>
            Total period for Momentum indicator
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.MoneyFlowIndex">
             <summary>
             Standart indicator Money flow index
             </summary>
             <example>
             Create Money flow index indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private MoneyFlowIndex _mfiInd;
            
                    protected override void Init()
                    {
                        _mfiInd = GetIndicator&lt;MoneyFlowIndex&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Money flow index main series value: {0}", _mfiInd.MainSeries[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.MoneyFlowIndex.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MoneyFlowIndex.Period">
            <summary>
            Money flow index indicator period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MoneyFlowIndex.MainSeries">
            <summary>
            Money flow index indicator main series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MoneyFlowIndex.TotalPeriod">
            <summary>
            Total period for Money flow index indicator
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.MovingAverage">
             <summary>
             Standart indicator Moving average
             </summary>
             <example>
             Create Moving average indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private MovingAverage _maInd;
            
                    protected override void Init()
                    {
                        _maInd = GetIndicator&lt;MovingAverage&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Moving average series value: {0}", _maInd.SeriesMa[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.MovingAverage.SetChart(IPro.Model.Client.Chart.IChart)">
            <summary>
            Chart to display on
            </summary>
            <exclude />
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.MovingAverage.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MovingAverage.SeriesMa">
            <summary>
            Moving average indicator series <see cref="T:IPro.Model.Programming.Indicators.IIndicatorSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MovingAverage.Period">
            <summary>
            Moving average indicator period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MovingAverage.Shift">
            <summary>
            Moving average indicator shift
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MovingAverage.Method">
            <summary>
            Moving average indicator method
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MovingAverage.AppliedPrice">
            <summary>
            Moving average indicator applied price
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MovingAverage.DataIndicator">
            <summary>
            Base indicator for Moving average <see cref="T:IPro.Model.Programming.Indicators.Indicator"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MovingAverage.TotalPeriod">
            <summary>
            Total period for Money flow index indicator
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.MovingAverageConvergenceDivergence">
             <summary>
             Standart indicator MACD (Moving Average Convergence Divergence)
             </summary>
             <example>
             Create MACD indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private MovingAverageConvergenceDivergence _macdInd;
            
                    protected override void Init()
                    {
                        _macdInd = GetIndicator&lt;MovingAverageConvergenceDivergence&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("MACD signal line series value: {0}", _macdInd.SeriesSignal[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.MovingAverageConvergenceDivergence.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MovingAverageConvergenceDivergence.FastEmaPeriod">
            <summary>
            MACD indicator fast Ema period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MovingAverageConvergenceDivergence.SlowEmaPeriod">
            <summary>
            MACD indicator slow Ema period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MovingAverageConvergenceDivergence.SmaPeriod">
            <summary>
            MACD indicator Sma period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MovingAverageConvergenceDivergence.AppliedPrice">
            <summary>
            MACD indicator applied price
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MovingAverageConvergenceDivergence.SeriesMacd">
            <summary>
            MACD indicator main series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MovingAverageConvergenceDivergence.SeriesSignal">
            <summary>
            MACD indicator signal line series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MovingAverageConvergenceDivergence.TotalPeriod">
            <summary>
            Total period for MACD indicator
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MovingAverageConvergenceDivergence.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.MovingAverageOfOscillator">
             <summary>
             Standart indicator Moving average of oscillator
             </summary>
             <example>
             Create Moving average of oscillator indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private MovingAverageOfOscillator _maoInd;
            
                    protected override void Init()
                    {
                        _maoInd = GetIndicator&lt;MovingAverageOfOscillator&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Moving average of oscillator main series value: {0}", _maoInd.SeriesMain[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.MovingAverageOfOscillator.Init">
            <summary>
            Initiation
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.MovingAverageOfOscillator.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MovingAverageOfOscillator.FastEmaPeriod">
            <summary>
            Moving average of oscillator indicator fast Ema period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MovingAverageOfOscillator.SlowEmaPeriod">
            <summary>
            Moving average of oscillator indicator slow Ema period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MovingAverageOfOscillator.SmaPeriod">
            <summary>
            Moving average of oscillator indicator Sma period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MovingAverageOfOscillator.AppliedPrice">
            <summary>
            Moving average of oscillator indicator applied price
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MovingAverageOfOscillator.SeriesMain">
            <summary>
            Moving average of oscillator indicator main series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MovingAverageOfOscillator.TotalPeriod">
            <summary>
            Total period for Moving average of oscillator indicator
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.MovingAverageOfOscillator.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.OnBalanceVolume">
             <summary>
             Standart indicator On balance volume
             </summary>
             <example>
             Create On balance volume indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private OnBalanceVolume _obvInd;
            
                    protected override void Init()
                    {
                        _obvInd = GetIndicator&lt;OnBalanceVolume&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("On balance volume series value: {0}", _obvInd.ObvSeries[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.OnBalanceVolume.Calculate(System.Int32,System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="fromIndex">From index</param>
            <param name="toIndex">To index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.OnBalanceVolume.ObvSeries">
            <summary>
            On balance volume indicator main series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.OnBalanceVolume.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.ParabolicSar">
             <summary>
             Standart indicator Parabolic Sar
             </summary>
             <example>
             Create Parabolic Sar indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private ParabolicSar _psInd;
            
                    protected override void Init()
                    {
                        _psInd = GetIndicator&lt;ParabolicSar&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Parabolic Sar series value: {0}", _psInd.SarSeries[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.ParabolicSar.Calculate(System.Int32,System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="fromIndex">From index</param>
            <param name="toIndex">To index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.ParabolicSar.MaxCoef">
            <summary>
            Parabolic Sar indicators maximum coeficient
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.ParabolicSar.CoefStep">
            <summary>
            Parabolic Sar indicators coeficient step
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.ParabolicSar.SarSeries">
            <summary>
            Parabolic Sar indicators main series
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.PriceChannel">
             <summary>
             Standart indicator Price channel
             </summary>
             <example>
             Create Price channel indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private PriceChannel _pcInd;
            
                    protected override void Init()
                    {
                        _pcInd = GetIndicator&lt;PriceChannel&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Price channel middle series value: {0}", _pcInd.MiddleSeries[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.PriceChannel.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.PriceChannel.Period">
            <summary>
            Price channel indicators period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.PriceChannel.Shift">
            <summary>
            Price channel indicators shift
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.PriceChannel.UpperSeries">
            <summary>
            Price channel indicators upper series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.PriceChannel.LowerSeries">
            <summary>
            Price channel indicators lower series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.PriceChannel.MiddleSeries">
            <summary>
            Price channel indicators middle series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.PriceChannel.TotalPeriod">
            <summary>
            Total period for Price channel indicator
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.PriceChannel.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.RateOfChangeOscillator">
             <summary>
             Standart indicator ROC oscillator (Rate of change oscillator)
             </summary>
             <example>
             Create ROC oscillator indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private RateOfChangeOscillator _rocInd;
            
                    protected override void Init()
                    {
                        _rocInd = GetIndicator&lt;RateOfChangeOscillator&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("ROC oscillator main series value: {0}", _rocInd.MainSeries[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.RateOfChangeOscillator.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.RateOfChangeOscillator.Period">
            <summary>
            ROC oscillator indicators period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.RateOfChangeOscillator.AppliedPrice">
            <summary>
            ROC oscillator indicators applied price
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.RateOfChangeOscillator.MainSeries">
            <summary>
            ROC oscillator indicators main series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.RateOfChangeOscillator.TotalPeriod">
            <summary>
            Total period for ROC oscillator indicator
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.RegressionLine">
             <summary>
             Standart indicator Regression line
             </summary>
             <example>
             Create Regression line indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private RegressionLine _rlInd;
            
                    protected override void Init()
                    {
                        _rlInd = GetIndicator&lt;RegressionLine&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Regression line value: {0}", _rlInd.MainSeries[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.RegressionLine.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.RegressionLine.Period">
            <summary>
            Regression line indicators period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.RegressionLine.MainSeries">
            <summary>
            Regression line indicators main series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.RegressionLine.TotalPeriod">
            <summary>
            Total period for Regression line indicator
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.RelativeStrenghtIndex">
             <summary>
             Standart indicator Relative strenght index
             </summary>
             <example>
             Create Relative strenght index indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private RelativeStrenghtIndex _rsiInd;
            
                    protected override void Init()
                    {
                        _rsiInd = GetIndicator&lt;RelativeStrenghtIndex&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Relative strenght index value: {0}", _rsiInd.SeriesRsi[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.RelativeStrenghtIndex.Init">
            <summary>
            Initiation
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.RelativeStrenghtIndex.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.RelativeStrenghtIndex.Period">
            <summary>
            Relative strenght index indicators period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.RelativeStrenghtIndex.AppliedPrice">
            <summary>
            Relative strenght index indicators applied price
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.RelativeStrenghtIndex.SeriesRsi">
            <summary>
            Relative strenght index indicators series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.RelativeStrenghtIndex.TotalPeriod">
            <summary>
            Total period for Relative strenght index indicator
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.RelativeStrenghtIndex.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.RelativeVigorIndex">
             <summary>
             Standart indicator Relative vigor index
             </summary>
             <example>
             Create Relative vigor index indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private RelativeVigorIndex _rviInd;
            
                    protected override void Init()
                    {
                        _rviInd = GetIndicator&lt;RelativeVigorIndex&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Relative vigor index signal value: {0}", _rviInd.SignalSeries[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.RelativeVigorIndex.Init">
            <summary>
            Initiation
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.RelativeVigorIndex.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.RelativeVigorIndex.Period">
            <summary>
            Relative vigor index indicators period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.RelativeVigorIndex.RviSeries">
            <summary>
            Relative vigor index indicators main series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.RelativeVigorIndex.SignalSeries">
            <summary>
            Relative vigor index indicators signal series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.RelativeVigorIndex.TotalPeriod">
            <summary>
            Total period for Relative vigor index indicator
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.RelativeVigorIndex.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.StandardDeviation">
             <summary>
             Standart indicator Standard deviation
             </summary>
             <example>
             Create Standard deviation indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private StandardDeviation _stdInd;
            
                    protected override void Init()
                    {
                        _stdInd = GetIndicator&lt;StandardDeviation&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Standard deviation value: {0}", _stdInd.SeriesStd[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.StandardDeviation.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.StandardDeviation.SeriesStd">
            <summary>
            Standard deviation indicators main series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.StandardDeviation.Period">
            <summary>
            Standard deviation indicators period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.StandardDeviation.Shift">
            <summary>
            Standard deviation indicators shift
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.StandardDeviation.Method">
            <summary>
            Standard deviation indicators moving avarage method
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.StandardDeviation.AppliedPrice">
            <summary>
            Standard deviation indicators applied price
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.StandardDeviation.TotalPeriod">
            <summary>
            Total period for Standard deviation indicator
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.StochasticOscillator">
             <summary>
             Standart indicator Stochastic oscillator
             </summary>
             <example>
             Create Stochastic oscillator indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private StochasticOscillator _stoInd;
            
                    protected override void Init()
                    {
                        _stoInd = GetIndicator&lt;StochasticOscillator&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Stochastic oscillator signal line value: {0}", _stoInd.SignalLine[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.StochasticOscillator.Init">
            <summary>
            Initiation
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.StochasticOscillator.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.StochasticOscillator.PeriodK">
            <summary>
            Stochastic oscillator indicators period K
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.StochasticOscillator.PeriodD">
            <summary>
            Stochastic oscillator indicators period K
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.StochasticOscillator.Slowing">
            <summary>
            Stochastic oscillator indicators slowing
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.StochasticOscillator.Method">
            <summary>
            Stochastic oscillator indicators moving average method
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.StochasticOscillator.PricePair">
            <summary>
            Stochastic oscillator indicators pair of prices
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.StochasticOscillator.MainLine">
            <summary>
            Stochastic oscillator indicators main series <see cref="T:IPro.Model.Programming.Indicators.IIndicatorSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.StochasticOscillator.SignalLine">
            <summary>
            Stochastic oscillator indicators signal line series <see cref="T:IPro.Model.Programming.Indicators.IIndicatorSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.StochasticOscillator.TotalPeriod">
            <summary>
            Total period for Stochastic oscillator indicator
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.StochasticOscillator.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.SupportAndResistance">
             <summary>
             Standart indicator Support and resistance
             </summary>
             <example>
             Create Support and resistance indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private SupportAndResistance _sarInd;
            
                    protected override void Init()
                    {
                        _sarInd = GetIndicator&lt;SupportAndResistance&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Support and resistance indicator top series value: {0}", _sarInd.TopSeries[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.SupportAndResistance.Init">
            <summary>
            Initiation
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.SupportAndResistance.Calculate(System.Int32,System.Int32)">
            <summary>
            Calculate and draw indicator values
            </summary>
            <param name="fromIndex">From index</param>
            <param name="toIndex">To index</param>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.SupportAndResistance.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.SupportAndResistance.Range">
            <summary>
            Support and resistance indicators range
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.SupportAndResistance.TopSeries">
            <summary>
            Support and resistance indicators top series <see cref="T:IPro.Model.Programming.Indicators.IIndicatorSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.SupportAndResistance.BottomSeries">
            <summary>
            Support and resistance indicators bottom series <see cref="T:IPro.Model.Programming.Indicators.IIndicatorSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.SupportAndResistance.TotalPeriod">
            <summary>
            Total period for Support and resistance indicator
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.SupportAndResistance.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.TimeSeriesForecast">
             <summary>
             Standart indicator Time series forecast
             </summary>
             <example>
             Create Time series forecast indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private TimeSeriesForecast _tsfInd;
            
                    protected override void Init()
                    {
                        _tsfInd = GetIndicator&lt;TimeSeriesForecast&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Time series forecast indicator main series value: {0}", _tsfInd.MainSeries[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.TimeSeriesForecast.Calculate(System.Int32,System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="fromIndex">From index</param>
            <param name="toIndex">To index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.TimeSeriesForecast.Period">
            <summary>
            Time series forecast indicators period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.TimeSeriesForecast.MainSeries">
            <summary>
            Time series forecast indicators main series <see cref="T:IPro.Model.Programming.Indicators.IIndicatorSeries"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.TimeSeriesForecast.TotalPeriod">
            <summary>
            Total period for Time series forecast indicator
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.TrendEnvelope">
             <summary>
             Standart indicator Trend envelope
             </summary>
             <example>
             Create Trend envelope indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private TrendEnvelope _teInd;
            
                    protected override void Init()
                    {
                        _teInd = GetIndicator&lt;TrendEnvelope&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Trend envelope indicator bottom series value: {0}", _teInd.SeriesDown[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.TrendEnvelope.Init">
            <summary>
            Initiation
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.TrendEnvelope.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.TrendEnvelope.Period">
            <summary>
            Trend envelope indicator period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.TrendEnvelope.Deviation">
            <summary>
            Trend envelope indicator deviation
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.TrendEnvelope.Shift">
            <summary>
            Trend envelope indicator shift
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.TrendEnvelope.Method">
            <summary>
            Trend envelope indicator moving average method
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.TrendEnvelope.AppliedPrice">
            <summary>
            Trend envelope indicator applied price
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.TrendEnvelope.SeriesUp">
            <summary>
            Trend envelope indicator top series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.TrendEnvelope.SeriesDown">
            <summary>
            Trend envelope indicator bottom series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.TrendEnvelope.TotalPeriod">
            <summary>
            Total period for Time series forecast indicator
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.TrendEnvelope.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.TrendPriceChannel">
             <summary>
             Standart indicator Trend price channel
             </summary>
             <example>
             Create Trend price channel indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private TrendPriceChannel _tpcInd;
            
                    protected override void Init()
                    {
                        _tpcInd = GetIndicator&lt;TrendPriceChannel&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Trend price channel indicator bottom series value: {0}", _tpcInd.DownSeries[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.TrendPriceChannel.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.TrendPriceChannel.Period">
            <summary>
            Trend price channel indicator period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.TrendPriceChannel.Shift">
            <summary>
            Trend price channel indicator shift
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.TrendPriceChannel.PricePair">
            <summary>
            Trend price channel indicators pair of prices
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.TrendPriceChannel.UpSeries">
            <summary>
            Trend price channel indicator top series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.TrendPriceChannel.DownSeries">
            <summary>
            Trend price channel indicator bottom series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.TrendPriceChannel.TotalPeriod">
            <summary>
            Total period for Trend price channel indicator
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.TrendPriceChannel.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.Volumes">
             <summary>
             Standart indicator Volumes
             </summary>
             <example>
             Create Volumes indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private Volumes _tpcInd;
            
                    protected override void Init()
                    {
                        _tpcInd = GetIndicator&lt;Volumes&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Volumes indicator bottom series value: {0}", _tpcInd.SeriesDown[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.Volumes.Calculate(System.Int32,System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="fromIndex">From index</param>
            <param name="toIndex">To index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Volumes.SeriesUp">
            <summary>
            Volumes indicator up series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.Volumes.SeriesDown">
            <summary>
            Volumes indicator down series
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.WilliamsPercentRange">
             <summary>
             Standart indicator Williams percent range
             </summary>
             <example>
             Create Williams percent range indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private WilliamsPercentRange _wprInd;
            
                    protected override void Init()
                    {
                        _wprInd = GetIndicator&lt;WilliamsPercentRange&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("Williams percent range indicator bottom series value: {0}", _wprInd.MainSeries[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.WilliamsPercentRange.Calculate(System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="index">Series index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.WilliamsPercentRange.Period">
            <summary>
            Williams percent range indicators period
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.WilliamsPercentRange.MainSeries">
            <summary>
            Williams percent range main series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.WilliamsPercentRange.TotalPeriod">
            <summary>
            Total period for Williams percent range indicator
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.WilliamsPercentRange.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="T:IPro.Model.Programming.Indicators.Standard.ZigZag">
             <summary>
             Standart indicator ZigZag
             </summary>
             <example>
             Create ZigZag indicator in the trade strategy 
             <code>
            using IPro.Model.Programming.TradeSystems;
            using IPro.Model.Programming.Indicators.Standard;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("CreateIndicator")]
                public class CreateIndicator : TradeSystem
                {
                    private ZigZag _zzInd;
            
                    protected override void Init()
                    {
                        _zzInd = GetIndicator&lt;ZigZag&gt;(Instrument.Id, Timeframe);
                    }
            
                    protected override void NewBar()
                    {
                       Print("ZigZag indicator main series value: {0}", _zzInd.MainIndicatorSeries[Bars.Range.To-1]);
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.ZigZag.Init">
            <summary>
            Initiation
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.Indicators.Standard.ZigZag.Calculate(System.Int32,System.Int32)">
            <summary>
            Calculate indicator values
            </summary>
            <param name="fromIndex">From index</param>
            <param name="toIndex">To index</param>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.ZigZag.ExtDepth">
            <summary>
            ZigZag indicator depth
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.ZigZag.ExtDeviation">
            <summary>
            ZigZag indicator deviation
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.ZigZag.ExtBackStep">
            <summary>
            ZigZag indicator back step
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.ZigZag.MainIndicatorSeries">
            <summary>
            ZigZag indicator main series
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.ZigZag.TotalPeriod">
            <summary>
            Total period for ZigZag indicator
            </summary>
            <returns>ZigZig indicators back step</returns>
        </member>
        <member name="P:IPro.Model.Programming.Indicators.Standard.ZigZag.DependsOnPreviousData">
            <summary>
            Indicates whether indicator should be recalculated if historical data is changed
            </summary>
            <returns>Is indicator should be recalculated if data is changed</returns>
        </member>
        <member name="T:IPro.Model.Programming.ISeriesFunctions">
            <summary>
            Contains set of methods to be performed on data series
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.ISeriesFunctions.Highest(System.Int32,System.Int32,IPro.Model.Programming.Indicators.PriceMode)">
            <summary>
            Gets index of bar with max applied price. Main series are used as the source
            </summary>
            <param name="index">Last index of range</param>
            <param name="period">Number of bars to consider prior to <paramref name="index" /></param>
            <param name="appliedPrice">Type of price to be applied to</param>
            <returns>Index of bar with the highest price</returns>
            <example>
            To get bar index with the higest close price for the latest 14 bars
            <code>
            var highestIndex = Series.Highest(Bars.Range.To, 14, PriceMode.Close);
            var highestPrice = Bars[highestIndex].Close;
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.ISeriesFunctions.Highest(IPro.Model.Programming.ISeries{IPro.Model.Client.MarketData.Bar},System.Int32,System.Int32,IPro.Model.Programming.Indicators.PriceMode)">
            <summary>
            Gets index of bar with max applied price. Works on specific bar series
            </summary>
            <param name="barSeries">Series to apply to</param>
            <param name="index">Last index of range</param>
            <param name="period">Number of bars to consider prior to <paramref name="index" /></param>
            <param name="appliedPrice">Type of price to be applied to</param>
            <returns>Index of bar with the highest price</returns>
            <example>
            To get the higest price for the latest 14 hours
            <code>
            var series = GetCustomSeries(Instrument.Id, Period.H1);
            var highestIndex = Series.Highest(series, series.Range.To, 14, PriceMode.High);
            var highestPrice = series[highestIndex].High;
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.ISeriesFunctions.Highest(IPro.Model.Programming.ISeries{System.Double},System.Int32,System.Int32)">
            <summary>
            Gets index of max value within double series
            </summary>
            <param name="series">Series to apply to</param>
            <param name="index">Last index of range</param>
            <param name="period">Number of bars to consider prior to <paramref name="index" /></param>
            <returns>Index of the highest value</returns>
            <example>
            To get the higest price for the latest 14 hours
            <code>
            var mfi = GetIndicator&lt;MoneyFlowIndex&gt;(Instrument.Id, Timeframe, 21);
            var highestIndex = Series.Highest(mfi.MainSeries, mfi.MainSeries.Range.To, 21);
            var highestPrice = mfi.MainSeries[highestIndex];  
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.ISeriesFunctions.Lowest(System.Int32,System.Int32,IPro.Model.Programming.Indicators.PriceMode)">
            <summary>
            Gets index of bar with min applied price. Main series are used as the source
            </summary>
            <param name="index">Last index of range</param>
            <param name="period">Number of bars to consider prior to <paramref name="index" /></param>
            <param name="appliedPrice">Type of price to be applied to</param>
            <returns>Index of bar with the lowest price</returns>
            <example>
            To get bar index with the lowest close price for the latest 14 bars
            <code>
            var lowestIndex = Series.Lowest(Bars.Range.To, 14, PriceMode.Close);
            var lowestPrice = Bars[lowestIndex].Close;
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.ISeriesFunctions.Lowest(IPro.Model.Programming.ISeries{IPro.Model.Client.MarketData.Bar},System.Int32,System.Int32,IPro.Model.Programming.Indicators.PriceMode)">
            <summary>
            Gets index of bar with min applied price. Works on specific bar series
            </summary>
            <param name="barSeries">Series to apply to</param>
            <param name="index">Last index of range</param>
            <param name="period">Number of bars to consider prior to <paramref name="index" /></param>
            <param name="appliedPrice">Type of price to be applied to</param>
            <returns>Index of bar with the lowest price</returns>
            <example>
            To get the lowest price for the latest 14 hours
            <code>
            var series = GetCustomSeries(Instrument.Id, Period.H1);
            var lowestIndex = Series.Lowest(series, series.Range.To, 14, PriceMode.High);
            var lowestPrice = series[lowestIndex].High;
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.ISeriesFunctions.Lowest(IPro.Model.Programming.ISeries{System.Double},System.Int32,System.Int32)">
            <summary>
            Gets index of min value within double series
            </summary>
            <param name="series">Series to apply to</param>
            <param name="index">Last index of range</param>
            <param name="period">Number of bars to consider prior to <paramref name="index" /></param>
            <returns>Index of the lowest value</returns>
            <example>
            To get the lowest price last 14 MFI values
            <code>
            var mfi = GetIndicator&lt;MoneyFlowIndex&gt;(Instrument.Id, Timeframe, 21);
            var lowestIndex = Series.Lowest(mfi.MainSeries, mfi.MainSeries.Range.To, 21);
            var lowestPrice = mfi.MainSeries[lowestIndex];  
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.ISeriesFunctions.Ma(System.Int32,System.Int32,IPro.Model.Programming.Indicators.PriceMode,IPro.Model.Programming.Indicators.MaMethods)">
            <summary>
            Gets MA value for main bar series
            </summary>
            <param name="index">Last index of range</param>
            <param name="period">Number of bars to consider prior to <paramref name="index" /></param>
            <param name="appliedPrice">Type of price to be applied to</param>
            <param name="method">Moving average method</param>
            <returns>Moving average result</returns>
            <example>
            To get EMA for the last 15 bars
            <code>
            var result = Series.Ma(Bars.Range.To, 15, PriceMode.Close, MaMethods.Ema);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.ISeriesFunctions.Ma(IPro.Model.Programming.ISeries{IPro.Model.Client.MarketData.Bar},System.Int32,System.Int32,IPro.Model.Programming.Indicators.PriceMode,IPro.Model.Programming.Indicators.MaMethods)">
            <summary>
            Gets MA value for bar series
            </summary>
            <param name="barSeries">Series to apply to</param>
            <param name="index">Last index of range</param>
            <param name="period">Number of bars to consider prior to <paramref name="index" /></param>
            <param name="appliedPrice">Type of price to be applied to</param>
            <param name="method">Moving average method</param>
            <returns>Moving average result</returns>
            <example>
            To get EMA for the last 15 hours
            <code>
            var series = GetCustomSeries(Instrument.Id, Period.H1);
            var result = Series.Ma(series, series.Range.To, 15, PriceMode.Close, MaMethods.Ema);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.ISeriesFunctions.Ma(IPro.Model.Programming.ISeries{System.Double},System.Int32,System.Int32,IPro.Model.Programming.Indicators.MaMethods)">
            <summary>
            Gets MA value for double series
            </summary>
            <param name="series">Series to apply to</param>
            <param name="index">Last index of range</param>
            <param name="period">Number of bars to consider prior to <paramref name="index" /></param>
            <param name="method">Moving average method</param>
            <returns>Moving average result</returns>
            <example>
            To get EMA for the last 15 MFI values
            <code>
            var mfi = GetIndicator&lt;MoneyFlowIndex&gt;(Instrument.Id, Timeframe, 21);
            var result = Series.Ma(mfi.MainSeries, mfi.MainSeries.Range.To, 15, PriceMode.Close, MaMethods.Ema);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.ISeriesFunctions.Sma(System.Int32,System.Int32,IPro.Model.Programming.Indicators.PriceMode)">
            <summary>
            Gets SMA value for main bar series
            </summary>
            <param name="index">Last index of range</param>
            <param name="period">Number of bars to consider prior to <paramref name="index" /></param>
            <param name="appliedPrice">Type of price to be applied to</param>
            <returns>Moving average result</returns>
            <example>
            To get SMA for the last 15 bars
            <code>
            var result = Series.Sma(Bars.Range.To, 15, PriceMode.Close);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.ISeriesFunctions.Sma(IPro.Model.Programming.ISeries{IPro.Model.Client.MarketData.Bar},System.Int32,System.Int32,IPro.Model.Programming.Indicators.PriceMode)">
            <summary>
            Gets SMA value for bar series
            </summary>
            <param name="barSeries">Series to apply to</param>
            <param name="index">Last index of range</param>
            <param name="period">Number of bars to consider prior to <paramref name="index" /></param>
            <param name="appliedPrice">Type of price to be applied to</param>
            <returns>Moving average result</returns>
            <example>
            To get SMA for the last 15 hours
            <code>
            var series = GetCustomSeries(Instrument.Id, Period.H1);
            var result = Series.Sma(series, series.Range.To, 15, PriceMode.Close);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.ISeriesFunctions.Sma(IPro.Model.Programming.ISeries{System.Double},System.Int32,System.Int32)">
            <summary>
            Gets SMA value for double series
            </summary>
            <param name="series">Series to apply to</param>
            <param name="index">Last index of range</param>
            <param name="period">Number of bars to consider prior to <paramref name="index" /></param>
            <returns>Moving average result</returns>
            <example>
            To get SMA for the last 15 MFI values
            <code>
            var mfi = GetIndicator&lt;MoneyFlowIndex&gt;(Instrument.Id, Timeframe, 21);
            var result = Series.Sma(mfi.MainSeries, mfi.MainSeries.Range.To, 15, PriceMode.Close);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.ISeriesFunctions.Ema(System.Int32,System.Int32,IPro.Model.Programming.Indicators.PriceMode)">
            <summary>
            Gets EMA value for main bar series
            </summary>
            <param name="index">Last index of range</param>
            <param name="period">Number of bars to consider prior to <paramref name="index" /></param>
            <param name="appliedPrice">Type of price to be applied to</param>
            <returns>Moving average result</returns>
            <example>
            To get EMA for the last 15 bars
            <code>
            var result = Series.Ema(Bars.Range.To, 15, PriceMode.Close);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.ISeriesFunctions.Ema(IPro.Model.Programming.ISeries{IPro.Model.Client.MarketData.Bar},System.Int32,System.Int32,IPro.Model.Programming.Indicators.PriceMode)">
            <summary>
            Gets EMA value for bar series
            </summary>
            <param name="barSeries">Series to apply to</param>
            <param name="index">Last index of range</param>
            <param name="period">Number of bars to consider prior to <paramref name="index" /></param>
            <param name="appliedPrice">Type of price to be applied to</param>
            <returns>Moving average result</returns>
            <example>
            To get EMA for the last 15 hours
            <code>
            var series = GetCustomSeries(Instrument.Id, Period.H1);
            var result = Series.Ema(series, series.Range.To, 15, PriceMode.Close);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.ISeriesFunctions.Ema(IPro.Model.Programming.ISeries{System.Double},System.Int32,System.Int32)">
            <summary>
            Gets EMA value for double series
            </summary>
            <param name="series">Series to apply to</param>
            <param name="index">Last index of range</param>
            <param name="period">Number of bars to consider prior to <paramref name="index" /></param>
            <returns>Moving average result</returns>
            <example>
            To get EMA for the last 15 MFI values
            <code>
            var mfi = GetIndicator&lt;MoneyFlowIndex&gt;(Instrument.Id, Timeframe, 21);
            var result = Series.Ema(mfi.MainSeries, mfi.MainSeries.Range.To, 15, PriceMode.Close);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.ISeriesFunctions.Smma(System.Int32,System.Int32,IPro.Model.Programming.Indicators.PriceMode)">
            <summary>
            Gets SMMA value for main bar series
            </summary>
            <param name="index">Last index of range</param>
            <param name="period">Number of bars to consider prior to <paramref name="index" /></param>
            <param name="appliedPrice">Type of price to be applied to</param>
            <returns>Moving average result</returns>
            <example>
            To get SMMA for the last 15 bars
            <code>
            var result = Series.Smma(Bars.Range.To, 15, PriceMode.Close);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.ISeriesFunctions.Smma(IPro.Model.Programming.ISeries{IPro.Model.Client.MarketData.Bar},System.Int32,System.Int32,IPro.Model.Programming.Indicators.PriceMode)">
            <summary>
            Gets SMMA value for bar series
            </summary>
            <param name="barSeries">Series to apply to</param>
            <param name="index">Last index of range</param>
            <param name="period">Number of bars to consider prior to <paramref name="index" /></param>
            <param name="appliedPrice">Type of price to be applied to</param>
            <returns>Moving average result</returns>
            <example>
            To get SMMA for the last 15 hours
            <code>
            var series = GetCustomSeries(Instrument.Id, Period.H1);
            var result = Series.Smma(series, series.Range.To, 15, PriceMode.Close);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.ISeriesFunctions.Smma(IPro.Model.Programming.ISeries{System.Double},System.Int32,System.Int32)">
            <summary>
            Gets SMMA value for double series
            </summary>
            <param name="series">Series to apply to</param>
            <param name="index">Last index of range</param>
            <param name="period">Number of bars to consider prior to <paramref name="index" /></param>
            <returns>Moving average result</returns>
            <example>
            To get SMMA for the last 15 MFI values
            <code>
            var mfi = GetIndicator&lt;MoneyFlowIndex&gt;(Instrument.Id, Timeframe, 21);
            var result = Series.Smma(mfi.MainSeries, mfi.MainSeries.Range.To, 15, PriceMode.Close);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.ISeriesFunctions.Lwma(System.Int32,System.Int32,IPro.Model.Programming.Indicators.PriceMode)">
            <summary>
            Gets LWMA value for main bar series
            </summary>
            <param name="index">Last index of range</param>
            <param name="period">Number of bars to consider prior to <paramref name="index" /></param>
            <param name="appliedPrice">Type of price to be applied to</param>
            <returns>Moving average result</returns>
            <example>
            To get LWMA for the last 15 bars
            <code>
            var result = Series.Lwma(Bars.Range.To, 15, PriceMode.Close);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.ISeriesFunctions.Lwma(IPro.Model.Programming.ISeries{IPro.Model.Client.MarketData.Bar},System.Int32,System.Int32,IPro.Model.Programming.Indicators.PriceMode)">
            <summary>
            Gets LWMA value for bar series
            </summary>
            <param name="barSeries">Series to apply to</param>
            <param name="index">Last index of range</param>
            <param name="period">Number of bars to consider prior to <paramref name="index" /></param>
            <param name="appliedPrice">Type of price to be applied to</param>
            <returns>Moving average result</returns>
            <example>
            To get LWMA for the last 15 hours
            <code>
            var series = GetCustomSeries(Instrument.Id, Period.H1);
            var result = Series.Lwma(series, series.Range.To, 15, PriceMode.Close);
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.ISeriesFunctions.Lwma(IPro.Model.Programming.ISeries{System.Double},System.Int32,System.Int32)">
            <summary>
            Gets LWMA value for double series
            </summary>
            <param name="series">Series to apply to</param>
            <param name="index">Last index of range</param>
            <param name="period">Number of bars to consider prior to <paramref name="index" /></param>
            <returns>Moving average result</returns>
            <example>
            To get LWMA for the last 15 MFI values
            <code>
            var mfi = GetIndicator&lt;MoneyFlowIndex&gt;(Instrument.Id, Timeframe, 21);
            var result = Series.Smma(mfi.MainSeries, mfi.MainSeries.Range.To, 15, PriceMode.Close);
            </code>
            </example>
        </member>
        <member name="T:IPro.Model.Programming.LocalizableParameterAttribute">
            <summary>
            Localizable version of <see cref="T:IPro.Model.Programming.ParameterAttribute"/>
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.ParameterAttribute">
            <summary>
            Indicates that the script property will be exposed to the user interface
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.ParameterAttribute.#ctor(System.Int32)">
            <summary>
            Parameter attribute 
            </summary>
            <param name="order">Order</param>
        </member>
        <member name="M:IPro.Model.Programming.ParameterAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Parameter attribute 
            </summary>
            <param name="name">Friendly name for the parameter</param>
            <param name="order">Order</param>
        </member>
        <member name="P:IPro.Model.Programming.ParameterAttribute.Name">
            <summary>
            Visible name
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.ParameterAttribute.DefaultValue">
            <summary>
            Default value
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.ParameterAttribute.MinValue">
            <summary>
            Min value
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.ParameterAttribute.MaxValue">
            <summary>
            Max value
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.ParameterAttribute.Mask">
            <summary>
            Displayed mask
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.ParameterAttribute.Increment">
            <summary>
            Increment
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.ParameterAttribute.GroupId">
            <summary>
            Group ID
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.ParameterAttribute.Header">
            <summary>
            Group ID
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.ParameterAttribute.Postfix">
            <summary>
            Text after edit box
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.ParameterAttribute.IsLot">
            <summary>
            Built in parameter "Lot" with comboeditbox
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.ParameterAttribute.Order">
            <summary>
            Order of parameter
            </summary>
            <exclude />
        </member>
        <member name="M:IPro.Model.Programming.LocalizableParameterAttribute.#ctor(System.String,System.Type,System.Int32)">
            <summary>
            Localizable parameter attribute
            </summary>
            <param name="nameProperty">Property name</param>
            <param name="resourcesType">Type of resources</param>
            <param name="order">Order</param>
        </member>
        <member name="T:IPro.Model.Programming.Parameter">
             <summary>
             Represents parameter property
             </summary>
             <example>
             Usage of parameters in a trade strategy
             <code>
            using IPro.Model.Programming;
            using IPro.Model.Programming.TradeSystems;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("ExampleTS")]
                public class ExampleTradeStr : TradeSystem
                {
                    [Parameter("Use Moving Average 1", DefaultValue = true)]
                    public bool UseFirstMA { get; set; }
                    [Parameter("Period", DefaultValue = 10, MinValue = 1)]
                    public int PeriodMA1 { get; set; }
                    [Parameter("Shift", DefaultValue = 0, MinValue = -1000, MaxValue = 1000)]
                    public int ShiftMA1 { get; set; }
            
                    [Parameter("Use Moving Average 2", DefaultValue = true)]
                    public bool UseSecondMA { get; set; }
                    [Parameter("Period", DefaultValue = 20, MinValue = 1)]
                    public int PeriodMA2 { get; set; }
                    [Parameter("Shift", DefaultValue = 0, MinValue = -1000, MaxValue = 1000)]
                    public int ShiftMA2 { get; set; }
                }
            }
             </code>
             </example>
        </member>
        <member name="P:IPro.Model.Programming.Parameter.Name">
            <summary>
            Visible name
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Parameter.Header">
            <summary>
            Header above
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Parameter.Postfix">
            <summary>
            Postfix
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Parameter.IsLot">
            <summary>
            Is built in Lot type
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Parameter.DefaultValue">
            <summary>
            Default value
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Parameter.MinValue">
            <summary>
            Min value
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Parameter.MaxValue">
            <summary>
            Max value
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Parameter.Mask">
            <summary>
            Displayed mask
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Parameter.Increment">
            <summary>
            Increment
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Parameter.Order">
            <summary>
            Order of parameter
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Parameter.GroupId">
            <summary>
            Id of group
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Parameter.Type">
            <summary>
            Property type
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Parameter.Key">
            <summary>
            Property key (name)
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.Parameter.Value">
            <summary>
            Propery value
            </summary>
        </member>
        <member name="E:IPro.Model.Programming.Parameter.Changed">
            <summary>
            Changed event
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.ParameterCollection">
            <summary>
            Set of parameters 
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.ParameterCollection.#ctor">
            <summary>
            Set of parameters 
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.ParameterCollection.#ctor(System.Type)">
            <summary>
            Set of parameters for indicator
            </summary>
            <param name="indicatorType">Type of indicator</param>
        </member>
        <member name="M:IPro.Model.Programming.ParameterCollection.#ctor(IPro.Model.Programming.ParameterCollection,IPro.Model.Programming.ProgramBase)">
            <summary>
            
            </summary>
            <param name="other">Different collection of parameters</param>
            <param name="program">Trade strategy <see cref="T:IPro.Model.Programming.ProgramBase"/></param>
        </member>
        <member name="M:IPro.Model.Programming.ParameterCollection.#ctor(IPro.Model.Client.DataAccess.ParameterState[])">
            <summary>
            Set of parameters
            </summary>
            <param name="state">List of <see cref="T:IPro.Model.Client.DataAccess.ParameterState"/></param>
        </member>
        <member name="M:IPro.Model.Programming.ParameterCollection.Clone">
            <summary>
            Method to clone <see cref="T:IPro.Model.Programming.ParameterCollection"/>
            </summary>
            <returns>Cloned parameter collection</returns>
        </member>
        <member name="P:IPro.Model.Programming.ParameterCollection.Parameters">
            <summary>
            List of parameters
            </summary>
        </member>
        <member name="E:IPro.Model.Programming.ParameterCollection.Changed">
            <summary>
            Parameters changed event
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.ParametersGroups">
            <summary>
            Represents parameters groups
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.ParametersGroups.#ctor">
            <summary>
            Parameters groups
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.ParametersGroups.#ctor(System.Type)">
            <summary>
            Add parameters groups by type
            </summary>
            <param name="type">Type</param>
        </member>
        <member name="M:IPro.Model.Programming.ParametersGroups.#ctor(IPro.Model.Programming.ParametersGroups)">
            <summary>
            Add parameters groups 
            </summary>
            <param name="parametersGroups">Groups of parameters</param>
        </member>
        <member name="M:IPro.Model.Programming.ParametersGroups.#ctor(System.Collections.Generic.IEnumerable{IPro.Model.Client.DataAccess.ParametersGroupState})">
            <summary>
            Add list of parameters groups
            </summary>
            <param name="parametersGroups">List of groups of parameters</param>
        </member>
        <member name="M:IPro.Model.Programming.ParametersGroups.ToState">
            <summary>
            Parameters group state
            </summary>
            <returns>List of <see cref="T:IPro.Model.Client.DataAccess.ParametersGroupState"/></returns>
        </member>
        <member name="P:IPro.Model.Programming.ParametersGroups.Children">
            <summary>
            List of parameter group
            </summary>
        </member>
        <member name="T:IPro.Model.Client.MarketData.DelegatePriceValues">
            <summary>
            <see cref="T:IPro.Model.MarketData.IPriceValues`1"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Client.MarketData.DelegatePriceValues.Ask">
            <summary>
            <see cref="T:IPro.Model.MarketData.IPriceValues`1"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Client.MarketData.DelegatePriceValues.Bid">
            <summary>
            <see cref="T:IPro.Model.MarketData.IPriceValues`1"/>
            </summary>
        </member>
        <member name="P:IPro.Model.Client.MarketData.DelegatePriceValues.Item(IPro.Model.MarketData.PriceType)">
            <summary>
            <see cref="T:IPro.Model.MarketData.IPriceValues`1"/>
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.ReferenceIndicatorAttribute">
            <summary>
            Specifies indicator to reference
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.ReferenceIndicatorAttribute.#ctor(System.String)">
            <summary>
            Reference indicator attribute
            </summary>
            <param name="indicatorName">Name of indicator</param>
        </member>
        <member name="P:IPro.Model.Programming.ReferenceIndicatorAttribute.IndicatorName">
            <summary>
            Referenced indicator name
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.ReferenceLibraryAttribute">
            <summary>
            Specifies library to reference
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.ReferenceLibraryAttribute.#ctor(System.String)">
            <summary>
            Reference library attribute
            </summary>
            <param name="libraryName">Name of library without extentions</param>
        </member>
        <member name="P:IPro.Model.Programming.ReferenceLibraryAttribute.LibraryName">
            <summary>
            Referenced library filename without extension
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.TradeSystems.CloseOrder">
             <summary>
             Closed order for <see cref="T:IPro.Model.Programming.TradeSystems.IPosition"/>
             </summary>
             <example>
             To get all closed orders for position
             <code>
            using IPro.Model.Programming.TradeSystems;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("BuyEveryBar")]
                public class BuyEveryBar : TradeSystem
                {
                    protected override void Init()
                    {
                        Print("This TS will open Buy position every new bar");
                    }
            
                    protected override void NewBar()
                    {
                         var pos = Trade.Buy(Instrument.Id, 0.2M);
                         Trade.CloseMarketPosition(pos.Id, 0.1M, Instrument.Bid, 0, "Closing 0.1");
                         Trade.CloseMarketPosition(pos.Id, 0.1M, Instrument.Bid, 0, "Closing another 0.1");
                         foreach (var order in pos.GetCloseOrders())
                         {
                             Print("Position is closed by {0} at {1}", order.Lot, order.Price);
                         }
                    }
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.CloseOrder.#ctor(System.Guid,System.Decimal,System.DateTime,System.Double,System.Decimal)">
            <summary>
            Closed order for position
            </summary>
            <param name="positionId">Id of position</param>
            <param name="lot">Lot size</param>
            <param name="time">Time</param>
            <param name="price">Price</param>
            <param name="profit">Profit</param>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.CloseOrder.PositionId">
            <summary>
            Id of position
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.CloseOrder.Lot">
            <summary>
            Lot size
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.CloseOrder.Time">
            <summary>
            Time
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.CloseOrder.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.CloseOrder.Profit">
            <summary>
            Profit
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.TradeSystems.IPosition">
            <summary>
            A read-only interface that represents a position in the system
            </summary>
            <example>
            Get position open time
            <code>
            protected override void NewBar()
            {
                var pos = Trade.Buy(Instrument.Id, 0.01);
                Print("Poition number {0} was opend at {1}", pos.Number, pos.OpenTime);
            }
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.IPosition.GetCloseOrders">
            <summary>
            Return set of closed orders (in case position is partially closed)
            </summary>
            <returns>List of close orders</returns>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.IPosition.Id">
            <summary>
            Unique position id
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.IPosition.InstrumentId">
            <summary>
            Position instrument id
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.IPosition.Type">
            <summary>
            Position execution rule
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.IPosition.Number">
            <summary>
            Unique position number
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.IPosition.Lots">
            <summary>
            Position lots
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.IPosition.OpenTime">
            <summary>
            Time when position is opened
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.IPosition.CloseTime">
            <summary>
            Time when position is closed
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.IPosition.ExpireTime">
            <summary>
            Expiration time for pending position
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.IPosition.StopLoss">
            <summary>
            Position stoploss
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.IPosition.TakeProfit">
            <summary>
            Position takeprofit
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.IPosition.OpenPrice">
            <summary>
            Position open price
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.IPosition.ClosePrice">
            <summary>
            Position close price
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.IPosition.Comment">
            <summary>
            Returns comment associated with position
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.IPosition.MagicNumber">
            <summary>
            Returns magic number to distinguish positions
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.IPosition.Margin">
            <summary>
            Margin used for position opening
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.IPosition.Comission">
            <summary>
            Comission for position opening
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.IPosition.Swap">
            <summary>
            Position swap 
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.IPosition.State">
            <summary>
            Position current state
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.IPosition.Pips">
            <summary>
            The difference in points between the current price and the opening price
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.IPosition.PipValue">
            <summary>
            Cost of every pip in collection
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.IPosition.Profit">
            <summary>
            Profit
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.TradeSystems.Stops">
            <summary>
            Positions stops
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.Stops.InPips(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates position stops relative to the price in pips
            </summary>
            <param name="stopLoss">Stop loss level in pips</param>
            <param name="takeProfit">Take profit level in pips</param>
            <returns><see cref="T:IPro.Model.Programming.TradeSystems.StopsInPips"/></returns>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.Stops.InPrice(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Creates position stops in price
            </summary>
            <param name="stopLoss">Stop loss level</param>
            <param name="takeProfit">Take profit level</param>
            <returns><see cref="T:IPro.Model.Programming.TradeSystems.StopsInPrice"/></returns>
        </member>
        <member name="T:IPro.Model.Programming.TradeSystems.StopsInPips">
            <summary>
            Position stoploss and takeprofit in pips
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.StopsInPips.StopLoss">
            <summary>
            Position stoploss in pips
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.StopsInPips.TakeProfit">
            <summary>
            Position takeprofit in pips
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.TradeSystems.StopsInPrice">
            <summary>
            Position stoploss and takeprofit in price value
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.StopsInPrice.StopLoss">
            <summary>
            Position stoploss in price value
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.StopsInPrice.TakeProfit">
            <summary>
            Position takeprofit in price value
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.TradeSystems.TradeResult">
            <summary>
            Result of trade
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.TradeResult.#ctor(IPro.Model.Programming.TradeSystems.IPosition)">
            <summary>
            Get trade resault for position
            </summary>
            <param name="position">Position</param>
            <example>
            Chech for posion opened successfully
            <code>
            var result =  Trade.Buy(Instrument.Id, 0.01);
            if (result.IsSuccessful) Print("Position opened successfully");
            </code>
            </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.TradeResult.#ctor(IPro.Model.Exceptions.ServerErrorCode)">
            <summary>
            Get trade result by error code
            </summary>
            <param name="code">Server error code</param>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.TradeResult.Position">
            <summary>
            Resulting position
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.TradeResult.Error">
            <summary>
            Error occurred during operation (if any)
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.TradeResult.IsSuccessful">
            <summary>
            Indicates whether request was successful
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.TradeSystems.TradeSystem">
             <summary>
             Base class for trade systems
             </summary>
             <example>
             Creates trading strategy
             <code>
            using IPro.Model.Programming.TradeSystems;
            
            namespace IPro.TradeSystems
            {
                [TradeSystem("BuyEveryBar")]
                public class BuyEveryBar : TradeSystem
                {
                    protected override void Init()
                    {
                        Print("This TS will open Buy position every new bar");
                    }
            
                    protected override void NewBar()
                    {
                        Trade.Buy(Instrument.Id, 0.1M);
                    }
            
                }
            }
             </code>
             </example>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.TradeSystem.NewBar">
            <summary>
            Occurs on new bar event
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.TradeSystem.NewQuote">
            <summary>
            Occurs on new quote event
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.TradeSystem.ConnectionChanged">
            <summary>
            Called when connection is lost/restored
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.TradeSystem.PositionChanged(IPro.Model.Programming.TradeSystems.IPosition,IPro.Model.Client.Trade.ModificationType)">
            <summary>
            Position changed event
            </summary>
            <param name="position">Position</param>
            <param name="type">Modification type</param>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.TradeSystem.Init(IPro.Model.Programming.TradeSystems.TradeSystemInfo,IPro.Model.Client.Chart.IBarSeries,IPro.Model.Programming.Chart.ITools,IPro.Model.Client.Development.ProgramManagement.IProgramDataProvider,IPro.Model.Client.Development.Indicators.IIndicatorsManager,IPro.Model.Client.Development.ProgramManagement.IExecutionController,IPro.Model.Client.Chart.IChart)">
            <exclude />
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.TradeSystem.OnDispose">
            <exclude />
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.TradeSystem.Info">
            <exclude />
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.TradeSystem.Trade">
            <summary>
            Trade operations
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.TradeSystem.ExecutionMode">
            <summary>
            Execution mode
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.TradeSystem.IsConnected">
            <summary>
            Indicates whether terminal is connacted to servrer
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.TradeSystems.TradeSystemAttribute">
            <summary>
            Indicates trade system
            <see cref="T:IPro.Model.Programming.TradeSystems.TradeSystem"/>
            </summary>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.TradeSystemAttribute.#ctor(System.String)">
            <summary>
            Trade system attribute
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.TradeSystemAttribute.Name">
            <summary>
            Trade system name
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.TradeSystemAttribute.Description">
            <summary>
            Trade system short description
            </summary>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.TradeSystemAttribute.HistoryDepth">
            <summary>
            Loadable amount of historical data
            </summary>
        </member>
        <member name="T:IPro.Model.Programming.TradeSystems.TradeSystemInfo">
            <summary>
            Trade system extracted information
            </summary>
            <exclude />
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.TradeSystemInfo.AddParameterSet(IPro.Model.Client.Development.ProgramManagement.ParameterSet)">
            <summary>
            Add set of parameters to trade system
            </summary>
            <param name="set">Set of parameter <see cref="T:IPro.Model.Client.Development.ProgramManagement.ParameterSet"/></param>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.TradeSystemInfo.RemoveParameterSet(IPro.Model.Client.Development.ProgramManagement.ParameterSet)">
            <summary>
            Remove set of parameters from trade system
            </summary>
            <param name="set">Set of parameter <see cref="T:IPro.Model.Client.Development.ProgramManagement.ParameterSet"/></param>
        </member>
        <member name="M:IPro.Model.Programming.TradeSystems.TradeSystemInfo.Clone">
            <summary>
            Clone trade system
            </summary>
            <returns>Dublicated trade system</returns>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.TradeSystemInfo.TypeAssemblyName">
            <summary>
            Inner trade system's assembly name
            </summary>
            <returns>Trade system's inner assembly name</returns>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.TradeSystemInfo.TypeName">
            <summary>
            Inner trade system's type name
            </summary>
            <returns>Trade system's inner type name</returns>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.TradeSystemInfo.Id">
            <summary>
            Trade system Id
            </summary>
            <returns>Guid of trade system</returns>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.TradeSystemInfo.ParentId">
            <summary>
            Id of a parent trade system 
            </summary>
            <returns>Id of a parent trade system </returns>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.TradeSystemInfo.IsStandard">
            <summary>
            Is standard
            </summary>
            <returns>True if trade system is buit in</returns>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.TradeSystemInfo.IsBuiltIn">
            <summary>
            Indicates if trade system is standard
            </summary>
            <returns>True if trade system is buit in</returns>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.TradeSystemInfo.Name">
            <summary>
            Trade system name
            </summary>
            <returns>Name of trade system </returns>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.TradeSystemInfo.Description">
            <summary>
            Trade system description
            </summary>
            <returns>Description of trade system</returns>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.TradeSystemInfo.Properties">
            <summary>
            Trade system properties
            </summary>
            <returns>Collection of parameter <see cref="T:IPro.Model.Programming.ParameterCollection"/></returns>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.TradeSystemInfo.ParametersGroups">
            <summary>
            Trade system parameters groups
            </summary>
            <returns>Groups of trade system parameters <see cref="P:IPro.Model.Programming.TradeSystems.TradeSystemInfo.ParametersGroups"/>&gt;</returns>
        </member>
        <member name="P:IPro.Model.Programming.TradeSystems.TradeSystemInfo.ParameterSets">
            <summary>
            Available sets
            </summary>
            <returns>Readonly list of available parameter sets <see cref="T:IPro.Model.Client.Development.ProgramManagement.ParameterSet"/></returns>
        </member>
        <member name="T:IPro.Model.Client.ResourcesLocalization.IndicatorResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.AcceleratorOscillator_Description">
             <summary>
               Looks up a localized string similar to Accelerator Oscillator
            is an indicator from the Bill Williams&apos; system. It measures the acceleration and the deceleration of the current market driving force. This indicator will change its direction prior to the change of driving force what will forecast the change of the price direction in its turn..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.AcceleratorOscillator_Name">
            <summary>
              Looks up a localized string similar to Accelerator Oscillator.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.AcceleratorOscillator_Series_Down">
            <summary>
              Looks up a localized string similar to Value Down.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.AcceleratorOscillator_Series_Up">
            <summary>
              Looks up a localized string similar to Value Up.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.AccumulationDistribution_Description">
             <summary>
               Looks up a localized string similar to Accumulation/Distribution
            is an indicator that helps to confirm or to deny the strength of the current trend. 
            The accumulation/distribution line connects the volume and the price change that followed this volume..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.AccumulationDistribution_Name">
            <summary>
              Looks up a localized string similar to Accumulation/Distribution.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Alligator_Description">
             <summary>
               Looks up a localized string similar to Alligator
            is an indicator from the Bill Williams&apos; system. It is a combination of moving averages showing the interaction of different periods of time..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Alligator_Name">
            <summary>
              Looks up a localized string similar to Alligator.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Alligator_Parameter_JawsPeriod">
            <summary>
              Looks up a localized string similar to Jaws Period.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Alligator_Parameter_JawsShift">
            <summary>
              Looks up a localized string similar to Jaws Shift.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Alligator_Parameter_LipsPeriod">
            <summary>
              Looks up a localized string similar to Lips Period.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Alligator_Parameter_LipsShift">
            <summary>
              Looks up a localized string similar to Lips Shift.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Alligator_Parameter_TeethPeriod">
            <summary>
              Looks up a localized string similar to Teeth Period.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Alligator_Parameter_TeethShift">
            <summary>
              Looks up a localized string similar to Teeth Shift.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Alligator_Series_Jaws">
            <summary>
              Looks up a localized string similar to Jaws.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Alligator_Series_Lips">
            <summary>
              Looks up a localized string similar to Lips.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Alligator_Series_Teeth">
            <summary>
              Looks up a localized string similar to Teeth.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Aroon_Description">
             <summary>
               Looks up a localized string similar to Aroon
            is an indicator that shows the current state of the market and is used for determining the trend direction and strength, and it also shows the transition to the trendless state..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Aroon_Name">
            <summary>
              Looks up a localized string similar to Aroon.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Aroon_Series_Bottom">
            <summary>
              Looks up a localized string similar to Style 2.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Aroon_Series_Top">
            <summary>
              Looks up a localized string similar to Style 1.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.AroonOscillator_Description">
             <summary>
               Looks up a localized string similar to Aroon Oscillator
            is calculated on the basis of Aroon data. It shows the current state (trend/flat) of the market..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.AroonOscillator_Name">
            <summary>
              Looks up a localized string similar to Aroon Oscillator.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.AverageDirectionalMovement_Description">
             <summary>
               Looks up a localized string similar to Average Directional Movement
            is a trend indicator that helps to determine the presence of a directed trend in the price movement..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.AverageDirectionalMovement_Name">
            <summary>
              Looks up a localized string similar to Average Directional Movement.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.AverageDirectionalMovement_Series_NegativeDI">
            <summary>
              Looks up a localized string similar to -DI.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.AverageDirectionalMovement_Series_PositiveDI">
            <summary>
              Looks up a localized string similar to +DI.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.AverageTrueRange_Description">
             <summary>
               Looks up a localized string similar to Average True Range
            is an oscillator. It allows to analyze the market volatility index..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.AverageTrueRange_Name">
            <summary>
              Looks up a localized string similar to Average True Range.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.AwesomeOscillator_Description">
             <summary>
               Looks up a localized string similar to Awesome Oscillator
            is an oscillator and an indicator from the Bill Williams&apos; system. It is a 34-period simple moving average subtracted from the 5-period simple moving average. The moving averages are built by middle points of bars..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.AwesomeOscillator_Name">
            <summary>
              Looks up a localized string similar to Awesome Oscillator.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.AwesomeOscillator_Series_Down">
            <summary>
              Looks up a localized string similar to Value Down.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.AwesomeOscillator_Series_Up">
            <summary>
              Looks up a localized string similar to Value Up.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.BearsPower_Description">
             <summary>
               Looks up a localized string similar to Bears Power
            is an indicator that shows a possible change of trend direction and is based on the difference between the minimum price and 13-period exponential moving average..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.BearsPower_Name">
            <summary>
              Looks up a localized string similar to Bears Power.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.BollingerBands_Description">
             <summary>
               Looks up a localized string similar to Bollinger Bands
            is a trend indicator that helps to determine the upper and the lower margins of the normal price fluctuation range. The margins are built at distances equal to a certain number of standard deviations; therefore, the band width is not static, but proportional to root-mean-square deviation from the moving average over a period of time being analyzed..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.BollingerBands_Name">
            <summary>
              Looks up a localized string similar to Bollinger Bands.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.BollingerBands_Parameter_Deviation">
            <summary>
              Looks up a localized string similar to Deviation.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.BollingerBands_Series_Bottom">
            <summary>
              Looks up a localized string similar to Bottom.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.BollingerBands_Series_Middle">
            <summary>
              Looks up a localized string similar to Middle.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.BollingerBands_Series_Top">
            <summary>
              Looks up a localized string similar to Top.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.BullsPower_Description">
             <summary>
               Looks up a localized string similar to Bulls Power
            is an indicator that shows a possible change of trend direction and is based on the difference between the maximum price and 13-period exponential moving average..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.BullsPower_Name">
            <summary>
              Looks up a localized string similar to Bulls Power.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.CamarillaPivot_H1_Series">
            <summary>
              Looks up a localized string similar to H1.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.CamarillaPivot_H2_Series">
            <summary>
              Looks up a localized string similar to H2.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.CamarillaPivot_H3_Series">
            <summary>
              Looks up a localized string similar to H3.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.CamarillaPivot_H4_Series">
            <summary>
              Looks up a localized string similar to H4.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.CamarillaPivot_H5_Series">
            <summary>
              Looks up a localized string similar to H5.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.CamarillaPivot_L1_Series">
            <summary>
              Looks up a localized string similar to L1.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.CamarillaPivot_L2_Series">
            <summary>
              Looks up a localized string similar to L2.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.CamarillaPivot_L3_Series">
            <summary>
              Looks up a localized string similar to L3.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.CamarillaPivot_L4_Series">
            <summary>
              Looks up a localized string similar to L4.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.CamarillaPivot_L5_Series">
            <summary>
              Looks up a localized string similar to L5.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.CamarillaPivot_Name">
            <summary>
              Looks up a localized string similar to Camarilla Pivot.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.ChaikinOscillator_Description">
             <summary>
               Looks up a localized string similar to Chaikin Oscillator
            is an oscillator. It is calculated as a difference of moving averages from the Accumulation/Distribution indicator with different periods..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.ChaikinOscillator_Name">
            <summary>
              Looks up a localized string similar to Chaikin Oscillator.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.ChaikinVolatility_Description">
             <summary>
               Looks up a localized string similar to Chaikin volatility
            is a technical volatility indicator. It takes into account spread changes between maximum and minimum prices. It determines the volatility value based on the range width between the maximum and the minimum..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.ChaikinVolatility_Name">
            <summary>
              Looks up a localized string similar to Chaikin Volatility.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.ChaikinVolatility_Parameter_EmaPeriod">
            <summary>
              Looks up a localized string similar to EMA Period.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.CommodityChannelIndex_Description">
             <summary>
               Looks up a localized string similar to Commodity Channel Index
            is a trend indicator. It is based on the analysis of the current deviation of price from its average value for a certain period of time and the average absolute value of this parameter..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.CommodityChannelIndex_Name">
            <summary>
              Looks up a localized string similar to Commodity Channel Index.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.DeMarker_Description">
             <summary>
               Looks up a localized string similar to DeMarker
            is an oscillator. It is based on the comparison of the maximum of the current bar with the maximum of the previous one..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.DeMarker_Name">
            <summary>
              Looks up a localized string similar to DeMarker.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.DetrendedPriceOscillator_Description">
             <summary>
               Looks up a localized string similar to Detrended Price Oscillator 
            is an oscillator. It helps to filter out trends, excludes the direction element in the price behavior what considerably simplifies the process of the identification of price movement cycles and overbought/oversold levels..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.DetrendedPriceOscillator_Name">
            <summary>
              Looks up a localized string similar to Detrended Price Oscillator.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.EaseOfMovement_Description">
             <summary>
               Looks up a localized string similar to Ease of Movement
            is a technical indicator used for visual image of the correlation between the rate of price change and the volume on the market..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.EaseOfMovement_Name">
            <summary>
              Looks up a localized string similar to Ease of Movement.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.EaseOfMovement_Parameter_Multiplier">
            <summary>
              Looks up a localized string similar to Multiplier.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Envelopes_Description">
             <summary>
               Looks up a localized string similar to Envelopes
            is an oscillator that helps to determine the upper and the lower margins of the normal price fluctuation range..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Envelopes_Name">
            <summary>
              Looks up a localized string similar to Envelopes.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Envelopes_Parameter_Deviation">
            <summary>
              Looks up a localized string similar to Deviation.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Envelopes_Series_Bottom">
            <summary>
              Looks up a localized string similar to Bottom.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Envelopes_Series_Top">
            <summary>
              Looks up a localized string similar to Top.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.FisherTransformOscillator_Description">
             <summary>
               Looks up a localized string similar to Fisher Transform Oscillator
            is an oscillator. It bases the calculations on the price maximums and minimums for the previous periods by applying the Fisher&apos;s mathematical transformation to the correlations between the current price and the minimum/maximum..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.FisherTransformOscillator_Name">
            <summary>
              Looks up a localized string similar to Fisher Transform Oscillator.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.FisherTransformOscillator_Parameter_Ma1Method">
            <summary>
              Looks up a localized string similar to MA1 Type.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.FisherTransformOscillator_Parameter_Ma1Period">
            <summary>
              Looks up a localized string similar to MA1 Period.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.FisherTransformOscillator_Parameter_Ma2Method">
            <summary>
              Looks up a localized string similar to MA2 Type.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.FisherTransformOscillator_Parameter_Ma2Period">
            <summary>
              Looks up a localized string similar to MA2 Period.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.FisherTransformOscillator_Series_Down">
            <summary>
              Looks up a localized string similar to Style  2.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.FisherTransformOscillator_Series_Fisher">
            <summary>
              Looks up a localized string similar to Style 3.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.FisherTransformOscillator_Series_Ma1">
            <summary>
              Looks up a localized string similar to Style 4.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.FisherTransformOscillator_Series_Ma2">
            <summary>
              Looks up a localized string similar to Style 5.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.FisherTransformOscillator_Series_Up">
            <summary>
              Looks up a localized string similar to Style 1.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.ForceIndex_Description">
             <summary>
               Looks up a localized string similar to Force Index
            is an oscillator. It connects major market information elements: price direction, its difference and trading volume..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.ForceIndex_Name">
            <summary>
              Looks up a localized string similar to Force Index.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Fractals_Description">
             <summary>
               Looks up a localized string similar to Fractals
            is one of the indicators in the Bill Williams&apos; system allowing to find out the absolute price maximum or minimum for the certain period of time. To calculate the fractal upwards, a series of sequential bars is selected in which there is an equal number of bars with lower maximums before and behind the highest maximum. The opposite configuration with the lowest minimum corresponds to the fractal downwards..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Fractals_Name">
            <summary>
              Looks up a localized string similar to Fractals.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Fractals_Series_Bottom">
            <summary>
              Looks up a localized string similar to Bottom.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Fractals_Series_Top">
            <summary>
              Looks up a localized string similar to Top.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.GatorOscillator_Description">
             <summary>
               Looks up a localized string similar to Gator Oscillator
            is an oscillator and an indicator from the Bill Williams&apos; system. It is based on another indicator &quot;Alligator&quot; and shows the convergence/divergence degree of its balance lines..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.GatorOscillator_Name">
            <summary>
              Looks up a localized string similar to Gator Oscillator.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.GatorOscillator_Series_NegativeDown">
            <summary>
              Looks up a localized string similar to -Value Down.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.GatorOscillator_Series_NegativeUp">
            <summary>
              Looks up a localized string similar to -Value Up.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.GatorOscillator_Series_PositiveDown">
            <summary>
              Looks up a localized string similar to +Value Down.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.GatorOscillator_Series_PositiveUp">
            <summary>
              Looks up a localized string similar to +Value Up.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.HeikenAshi_CloseSeries">
            <summary>
              Looks up a localized string similar to Negative.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.HeikenAshi_Description">
             <summary>
               Looks up a localized string similar to Heiken Ashi
            is an indicator in form of conventional bars. It differs from the classical Japanese candlesticks by the fact that the indicator takes bars to build the price of bars and averages them in a special manner..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.HeikenAshi_Name">
            <summary>
              Looks up a localized string similar to Heiken Ashi.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.HeikenAshi_OpenSeries">
            <summary>
              Looks up a localized string similar to Positive.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Ichimoku_Description">
             <summary>
               Looks up a localized string similar to Ichimoku Kinko Hyo
            is an oscillator predefined to characterize the current trend, as well as the support and the resistance levels. The baselines of the indicator are analogous to moving averages and, thus, they can be interpreted separately as moving average indicators..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Ichimoku_Name">
            <summary>
              Looks up a localized string similar to Ichimoku Kinko Hyo.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Ichimoku_Parameter_KijunSen">
            <summary>
              Looks up a localized string similar to Kijun-sen.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Ichimoku_Parameter_SenkouSpan">
            <summary>
              Looks up a localized string similar to Senkou Span B.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Ichimoku_Parameter_TankanSen">
            <summary>
              Looks up a localized string similar to Tenkan-sen.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Ichimoku_Series_ChinkouSpan">
            <summary>
              Looks up a localized string similar to Chinkou Span.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Ichimoku_Series_DownKumo">
            <summary>
              Looks up a localized string similar to Down Kumo.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Ichimoku_Series_KijunSen">
            <summary>
              Looks up a localized string similar to Kijun-sen.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Ichimoku_Series_TankanSen">
            <summary>
              Looks up a localized string similar to Tankan-sen.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Ichimoku_Series_UpKumo">
            <summary>
              Looks up a localized string similar to Up Kumo.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Indicator_Level_Max">
            <summary>
              Looks up a localized string similar to Max.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Indicator_Level_Min">
            <summary>
              Looks up a localized string similar to Min.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Indicator_Parameter_Method">
            <summary>
              Looks up a localized string similar to Method.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Indicator_Parameter_Period">
            <summary>
              Looks up a localized string similar to Period.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Indicator_Parameter_PriceMode">
            <summary>
              Looks up a localized string similar to Apply to.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Indicator_Parameter_PricePair">
            <summary>
              Looks up a localized string similar to Price.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Indicator_Parameter_Shift">
            <summary>
              Looks up a localized string similar to Shift.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Indicator_Series_Main">
            <summary>
              Looks up a localized string similar to Style.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.KeltnerChannel_Description">
             <summary>
               Looks up a localized string similar to Keltner Channel
            is a technical indicator comprised of two bands above and under the moving average of price index the width of which is determined as a part of the average price change for a period of time..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.KeltnerChannel_Name">
            <summary>
              Looks up a localized string similar to Keltner Channel.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.KeltnerChannel_Parameter_Deviation">
            <summary>
              Looks up a localized string similar to Deviations.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.KeltnerChannel_Series_Lower">
            <summary>
              Looks up a localized string similar to Lower Band.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.KeltnerChannel_Series_Middle">
            <summary>
              Looks up a localized string similar to Middle Band.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.KeltnerChannel_Series_Upper">
            <summary>
              Looks up a localized string similar to Upper Band.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.MACD_Description">
             <summary>
               Looks up a localized string similar to MACD
            is an oscillator tracking the trend in prices. It shows the correlation of two price moving averages. The indicator is used for checking the trend strength and the direction, as well as for determining the reversal points..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.MACD_Name">
            <summary>
              Looks up a localized string similar to MACD.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.MACD_Parameter_FastEMAPeriod">
            <summary>
              Looks up a localized string similar to Fast EMA.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.MACD_Parameter_SlowEMAPeriod">
            <summary>
              Looks up a localized string similar to Slow EMA.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.MACD_Parameter_SMAPeriod">
            <summary>
              Looks up a localized string similar to MACD SMA.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.MACD_Series_Main">
            <summary>
              Looks up a localized string similar to Main.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.MACD_Series_Signal">
            <summary>
              Looks up a localized string similar to Signal.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.MarketFacilitationIndex_Description">
             <summary>
               Looks up a localized string similar to Market Facilitation Index
            is an indicator that shows the price change falling on one peak..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.MarketFacilitationIndex_Name">
            <summary>
              Looks up a localized string similar to Market Facilitation Index.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.MarketFacilitationIndex_Series_MfiDownVolumeDown">
            <summary>
              Looks up a localized string similar to MFI Down, Volume Down.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.MarketFacilitationIndex_Series_MfiDownVolumeUp">
            <summary>
              Looks up a localized string similar to MFI Down, Volume Up.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.MarketFacilitationIndex_Series_MfiUpVolumeDown">
            <summary>
              Looks up a localized string similar to MFI Up, Volume Down.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.MarketFacilitationIndex_Series_MfiUpVolumeUp">
            <summary>
              Looks up a localized string similar to MFI Up, Volume Up.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.MassIndex_Description">
             <summary>
               Looks up a localized string similar to Mass Index
            is an indicator. It is intended for the identification of the trend reversals on the basis of the range width change between the maximum and the minimum prices. If the range is expanding the mass index increases, if it is going down the index decreases..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.MassIndex_Name">
            <summary>
              Looks up a localized string similar to Mass Index.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.MassIndex_Parameter_PeriodEma">
            <summary>
              Looks up a localized string similar to First EMA Period.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.MassIndex_Parameter_PeriodEmaOfEma">
            <summary>
              Looks up a localized string similar to Second EMA Period.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.MassIndex_Parameter_PeriodSum">
            <summary>
              Looks up a localized string similar to Mass Period.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Momentum_Description">
             <summary>
               Looks up a localized string similar to Momentum
            is an oscillator. It measures the price change value of the financial instrument over a certain period of time. The price change value is calculated as a relation or a difference between the current price and the price of several previous periods..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Momentum_Name">
            <summary>
              Looks up a localized string similar to Momentum.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.MoneyFlowIndex_Description">
             <summary>
               Looks up a localized string similar to Money Flow Index
            is a technical indicator that shows the intensity the financial instrument is bought and sold with..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.MoneyFlowIndex_Name">
            <summary>
              Looks up a localized string similar to Money Flow Index.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.MovingAverage_Description">
             <summary>
               Looks up a localized string similar to Moving Average
            is a trend indicator that shows the average price value of the financial instrument over a certain period of time. When calculating the indicator, the price of the financial instrument is mathematically averaged for this period of time..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.MovingAverage_Name">
            <summary>
              Looks up a localized string similar to Moving Average.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.MovingAverageOfOscillator_Description">
             <summary>
               Looks up a localized string similar to Moving Average of Oscillator
            is a difference between the values of the MACD indicator and its signaling line..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.MovingAverageOfOscillator_Name">
            <summary>
              Looks up a localized string similar to Moving Average of Oscillator.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.OnBalanceVolume_Description">
             <summary>
               Looks up a localized string similar to On Balance Volume
            is an indicator based on the price and the volume. It is a cumulative moving average of the trading volume with a plus sign in the case of the rising market and with a minus sign in the case of the declining market..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.OnBalanceVolume_Name">
            <summary>
              Looks up a localized string similar to On Balance Volume.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.ParabolicSar_CoefStep">
            <summary>
              Looks up a localized string similar to Step.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.ParabolicSar_Description">
             <summary>
               Looks up a localized string similar to Parabolic SAR
            is a trend indicator. It allows to determine a tolerance within the scope of which the price movement is possible in order to stay within the current trend..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.ParabolicSar_MaxCoef">
            <summary>
              Looks up a localized string similar to Maximum.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.ParabolicSar_Name">
            <summary>
              Looks up a localized string similar to Parabolic SAR.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Pivot_Description">
            <summary>
              Looks up a localized string similar to Pivot                                                                                                                                                                                                             Technical indicator derived from the calculation of the mean high, low and closing price of a currency pair. Line indicator used to predict potential support and resistance levels and help determine the likely direction of price movements of currency pairs..
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Pivot_Method_Caption">
            <summary>
              Looks up a localized string similar to Method.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Pivot_Name">
            <summary>
              Looks up a localized string similar to Pivot.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Pivot_Resistance_Series_Lower">
            <summary>
              Looks up a localized string similar to R1.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Pivot_Resistance_Series_Middle">
            <summary>
              Looks up a localized string similar to R2.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Pivot_Resistance_Series_R4">
            <summary>
              Looks up a localized string similar to R4.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Pivot_Resistance_Series_Upper">
            <summary>
              Looks up a localized string similar to R3.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Pivot_Series">
            <summary>
              Looks up a localized string similar to Main.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Pivot_Support_Series_Lower">
            <summary>
              Looks up a localized string similar to S3.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Pivot_Support_Series_Middle">
            <summary>
              Looks up a localized string similar to S2.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Pivot_Support_Series_S4">
            <summary>
              Looks up a localized string similar to S4.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Pivot_Support_Series_Upper">
            <summary>
              Looks up a localized string similar to S1.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.PriceChannel_Description">
             <summary>
               Looks up a localized string similar to Price Channel
            is a technical indicator. It is built on the calculation of the highest and the lowest prices for a certain number of periods. The indicator lines are dynamic support and resistance lines and change depending on the appearance of new maximum and minimum values of prices..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.PriceChannel_Name">
            <summary>
              Looks up a localized string similar to Price Channel.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.PriceChannel_Series_Lower">
            <summary>
              Looks up a localized string similar to Lower Band.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.PriceChannel_Series_Middle">
            <summary>
              Looks up a localized string similar to Middle Band.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.PriceChannel_Series_Upper">
            <summary>
              Looks up a localized string similar to Upper Band.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Programming_AdvisorOrder_None">
            <summary>
              Looks up a localized string similar to Do nothing.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.RateOfChangeOscillator_Description">
             <summary>
               Looks up a localized string similar to ROC Oscillator
            is an oscillator that shows the rate of price change. It represents the percentage of price change from one period to another and is calculated as a comparison of the current price with the price of the prior period being distant from the current period for several previous ones..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.RateOfChangeOscillator_Name">
            <summary>
              Looks up a localized string similar to ROC Oscillator.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.RegressionLine_Description">
             <summary>
               Looks up a localized string similar to Regression Line
            is an indicator that presents a straight line between two price points built by using the least-squares method. The line becomes the exact middle of the price change line and plays a role of the price equilibrium line. The deviation upwards from it shows the buyers&apos; activity, downwards — the sellers&apos; one..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.RegressionLine_Name">
            <summary>
              Looks up a localized string similar to Regression Line.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.RelativeStrenghtIndex_Description">
             <summary>
               Looks up a localized string similar to Relative Strength Index
            is an oscillator that determines the trend strength and the probability of its change. It can possess values ranging from 0 to 100..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.RelativeStrenghtIndex_Name">
            <summary>
              Looks up a localized string similar to Relative Strength Index.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.RelativeVigorIndex_Description">
             <summary>
               Looks up a localized string similar to Relative Vigor Index
            is an oscillator. It measures the certainty of the current price movement and shows the probability that it will continue in the future..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.RelativeVigorIndex_Name">
            <summary>
              Looks up a localized string similar to Relative Vigor Index.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.RelativeVigorIndex_Series_Main">
            <summary>
              Looks up a localized string similar to RVI Style:.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.RelativeVigorIndex_Series_Signal">
            <summary>
              Looks up a localized string similar to Signal Line.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.StandardDeviation_Description">
             <summary>
               Looks up a localized string similar to Standard Deviation
            is a trend indicator. This indicator characterizes the market volatility - the price fluctuation range relative to the moving average. It is often used as a component of other indicators..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.StandardDeviation_Name">
            <summary>
              Looks up a localized string similar to Standard Deviation.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.StochasticOscillator_Description">
             <summary>
               Looks up a localized string similar to Stochastic Oscillator
            is an oscillator. It compares the current closing price with the price range for the selected period of time, i.e. it shows the position of the current price relative to the price range for the certain period of time in the past..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.StochasticOscillator_Name">
            <summary>
              Looks up a localized string similar to Stochastic Oscillator.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.StochasticOscillator_Parameter_PeriodD">
            <summary>
              Looks up a localized string similar to %D Period.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.StochasticOscillator_Parameter_PeriodK">
            <summary>
              Looks up a localized string similar to %K Period.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.StochasticOscillator_Parameter_Slowing">
            <summary>
              Looks up a localized string similar to Slowing.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.StochasticOscillator_Series_Main">
            <summary>
              Looks up a localized string similar to Main.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.StochasticOscillator_Series_Signal">
            <summary>
              Looks up a localized string similar to Signal.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.SupportAndResistance_Description">
             <summary>
               Looks up a localized string similar to Support &amp; Resistance                                                                                                                                                                                              Is an indicator built on the basis of FRACTALS values.
            The indicator lines are used to forecast the potential support and resistance levels and help to determine the probable price movement directions of currency pairs..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.SupportAndResistance_Name">
            <summary>
              Looks up a localized string similar to Support &amp; Resistance.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.SupportAndResistance_Series_Bottom">
            <summary>
              Looks up a localized string similar to Bottom.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.SupportAndResistance_Series_Top">
            <summary>
              Looks up a localized string similar to Top.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.TimeSeriesForecast_Description">
             <summary>
               Looks up a localized string similar to Time Series Forecast
            is an indicator comprised of linear regression measurements and calculated by using the least-squares method. The indicator is used to determine the trend over a set period of time..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.TimeSeriesForecast_Name">
            <summary>
              Looks up a localized string similar to Time Series Forecast.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.TrendEnvelope_Description">
             <summary>
               Looks up a localized string similar to Trend Envelope
            is based on Envelopes data.
            It helps to determine the upper and the lower margins of the normal price fluctuation range..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.TrendEnvelope_Name">
            <summary>
              Looks up a localized string similar to Trend Envelope.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.TrendEnvelope_Parameter_Deviation">
            <summary>
              Looks up a localized string similar to Deviations.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.TrendPriceChannel_Description">
             <summary>
               Looks up a localized string similar to Trend Price Channel
            It is based on Price Channel data..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.TrendPriceChannel_Name">
            <summary>
              Looks up a localized string similar to Trend Price Channel.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.TrendPriceChannel_Series_Down">
            <summary>
              Looks up a localized string similar to Style 2.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.TrendPriceChannel_Series_Up">
            <summary>
              Looks up a localized string similar to Style 1.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Volumes_Description">
             <summary>
               Looks up a localized string similar to Volumes
            The Volumes indicator - tick volume determines the number of price changes for a certain time period.
            The Volumes indicator displays volumes as histogram, the height of histogram columns is proportional to the number of price changes for a certain time period..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Volumes_Name">
            <summary>
              Looks up a localized string similar to Volumes.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Volumes_Series_Down">
            <summary>
              Looks up a localized string similar to Value Down.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Volumes_Series_Main">
            <summary>
              Looks up a localized string similar to Style.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.Volumes_Series_Up">
            <summary>
              Looks up a localized string similar to Value Up.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.WilliamsPercentRange_Description">
             <summary>
               Looks up a localized string similar to Williams’ Percent Range
            is an indicator that determines the overbought/oversold condition by the position of the current closing price in the range between the minimum and the maximum of prices for the previous periods of time..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.WilliamsPercentRange_Name">
            <summary>
              Looks up a localized string similar to Williams’ Percent Range.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.ZigZag_Description">
             <summary>
               Looks up a localized string similar to Zig-Zag
            is an indicator. When calculating it, the local maximums and the local minimums of the price at the current period of time are used. It is useful for the determination of price behavior, support and resistance levels and classical graphic models of technical analysis, such as head and shoulders, double bottom and double tops..
             </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.ZigZag_ExtBackStep">
            <summary>
              Looks up a localized string similar to ExtBackstep.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.ZigZag_ExtDepth">
            <summary>
              Looks up a localized string similar to ExtDepth.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.ZigZag_ExtDeviation">
            <summary>
              Looks up a localized string similar to ExtDeviation.
            </summary>
        </member>
        <member name="P:IPro.Model.Client.ResourcesLocalization.IndicatorResources.ZigZag_Name">
            <summary>
              Looks up a localized string similar to Zig-Zag.
            </summary>
        </member>
        <member name="T:IPro.Model.Client.Trade.PositionState">
            <summary>
            Position state
            </summary>
        </member>
        <member name="F:IPro.Model.Client.Trade.PositionState.NotActive">
            <summary>
            Position not active
            </summary>
        </member>
        <member name="F:IPro.Model.Client.Trade.PositionState.Active">
            <summary>
            Position is active
            </summary>
        </member>
        <member name="F:IPro.Model.Client.Trade.PositionState.Pending">
            <summary>
            Position is pending
            </summary>
        </member>
        <member name="F:IPro.Model.Client.Trade.PositionState.Closed">
            <summary>
            Position closed
            </summary>
        </member>
        <member name="F:IPro.Model.Client.Trade.PositionState.PartiallyClosed">
            <summary>
            Position partially closed
            </summary>
        </member>
        <member name="F:IPro.Model.Client.Trade.PositionState.Canceled">
            <summary>
            Position canceled
            </summary>
        </member>
        <member name="F:IPro.Model.Client.Trade.PositionState.Expired">
            <summary>
            Position expired
            </summary>
        </member>
        <member name="T:IPro.Model.Client.Trade.ModificationType">
            <summary>
            Speicifies type of changes occurred with position on server
            </summary>
        </member>
        <member name="F:IPro.Model.Client.Trade.ModificationType.Opened">
            <summary>
            Position opened
            </summary>
        </member>
        <member name="F:IPro.Model.Client.Trade.ModificationType.Modified">
            <summary>
            Position modified
            </summary>
        </member>
        <member name="F:IPro.Model.Client.Trade.ModificationType.Closed">
            <summary>
            Position closed
            </summary>
        </member>
        <member name="F:IPro.Model.Client.Trade.ModificationType.PendingCreated">
            <summary>
            Position pending created
            </summary>
        </member>
        <member name="F:IPro.Model.Client.Trade.ModificationType.Canceled">
            <summary>
            Position canceld
            </summary>
        </member>
        <member name="F:IPro.Model.Client.Trade.ModificationType.ModifiedSwap">
            <summary>
            Position modified swap
            </summary>
        </member>
    </members>
</doc>
